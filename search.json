[
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "",
    "text": "Source: Chicago Sun Times; Children and adults cool down at the Crown Fountain in the Loop on Monday June 17, 2024\n\n\nThe summer of 2024 was the hottest yet, (Younger 2024) and every indication is that the heat is only going to get more intense. Communities need to protect their vulnerable members by adapting to the changing climate with solutions informed by their cultural, geographic, and political context.\n\n\nBecause this is a place-based learning exercise, it can be adapted to different cultural contexts. This is a key element we hear about when asking communities how to teach Earth Data Science in a culturally responsive way.\n\n\n\nSource: https://successfulacademics.com/BlackChildSEL/CRT.html\n\n\n\n\n\n\n\n\nConversation Starter\n\n\n\nHeat affects different communities in different ways. Here are some questions to help spark a conversation with classmates or with members of your community:\n\nWhat effects has heat had on your community?\nWhat changes have you observed to the climate over your lifetime? Can you talk to an elder and find out what changes they have observed?\nHow have policies like redlining influenced community vulnerability to heat waves?\nAre there traditional building methods or ecological practices in your culture that help to mitigate the effects of heat waves?\n\n\n\nWe know it can be tough to talk about climate change – be easy on yourselves! One way to help have a positive conversation about climate change is to talk about solutions. After all, when it comes to a life-or-death issue like heat waves, we can’t let the conversation end with observing the situation.\n\n\n\n\n\n\nConversation Starter\n\n\n\nWhat are some short- and long-term strategies for mitigating the effects of heat on your community? If you were implementing mitigation strategies, who would you reach out to first? Below are some examples of some types of strategies you could discuss:\n\nReaching out to vulnerable community members through cultural and religious institutions to provide aid such as transportation to an air conditioned space, ensure water supply, and cool down buildings with strategies like fans and radiation-blocking window films.\nCulturally and climatically appropriate changes to the built environment to reduce heat absorption and storage during heat waves.\nCulturally and climatically appropriate changes and/or expansion of green space to reduce heat absorption and storage\nCultural events to help your community adapt\n\n\n\nMaking cultural connections is important for achieving learning goals and engaging diverse groups of students.\n\n\n\nWe have also developed this activity so that it can be adapted to many different academic disciplines, and we encourage you to do so in your classes! For example:\n\n\n\n\n\n\n\nDiscipline\nLearning Goals\n\n\n\n\nPhysics\nExplain how aspects of heat transfer such asalbedo, thermal mass, and latent heat relate to the Urban Heat Island effect\n\n\nBiology\nBiological concepts that cause the Urban Heat Island effect such as transpiration, photosynthesis, and homeostasis\n\n\nStatistics\nProbability distributions for average and extreme temperatures, stationarity, and hypothesis testing to determine differences among sites\n\n\nCalculus\nProcesses governing heat transfer\n\n\n\n\n\n\n\n\n\nRead More: Air Temperature vs. Surface Temperature\n\n\n\nWe’ll be looking at air temperature in this analysis rather than surface temperature. Some of you may have clocked that the surface temperature is more related to the Urban Heat Island mechanism! However, the two are closely related, so we think we can still examing Urban Heat Island effects using air temperature. Check out this resource from the EPA (US EPA 2014) on the relationship between air temperature and surface temperature and the Urban Heat Island effect:",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html#were-all-feeling-the-heat",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html#were-all-feeling-the-heat",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "",
    "text": "Source: Chicago Sun Times; Children and adults cool down at the Crown Fountain in the Loop on Monday June 17, 2024\n\n\nThe summer of 2024 was the hottest yet, (Younger 2024) and every indication is that the heat is only going to get more intense. Communities need to protect their vulnerable members by adapting to the changing climate with solutions informed by their cultural, geographic, and political context.\n\n\nBecause this is a place-based learning exercise, it can be adapted to different cultural contexts. This is a key element we hear about when asking communities how to teach Earth Data Science in a culturally responsive way.\n\n\n\nSource: https://successfulacademics.com/BlackChildSEL/CRT.html\n\n\n\n\n\n\n\n\nConversation Starter\n\n\n\nHeat affects different communities in different ways. Here are some questions to help spark a conversation with classmates or with members of your community:\n\nWhat effects has heat had on your community?\nWhat changes have you observed to the climate over your lifetime? Can you talk to an elder and find out what changes they have observed?\nHow have policies like redlining influenced community vulnerability to heat waves?\nAre there traditional building methods or ecological practices in your culture that help to mitigate the effects of heat waves?\n\n\n\nWe know it can be tough to talk about climate change – be easy on yourselves! One way to help have a positive conversation about climate change is to talk about solutions. After all, when it comes to a life-or-death issue like heat waves, we can’t let the conversation end with observing the situation.\n\n\n\n\n\n\nConversation Starter\n\n\n\nWhat are some short- and long-term strategies for mitigating the effects of heat on your community? If you were implementing mitigation strategies, who would you reach out to first? Below are some examples of some types of strategies you could discuss:\n\nReaching out to vulnerable community members through cultural and religious institutions to provide aid such as transportation to an air conditioned space, ensure water supply, and cool down buildings with strategies like fans and radiation-blocking window films.\nCulturally and climatically appropriate changes to the built environment to reduce heat absorption and storage during heat waves.\nCulturally and climatically appropriate changes and/or expansion of green space to reduce heat absorption and storage\nCultural events to help your community adapt\n\n\n\nMaking cultural connections is important for achieving learning goals and engaging diverse groups of students.\n\n\n\nWe have also developed this activity so that it can be adapted to many different academic disciplines, and we encourage you to do so in your classes! For example:\n\n\n\n\n\n\n\nDiscipline\nLearning Goals\n\n\n\n\nPhysics\nExplain how aspects of heat transfer such asalbedo, thermal mass, and latent heat relate to the Urban Heat Island effect\n\n\nBiology\nBiological concepts that cause the Urban Heat Island effect such as transpiration, photosynthesis, and homeostasis\n\n\nStatistics\nProbability distributions for average and extreme temperatures, stationarity, and hypothesis testing to determine differences among sites\n\n\nCalculus\nProcesses governing heat transfer\n\n\n\n\n\n\n\n\n\nRead More: Air Temperature vs. Surface Temperature\n\n\n\nWe’ll be looking at air temperature in this analysis rather than surface temperature. Some of you may have clocked that the surface temperature is more related to the Urban Heat Island mechanism! However, the two are closely related, so we think we can still examing Urban Heat Island effects using air temperature. Check out this resource from the EPA (US EPA 2014) on the relationship between air temperature and surface temperature and the Urban Heat Island effect:",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html#case-study-chicago-summer-2024-heat-wave",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html#case-study-chicago-summer-2024-heat-wave",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "Case Study: Chicago summer 2024 heat wave",
    "text": "Case Study: Chicago summer 2024 heat wave\n\n\n\nSource: Illinois State Climatologist; Daily June average temperatures and departures from normal in Chicago\n\n\nAccording to the Illinois state climatology office (Illinois State Water Survey 2024), daily average temperatures between June 13 and June 25 were 5 to 15 degrees above normal in Chicago and statewide. Overnight temperatures in Chicago were forecast to stay into the 70’s with record breaking temperatures being attributed to climate change.\n\n\n\nSource: NOAA, Magenta indicates the highest risk of extreme heat on Monday June 17, 2024\n\n\nIf you teach in or near Chicago, your students probably have some feelings about how hot it was! The Chicago area is known for its at times extreme weather, but cities get hit particularly hard by heat waves due to the urban heat island effect. This article from WGN (Alix Martichoux 2024) explains what this means for cities like Chicago.\n\nHeat kills\nClimate change is intensifying summer heat in Chicago, particularly in heat island areas, which disproportionately affects marginalized communities. These neighborhoods, often with less green space and more heat-trapping infrastructure, face higher temperatures and greater health risks (us_epa_heat_2019?).\n\n\n\n\n\n\nRead More: What is a Heat Island?\n\n\n\nRead more about the Urban Heat Island effect at the EPA.\n\n\nChicago O’Hare International Airport is a known heat island often reporting temperatures 5-10 degrees warmer than surrounding communities (NBC Chicago 2022).\n\n\nIs it cooler by the lake?\nMany Chicagoans know that one of the best ways to beat the heat is to head to the lake. In this we’ll try to answer whether it’s really cooler by the Lake, and what Chicago could do to cool down the rest of the City.\n\n\n\nWGN Temperature Forecast – it’s cooler by the lake!\n\n\nWe will select two climate stations located within the greater Chicago area: O’Hare International Airport (Station ID: USW00094846), and Northerly Island (Station ID: USC00111550) to explore trends in maximum daily temperatures.\n\n\n\n\n\n\nPhoto of O’Hare Airport by Miguel Angel Sanz - Unsplash.\n\n\n\n\n\n\n\nAerial view of Northerly Island. Photo by Tom Harris.",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html#get-started-with-open-reproducible-science-in-the-cloud",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html#get-started-with-open-reproducible-science-in-the-cloud",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "Get started with open, reproducible science in the cloud",
    "text": "Get started with open, reproducible science in the cloud\nWe will be using Python and GitHub codespaces, two popular open-source data science tools, to do the coding for this workshop, along with GitHub classroom to distribute the activity. You will not need to download or install anything on your computer - everything we’ll do can be done in the cloud! You and your students will need a free GitHub account in order to accept the assignment from GitHub classroom and complete the activity.\n\n\n\n\n\n\n\nTip\n\n\n\nFor those interested, we have created a working Python environment that we host on Docker Hub. Feel free to share this with your students or research group.\n\nWe’re excited to get started doing some EDS with you!",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html#step-1-import-packages",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html#step-1-import-packages",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "STEP 1: Import packages",
    "text": "STEP 1: Import packages\n\nPython packages let you use code written by experts around the world\nBecause Python is open source, lots of different people and organizations can contribute (including you!). Many contributions are in the form of packages which do not come with a standard Python download.\n\n\n\n\n\n\nRead More: Packages need to be installed and imported.\n\n\n\nLearn more about using Python packages. How do you find and use packages? What is the difference between installing and importing packages? When do you need to do each one? This article on Python packages will walk you through the basics.\n\n\nIn the cell below, someone was trying to import the pandas package, which helps us to work with tabular data such as comma-separated value or csv files.\n\n\n\n\n\n\nTry It: Import a package\n\n\n\n\nCorrect the typo below to properly import the pandas package under its alias pd.\nRun the cell to import pandas\n\n\n\n\n# Import libraries\nimport pandsa as pd\n\n\n\nSee our solution!\n# Use tabular data\nimport pandas as pd",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html#step-2-download-data",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html#step-2-download-data",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "STEP 2: Download Data",
    "text": "STEP 2: Download Data\n\nGlobal Historical Climatology Network\nOne way scientists know that the climate is changing is by looking at records from temperature sensors around the globe. Some of these sensors have been recording data for over a century! For this activity, we’ll get daily maximum temperature measurements from the Global Historical Climate Network daily (Menne et al. 2012), an openly available and extensively validated global network of temperature sensors.\n\n\n\nThe Global Historical Climatology Network Source: CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=2084097\n\n\nThe GHCNd data are available through by the National Oceanic and Atmospheric Administration’s (NOAA) National Centers for Environmental Information (NCEI) Climate Data Online search tool. We can get also get these data using code by contacting NCEI’s API.\n\n\n\n\n\n\n\nWhat’s an API?\n\n\n\nAn API, or Application Programming Interface, is how computers talk to each other.\n\n\n\n\n\n\n\nRead More\n\n\n\nRead more about NCEI’s API and the Climate Data Online database.\n\n\nFor this activity we have created URLs that contacts the NCEI API for two climate stations in the greater Chicago area. We will walk through each line of the url to explain what it is doing.\n\n\nO’Hare International Airport\nChicago O’Hare International Airport (ORD) is one of the busiest airports in the world, serving as a major hub for both domestic and international flights. Located about 14 miles northwest of downtown Chicago, it offers flights to more than 200 destinations and handles over 83 million passengers annually. It is home to Chicago’s official meteorological station. It creates an urban heat island due to the amount of concrete and asphalt needed to support the infrastructure.\nStation ID: USW00094846\n\n\n\n\n\n\nTry It: Build your API URL\n\n\n\n\nAdd the station ID for the O’Hare station (USW00094846) into the URL below\nRun the code to store the URL in Python\n\n\n\n\n\n\n\n\n\n\nWhat if the API is down?\n\n\n\nGetting data from APIs relies on internet services you don’t have control over. If you are getting a response something like 503: Service Unavailable, it may be that the API is down temperarily! If that happens during the workshop, we’ll have you use some data we’ve already downloaded and placed in the folder with this code – with any luck we won’t need it.\n\n\n# Create a URL API call for the O'Hare climate station\nohare_url = (\n    'https://www.ncei.noaa.gov/access/services/data/v1?'\n    'dataset=daily-summaries'\n    '&dataTypes=TMAX'\n    '&stations='\n    '&startDate=2024-06-01'\n    '&endDate=2024-06-30'\n    '&units=standard')\n\n# Check the URL\nohare_url\n\n\n\nSee our solution!\n# Create a URL API call for the O'Hare climate station\nohare_url = (\n    'https://www.ncei.noaa.gov/access/services/data/v1?'\n    'dataset=daily-summaries'\n    '&dataTypes=TMAX'\n    '&stations=USW00094846'\n    '&startDate=2024-06-01'\n    '&endDate=2024-06-30'\n    '&units=standard')\n\n# Check the URL\nohare_url\n\n\n'https://www.ncei.noaa.gov/access/services/data/v1?dataset=daily-summaries&dataTypes=TMAX&stations=USW00094846&startDate=2024-06-01&endDate=2024-06-30&units=standard'\n\n\n\n\n\n\n\n\nTry It: Load maximum temperature data for O'Hare\n\n\n\n\nReplace url_or_path with the variable name you used above to store the O’Hare station API URL (or O’Hare data path if the API is down). Run the code to make sure you’ve got it right!\nUncomment lines 4 and 5. Then, replace date_column_name with the actual column name that has the date.\nRun the code, again. Check that the date column is the index and that it is parsed into a DateTimeIndex using the .describe() method.\n\n\n\n\n# Open data using pandas\nohare_df = pd.read_csv(\n    url_or_path,\n    #parse_dates=True,\n    #index_col='date_column_name'\n)\n\n# Plot the data using pandas\nohare_df.TMAX.plot()\n\n# Check the first 5 lines of data\nohare_df.head()\n\n\n\nSee our solution!\n# Open data using pandas\nohare_df = pd.read_csv(\n    ohare_url,\n    # Comment above and uncomment below if NCEI isn't working\n    # ohare_path,\n    parse_dates=True,\n    index_col='DATE',\n    na_values=['NaN'])\n\n# Plot the data using pandas\nohare_df.TMAX.plot()\n\n# Check the data types\nohare_df.describe()\n\n\n\n\n\n\n\n\n\nTMAX\n\n\n\n\ncount\n30.000000\n\n\nmean\n83.566667\n\n\nstd\n8.122694\n\n\nmin\n68.000000\n\n\n25%\n78.000000\n\n\n50%\n85.000000\n\n\n75%\n90.250000\n\n\nmax\n97.000000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNortherly Island\nNortherly Island is a 91-acre man-made peninsula located along the Lake Michigan shoreline in Chicago. Originally part of Daniel Burnham’s 1909 Plan of Chicago, it was transformed into a nature-focused park featuring walking trails, natural habitats, and scenic lakefront views. The site also hosts the Huntington Bank Pavilion, a popular outdoor concert venue.\n\n\n\n\n\n\nTry It: Load data, part 2\n\n\n\n\nRepeat the above data loading process using the Northerly Island site (Station ID: USC00111550)\n\n\n\n\n\n\n\nMake sure to give your new variables different names!\n\n\n\ne.g. northerly_url instead of ohare_url. Otherwise, you will write over the data you just downloaded!\n\n\n\n\n\n# Create an API call for the Northerly climate station\n\n\n\nSee our solution!\n# Create an API call for the Northerly climate station\nnortherly_url = (\n    'https://www.ncei.noaa.gov/access/services/data/v1?'\n    'dataset=daily-summaries'\n    '&dataTypes=TMAX'\n    '&stations=USC00111550'\n    '&startDate=2024-06-01'\n    '&endDate=2024-06-30'\n    '&units=standard')\n\n# Check the url\nnortherly_url\n\n\n'https://www.ncei.noaa.gov/access/services/data/v1?dataset=daily-summaries&dataTypes=TMAX&stations=USC00111550&startDate=2024-06-01&endDate=2024-06-30&units=standard'\n\n\n\n# Open data\n\n# Plot the data\n\n# Check the first 5 lines of data\n\n\n\nSee our solution!\n# Open data\nnortherly_df = pd.read_csv(\n    northerly_url,\n    # Comment above and uncomment below in the event that NCEI isn't working\n    # northerly_path,\n    parse_dates=True,\n    index_col='DATE',\n    na_values=['NaN'])\n\n# Plot the data\nnortherly_df.TMAX.plot()\n\n# Check the first 5 lines of data\nnortherly_df.head()\n\n\n\n\n\n\n\n\n\nSTATION\nTMAX\n\n\nDATE\n\n\n\n\n\n\n2024-06-01\nUSC00111550\n67\n\n\n2024-06-02\nUSC00111550\n67\n\n\n2024-06-03\nUSC00111550\n85\n\n\n2024-06-04\nUSC00111550\n77\n\n\n2024-06-05\nUSC00111550\n79",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html#step-3-wrangle-data",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html#step-3-wrangle-data",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "STEP 3: Wrangle Data",
    "text": "STEP 3: Wrangle Data\n\nSelect only the columns you want\nNotice that your data came with a STATION column as well as the maximum temperature TMAX column. The extra column can make your data a bit unweildy.\n\n\n\n\n\n\nTry It\n\n\n\nTo select only the TMAX column:\n\nReplace df with the name of your DataFrame\nReplace column_name with the name of the column you want to select\nReplace tmax_df in all locations with a descriptive name for the new single-column DataFrame\n\n\n\n\n\n\n\nWhat’s with those double square brackets? ([[]])\n\n\n\nIf you use single brackets, you will find that you get back something called a Series rather than a DataFrame, which will make things difficult down the road. A Series is a single column of a DataFrame. It still has an index (in this case our dates), but can’t do all the things a DataFrame can do. It also displays as plain text instead of a formatted table, so you can easily tell the difference.\n\n\n\n\n\n# Select only the TMAX column of the O'Hare data\ntmax_df = df[['column_name']]\ntmax_df.describe()\n\n\n# Select only the TMAX column of the Northerly data\ntmax_df = df[['column_name']]\ntmax_df.describe()\n\n\n\nSee our solution!\nohare_tmax_df = ohare_df[['TMAX']]\nnortherly_tmax_df = northerly_df[['TMAX']]\nohare_tmax_df.describe(), northerly_tmax_df.describe()\n\n\n(            TMAX\n count  30.000000\n mean   83.566667\n std     8.122694\n min    68.000000\n 25%    78.000000\n 50%    85.000000\n 75%    90.250000\n max    97.000000,\n             TMAX\n count  30.000000\n mean   79.900000\n std     8.738934\n min    63.000000\n 25%    74.250000\n 50%    78.500000\n 75%    88.000000\n max    94.000000)\n\n\n\n\nJoin data\nRight now, we have data from two stations in two separate DataFrames. We could work with that, but to make things go smoother (and learn how to work with DataFrames) we can join them together.\n\n\n\n\n\n\nWhat’s a join?\n\n\n\nThere are a few different ways to combine DataFrames in Python. A join combines two DataFrames by their index (the dates in our case), checking to make sure that every date matches. In our case, we could concatenate instead without checking the dates, because all the dates are the same for our two DataFrames. That would probably be faster! But also, we think it is more error-prone. For example, it might not tell you that something was wrong if you accidentally downloaded data from two different years.\n\n\n\n\n\n\n\n\nTry It: Join two `DataFrame`s\n\n\n\nStarting with the sample code below:\n\nReplace left_df with the name of the first DataFrame. In this case, it doesn’t matter which one you choose to be on the left, but you need to make sure that it matches the left suffix label (lsuffix).\nReplace right_df with the name of the second DataFrame, making sure it matches rsuffix.\nRun the code and check that your join happened correctly.\n\n\n\n\n# Join the data\ntmax_df = (\n    left_df\n    .join(\n        right_df, \n        lsuffix='_ohare', \n        rsuffix='_northerly')\n)\ntmax_df.head()\n\n\n\nSee our solution!\n# Join the data\ntmax_df = (\n    ohare_tmax_df\n    .join(\n        northerly_tmax_df, \n        lsuffix='_ohare', \n        rsuffix='_northerly')\n)\ntmax_df.head()\n\n\n\n\n\n\n\n\n\nTMAX_ohare\nTMAX_northerly\n\n\nDATE\n\n\n\n\n\n\n2024-06-01\n68\n67\n\n\n2024-06-02\n77\n67\n\n\n2024-06-03\n86\n85\n\n\n2024-06-04\n85\n77\n\n\n2024-06-05\n79\n79",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/09-urban-heat-island/urban-heat-island.html#step-4-plot",
    "href": "notebooks/09-urban-heat-island/urban-heat-island.html#step-4-plot",
    "title": "\n                Urban Heat Wave\n            ",
    "section": "STEP 4: Plot",
    "text": "STEP 4: Plot\nLet’s try plotting the joined DataFrame, just like we plotted the data previously:\n\ntmax_df.plot()\n\n\n\n\n\n\n\n\nHopefully you can see all the data! However, this plot is missing some key elements, and is sadly lacking in style.\n\nWhat do you notice about this plot that you would like to change for a final figure?\n\n\nRename columns for nicer labels\nSomething you might have noticed about your plot is that the labels in the legend don’t look very nice. Most things about hte plot we can change by passing parameters to the .plot() method (see below). However, we think the easiest way to change the legend labels in Python is to rename the columns. Python will automatically use the column names as legend labels just like it did in the first plot!\n\n\n\n\n\n\nTip\n\n\n\nOnce we rename columns to non-machine-readable names that include spaces and special characters, they will be harder to work with in Python. That’s why we’ve used a different name to store the DataFrame with renamed columns.\n\n\n\n\n\n\n\n\nTry It: Rename `DataFrame` columns\n\n\n\nStarting with the sample code below, which contains a dictionary, or set of named values:\n\nChange previous_column_name to the name of one of the columns you want to rename, and New Column Name to the label you want to appear on your plot.\nRun the code and check that you have successfully changed the column name. Watch out for typos in the column name.\nMake a new entry inside the dictionary (look for the curly braces ({})), and change the values to match the other column you want to rename. Make sure to separate the two rows with a comma so Python knows you’re starting a new entry.\nCheck that your code works.\n\n\n\n\n# Rename the columns\ntmax_plot_df = tmax_df.rename(\n    columns={\n        'previous_column_name': \"New Column Name\"\n    }\n)\ntmax_plot_df.head()\n\n\n\nSee our solution!\n# Rename the columns\ntmax_plot_df = tmax_df.rename(columns={\n    'TMAX_ohare': \"O'Hare Airport\", \n    'TMAX_northerly': 'Northerly Island'})\ntmax_plot_df.head()\n\n\n\n\n\n\n\n\n\nO'Hare Airport\nNortherly Island\n\n\nDATE\n\n\n\n\n\n\n2024-06-01\n68\n67\n\n\n2024-06-02\n77\n67\n\n\n2024-06-03\n86\n85\n\n\n2024-06-04\n85\n77\n\n\n2024-06-05\n79\n79\n\n\n\n\n\n\n\n\n\nGenerate a figure\nNow, we’re ready to make a quality figure of the data!\n\n\n\n\n\n\nTry It\n\n\n\nBelow, you’ll see some code to make a customized figure of your data. Starting there:\n\nReplace TITLE HERE with your figure title\nUncomment the other parameters by removing the # at the beginning of the line.\nExperiment with different figure sizes, markers, line styles, and color maps.\n\n\n\n\n\n\n\nWhat does # do in Python?\n\n\n\nThe # indicates a comment – it tells Python to ignore everything on that line. Comments are great for leaving notes to yourself or others, or for trying out slightly different pieces of code.\n\n\n\n\n\ntmax_plot_df.plot(\n    #figsize=(8, 5),\n    #marker='o', linestyle='-',\n    xlabel='Date', ylabel='Temperature ($^\\circ$F)',\n    title='TITLE HERE',\n    #colormap='Set1'\n)\n\n\n\nSee our solution!\ntmax_plot_df.plot(\n    figsize=(8, 5),\n    marker='o', linestyle='-',\n    xlabel='Date', ylabel='Temperature ($^\\circ$F)',\n    title='Daily Maximum Temperatures - Chicago, IL - June 2024',\n    colormap='Set1'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConversation Starter: What do you notice about the data?\n\n\n\nTake a few minutes to discuss the patterns and trends you see in the data with your neighbors.",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Urban Heat Island"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-stars.html",
    "href": "notebooks/02-flood/flood-stars.html",
    "title": "\n                The Midwest underwater\n            ",
    "section": "",
    "text": "Image source: The Intercept April 5, 2019",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "The Midwest underwater"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-stars.html#step-0-get-set-up-to-use-python",
    "href": "notebooks/02-flood/flood-stars.html#step-0-get-set-up-to-use-python",
    "title": "\n                The Midwest underwater\n            ",
    "section": "STEP 0: Get set up to use Python",
    "text": "STEP 0: Get set up to use Python\nUse the cell below to add necessary package imports to this notebook. It’s best to import everything in your very first code cell because it helps folks who are reading your code to figure out where everything comes from (mostly right now this is you in the future). It’s very frustrating to try to figure out what packages need to be installed to get some code to run.\n\n\n\n\n\n\n\nNote\n\n\n\nOur friend the PEP-8 style guide has some things to say about imports. In particular, your imports should be in alphabetical order.\n\n\n\n\n\n\n\nTry It\n\n\n\nIn the sample code below, we’ve imported a library needed for working with tabular, or spreadsheet, data, as well as our own library for common Environmental Data Analytics tasks (in this case, managing files on your computer). You will also need to:\n\nAdd the library for working with vector data in Python and a library for creating interactive plots of vector and time-series data to the imports.\nCheck that your imports follow the PEP-8 guidelines – they should be in alphabetical order.\nRun your import cell to make sure everything will work\n\n\n\n\n# Import libraries\nimport earthpy\nimport pandas as pd\n\n\n\nSee our solution!\n# Import libraries\nimport earthpy\nimport geopandas as gpd # Vector data\nimport hvplot.pandas # Interactive plots\nimport pandas as pd\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nWe like to keep important values up at the top of the notebook – it makes them easy to modify. You can use the following cell to change parameters about your workflow if you like:\n\nid = 'stars'\nsite_name = 'Cheyenne River near Wasta'\nyear = 2019\nproject_title = 'Cheyenne River Flood Frequency'\nproject_dirname = 'flood-cheyenne'\n\nFinally, we have arranged some sample data for you, which you can download using the earthpy library. Later on, you’ll learn how to download data from the NWIS using the dataretrieval library. For now, you can use the sample data downloaded with the earthpy library.\n\n\n\n\n\n\nTry It\n\n\n\nThe following code will download the sample data based on the value of “title”, and store it in the data directory on your computer. It will also save the path to the downloaded data. You can use the project later on to do things like locate data files on the computer or image you’re using to code. You should practice writing descriptive code by:\n\nChange 'project-folder-name' to a descriptive directory name where you want to store your data.\nChange data_path to a descriptive variable name\nRun the data download cell to make sure everything will work\n\n\n\n\n# Create project directory\nproject = earthpy.Project(title=project_title, dirname='project-folder-name')\n# Download data\ndata_path = project.get_data()\n# Display the project data directory location\nproject.project_dir\n\n\n\nSee our solution!\n# Create project directory\nproject = earthpy.Project(title=project_title, dirname=project_dirname)\n# Download data\nstreamflow_path = project.get_data()\n# Display the project data directory location\nproject.project_dir\n\n\n\n**Final Configuration Loaded:**\n{}\n🔄 Fetching metadata for article 29087150...\n✅ Found 1 files for download.\nDownloading from https://ndownloader.figshare.com/files/54659369\n\n\nPosixPath('/home/runner/.local/share/earth-analytics/flood-cheyenne')\n\n\nYou can use an open science tool called bash or the shell to work with files and get information about your file system. For example, this code will list (ls) the contents of the project directory\n\n!ls \"$project.project_dir\"\n\ncheyenne_streamflow_1934_2024.csv\n\n\n\n\n\n\n\n\nTry It\n\n\n\nGo check to see if you can find the files using some other method!\n\n\n\n\n\n\n\n\nWarning\n\n\n\nAre you working in the cloud, such as on GitHub Codespaces? Be aware that any files you download to a cloud computer will not be saved on the physical computer you are using! They will remain in the cloud. So, you will not be able to see any downloaded files using the File Explorer or Finder on your computer because they aren’t there.",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "The Midwest underwater"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-stars.html#step-1-site-description-and-map",
    "href": "notebooks/02-flood/flood-stars.html#step-1-site-description-and-map",
    "title": "\n                The Midwest underwater\n            ",
    "section": "STEP 1: Site Description and Map",
    "text": "STEP 1: Site Description and Map\nIn our example analysis, we’ll be focusing on the Cheyenne River, which flows into Lake Oahu by looking at a stream gage near Wasta, SD, USA. After we’ve completed this example analysis, we suggest that you look into another flood – perhaps one that you have a personal connection to.\n\nSite Description\n\n\n\n\n\n\nTry It\n\n\n\nDescribe the Cheyenne River area in a few sentences. You can include:\n\nInformation about the climatology of the area, or typical precipitation and temperature at different months of the year\nThe runoff ratio (average annual runoff divided by average annual precipitation)\nWhich wildlife and ecosystems exist in the area\nWhat communities and infrastructure are in the area\n\n\n\n\n\nSite Map: The Cheyenne River near Wasta\nThe code below will create an interactive map of the area. But something is wrong - no one defined the latitude and longitude as variables. Try running the code to see what happens when you reference a variable name that doesn’t exist!\n\n\n\n\n\n\nTry It\n\n\n\nFind the location of the Cheyenne River near Wasta USGS stream gauge using the National Water Information System. This is not the easiest thing to find if you aren’t used to NWIS, so we’ve provided some screenshots of the process below.\n\n\n\nStep 1: NWIS Mapper\n\n\n\nGo to the National Water Information System Mapper\n\n\n\n\nStep 2: Search\n\n\n\nType in Wasta in the Find a Place box\n\n\n\n\nStep 3: Select gage\n\n\n\nClick on the Cheyenne River near Wasta site. It should open a new window.\n\n\n\n\nStep 4: Open site page\n\n\n\nClick on Site page at the top\n\n\n\n\n\nYou should now be on the Cheyenne River near Wasta gage site page\n\n\n\n\nStep 5: Get coordinates\n\n\n\nScroll to the bottom and open the Location metadata section. Make a note of the decimal latitude and longitude!\n\n\n\n\n\n\n\n\nTry It\n\n\n\nNow, you’re ready to create your site map!\n\nDefine latitude and longitude variables to match the variable names used in the code.\nRename the variable gdf with something descriptive wherever it occurs.\nRun and test your cell to make sure everything works.\n\n\n\n\n\n\n\n\n\nLooking for an Extra Challenge?\n\n\n\nCustomize your plot using the hvplot documentation or by asking your favorite AI tool. For example, you could:\n\nChange the size of your map\nChange the base map images\nChange the color and size of your place marker\nRemove the axis labels for a cleaner map\n\n\n\n\n# Create a GeoDataFrame with the gage location\ngdf = gpd.GeoDataFrame(\n    # Create the geometry from lat/lon\n    geometry=gpd.points_from_xy([gage_lon], [gage_lat]),\n    # Coordinate Reference System for lat/lon values\n    crs=\"EPSG:4326\"\n)\n\n# Plot using hvPlot with a basemap\nbuffer = 0.01\ngdf.hvplot.points(\n    # Use web tile basemap imagery\n    geo=True, tiles='OpenTopoMap', \n    # Set approximate bounding box\n    ylim=(gage_lat-buffer, gage_lat+buffer),\n    xlim=(gage_lon-buffer, gage_lon+buffer),\n)\n\n\n\nSee our solution!\ngage_lat = 44.08109849 \ngage_lon = -102.4012746\n\n# Create a GeoDataFrame with the gage location\ngage_gdf = gpd.GeoDataFrame(\n    # Create the geometry from lat/lon\n    geometry=gpd.points_from_xy([gage_lon], [gage_lat]),\n    # Coordinate Reference System for lat/lon values\n    crs=\"EPSG:4326\"\n)\n\n# Plot using hvPlot with a basemap\nbuffer = 0.01\ngage_gdf.hvplot.points(\n    # Use web tile basemap imagery\n    geo=True, tiles='EsriImagery', \n    # Display the gage name\n    hover_cols=['name'],\n    # Format streamgage marker\n    color='red', size=100,\n    # Set figure size\n    width=500, height=300,\n    # Set approximate bounding box\n    ylim=(gage_lat-buffer, gage_lat+buffer),\n    xlim=(gage_lon-buffer, gage_lon+buffer),\n    # Remove axis labels\n    xaxis=None, yaxis=None\n)",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "The Midwest underwater"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-stars.html#step-2-data-wrangling",
    "href": "notebooks/02-flood/flood-stars.html#step-2-data-wrangling",
    "title": "\n                The Midwest underwater\n            ",
    "section": "STEP 2 Data wrangling",
    "text": "STEP 2 Data wrangling\n\nLoad sample data\nYou should now have the sample data downloaded, but you still need to open it up so you can use it. First, you’ll need the path to your data.\n\n\n\n\n\n\nTry It\n\n\n\n\nReplace data_path with a descriptive name\nCheck your data directory for the file name of the streamflow data, and put it in the place of data-filename-here\n\n\n\n\ndata_path = project.project_dir / 'data-filename-here.csv'\n\n\n\nSee our solution!\nnwis_path = project.project_dir / 'cheyenne_streamflow_1934_2024.csv'\n\n\nLet’s take a look at the raw data (make sure to replace nwis_path with the name of your variable!):\n\n!head -n 5 $nwis_path\n\ndatetime,site_no,00060_Mean,00060_Mean_cd,00065_Mean,00065_Mean_cd\n1934-10-01 00:00:00+00:00,06423500,54.0,A,,\n1934-10-02 00:00:00+00:00,06423500,51.0,A,,\n1934-10-03 00:00:00+00:00,06423500,51.0,A,,\n1934-10-04 00:00:00+00:00,06423500,54.0,A,,\n\n\n\n\n\n\n\n\nTry It\n\n\n\nThe cell below imports CSV data like the flood data into Python. A useful method for looking at the datatypes in your pd.DataFrame is the pd.DataFrame.info() method.\n\nReplace dataframe with a descriptive name for your DataFrame variable\nRun the cell to see the datatypes of each column.\nTry uncommenting lines one by one by deleting the # at the beginning and running the code again.\n\nWhat changes? Why do you think those lines are needed?\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn Python, you will see both methods and functions when you want to give the computer some instructions. This is an important and tricky distinction. For right now – functions have all of their arguments/parameters inside the parentheses, as in dataretrieval.nwis.get_discharge_measurements(). For methods, the first argument is always some kind of Python object that is placed before the method. For example, take a look at the next cell for an example of using the pd.DataFrame.info() method.\n\n\ndataframe = pd.read_csv(\n    data_path,\n    #index_col='datetime',\n    #parse_dates=True)\ndataframe.info()\n\n\n\nSee our solution!\nnwis_df = pd.read_csv(\n    nwis_path,\n    index_col='datetime',\n    parse_dates=True)\nnwis_df.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 32866 entries, 1934-10-01 00:00:00+00:00 to 2024-09-30 00:00:00+00:00\nData columns (total 5 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   site_no        32866 non-null  int64  \n 1   00060_Mean     32866 non-null  float64\n 2   00060_Mean_cd  32866 non-null  object \n 3   00065_Mean     1592 non-null   float64\n 4   00065_Mean_cd  1592 non-null   object \ndtypes: float64(2), int64(1), object(2)\nmemory usage: 1.5+ MB\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat column do you think the streamflow, or discharge, measurements are in?\n\n\n\n\nOrganize your data descriptively\nIt’s important to make sure that your code is easy to read. Even if you don’t plan to share it, you will likely need to read code you’ve written in the future!\n\n\n\n\n\n\nTry It\n\n\n\nUsing the code below as a starting point, select the discharge column and rename it to something descriptive:\n\nIdentify the discharge/streamflow column.\nReplace discharge_column_name with the discharge column name.\nReplace new_column_name with a descriptive name. We recommend including the units of the discharge values in the column name as a way to keep track of them.\n\n\n\n\ndischarge_df = (\n    nwis_df\n    # Select only the discharge column as a DataFrame\n    [['discharge_column_name']]\n    # Rename the discharge column\n    .rename(columns={'discharge_column_name': 'new_column_name'})\n)\n\ndischarge_df\n\n\n\nSee our solution!\ndischarge_df = (\n    nwis_df\n    # Select only the discharge column as a DataFrame\n    [['00060_Mean']]\n    # Rename the discharge column\n    .rename(columns={'00060_Mean': 'streamflow_cfs'})\n)\n\ndischarge_df\n\n\n\n\n\n\n\n\n\nstreamflow_cfs\n\n\ndatetime\n\n\n\n\n\n1934-10-01 00:00:00+00:00\n54.0\n\n\n1934-10-02 00:00:00+00:00\n51.0\n\n\n1934-10-03 00:00:00+00:00\n51.0\n\n\n1934-10-04 00:00:00+00:00\n54.0\n\n\n1934-10-05 00:00:00+00:00\n54.0\n\n\n...\n...\n\n\n2024-09-26 00:00:00+00:00\n103.0\n\n\n2024-09-27 00:00:00+00:00\n94.9\n\n\n2024-09-28 00:00:00+00:00\n90.7\n\n\n2024-09-29 00:00:00+00:00\n83.9\n\n\n2024-09-30 00:00:00+00:00\n73.6\n\n\n\n\n32866 rows × 1 columns\n\n\n\n\n\n\n\n\n\n\nStrings\n\n\n\nHow does a computer tell the difference between a name which is linked to a value, and a string of characters to be interpreted as text (like a column name)?\nIn most programming languages, we have to put quotes around strings of characters that are meant to be interpreted literally as text rather than symbolically as a variable. In Python, you can use either single ' or double \" quotes around strings. If you forget to put quotes around your strings, Python will try to interpret them as variable names instead, and will probably give you a NameError when it can’t find the linked value.",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "The Midwest underwater"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-stars.html#step-3-visualize-the-flood",
    "href": "notebooks/02-flood/flood-stars.html#step-3-visualize-the-flood",
    "title": "\n                The Midwest underwater\n            ",
    "section": "STEP 3: Visualize the flood",
    "text": "STEP 3: Visualize the flood\nVisualizing the data will help make sure that everything is formatted correctly and makes sense. It also helps later on with communicating your results.\n\nCan we see the flood in the streamflow data?\nLet’s take a look at the data from February - September, 2019. This should let us see the peak streamflow values and when they occurred.\n\n\n\n\n\n\nTry It\n\n\n\nBelow, you will see an example of how to subset your streamflow data by date.We do this using the .loc attribute of your DataFrame, which is a powerful tool for selecting the rows you want. Because the dates are in the Python datetime64 format, you can select based on the year and month, without needing to type out dates or times!\n\nReplace dataframe_name with your streamflow DataFrame name.\nSave the result to a descriptive variable name, and call it at the end of the cell for testing.\n\n\n\nYou can find some examples of subsetting time series data in the textbook.\n\ndataframe_name.loc['2019-02':'2019-09']\n\n\n\nSee our solution!\nflood_df = discharge_df.loc['2019-02':'2019-09']\nflood_df\n\n\n\n\n\n\n\n\n\nstreamflow_cfs\n\n\ndatetime\n\n\n\n\n\n2019-02-01 00:00:00+00:00\n147.0\n\n\n2019-02-02 00:00:00+00:00\n192.0\n\n\n2019-02-03 00:00:00+00:00\n233.0\n\n\n2019-02-04 00:00:00+00:00\n244.0\n\n\n2019-02-05 00:00:00+00:00\n234.0\n\n\n...\n...\n\n\n2019-09-26 00:00:00+00:00\n419.0\n\n\n2019-09-27 00:00:00+00:00\n416.0\n\n\n2019-09-28 00:00:00+00:00\n430.0\n\n\n2019-09-29 00:00:00+00:00\n631.0\n\n\n2019-09-30 00:00:00+00:00\n572.0\n\n\n\n\n242 rows × 1 columns\n\n\n\n\n\nCreate a line plot with Python\nNext, plot your subsetted data. Don’t forget to label your plot!\n\n\n\n\n\n\nTry It\n\n\n\n\n\n\n\n(\n    dataframe_name\n    .plot(\n        xlabel='', \n        ylabel='',\n        title='')\n)\n\n\n\nSee our solution!\n(\n    flood_df\n    .plot(\n        xlabel='Date', \n        ylabel='Streamflow (cfs)',\n        title='Streamflow on the Cheyenne River during a flood',\n        legend=False)\n)\n\n\n\n\n\n\n\n\n\nYou should be able to see the flood in your data going up above 12000 cfs at its peak! In the next section, you’ll analyze how unusual that is.",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "The Midwest underwater"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-stars.html#step-4-analyse-the-flood",
    "href": "notebooks/02-flood/flood-stars.html#step-4-analyse-the-flood",
    "title": "\n                The Midwest underwater\n            ",
    "section": "STEP 4: Analyse the flood",
    "text": "STEP 4: Analyse the flood\nAs scientists and engineers, we are interested in not just describing a flood, but in understanding how often we would expect an event that severe or extreme to happen. Some applications we need this information for include:\n\nDesigning and developing engineering standards for bridges and roads to withstand flooding\nChoosing the capacity of water treatment plants to accommodate flood waters\nComputing flood risk maps and choosing where to build\nDetermining flood insurance rates\n\nThe exceedance probability is a simple, data-driven way to quantify how unusual a flood is and how often we can expect similar events to happen. We calculate exceedance probability by counting how many years with floods the same size or larger have been recorded, or ranking the and dividing by the number of years we have records for:\n\\[P_e = \\frac{\\text{Annual peak flow rank}}{\\text{Years of record}}\\]\nThis value tells us historically what the likelihood was of a flood of a certain size or larger each year, or the exceedance probability. We can also express how unusual a flood is with the return period, or an amount of time during which we’d expect there to be about one flood the same size or larger. The return period is the reciprocal of the exceedance probability:\n\\[R = \\frac{\\text{Years of record}}{\\text{Annual peak flow rank}}\\]\nAs an example – suppose a streamflow of \\(10000\\) cfs occurs \\(4\\) times over a 100-year record. The exceedance probability would be \\(\\frac{4}{100} = .25\\) and the return period would be 25 years.\nThere are advantages and disadvantages to this method of calculating the exceedance probability. On one hand, we are not making any assumptions about how often floods occur, and there is no way to extrapolate to a size of flood that has never been observed. On the other hand, we can’t incorporate any information about how often floods occur nearby or in other locations, and the data record for streamflow is often less than the desired lifetime of the built environment.\n\n\n\n\n\n\nRead More\n\n\n\nYou can learn more about exceedance probabilities and return periods in this textbook page on the subject\n\n\nLet’s start by accessing and plotting ALL the data available for this site. Then we’ll use a return period statistic to quantify how unusual it was.\n\nVisualize all the streamflow data\n\n\n\n\n\n\nTry It\n\n\n\nIn the cell below, plot the entire time series of streamflow data, without any parameters.\n\n\n\n# Plot the entire streamflow time series\n\n\n\nSee our solution!\n# Plot the entire streamflow time series\n(\n    discharge_df\n    .plot(\n        xlabel='Date', \n        ylabel='Streamflow (cfs)',\n        title='90 Years of Streamflow on the Cheyenne River',\n        legend=False)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nDo you notice anything about this plot?\n\n\nFirst things first – this plot looks a little fuzzy because it is trying to fit too many data points in a small area. There aren’t enough pixels in this plot to represent all the data points! One way to improve this is by resampling the data to annual maxima. That way we still get the same peak streamflows, but the computer will be able to plot all the values without overlapping.\n\n\n\n\n\n\n\nTip\n\n\n\nResampling means changing the time interval between time series observations - in this case from daily to annual.\n\n\n\n\n\n\n\nRead More\n\n\n\nRead about different ways to resample time series data in your textbook\nYou can use a list of offset aliases to look up how to specify the final dates. This list is pretty hard to find - you might want to bookmark it or check back with this page if you need it again.\n\n\n\n\n\n\n\n\nTry It\n\n\n\nResample your DataFrame to get an annual maximum:\n\nReplace dataframe_name with the name of your DataFrame.\nReplace offset_alias with the correct offset alias from the pandas documentation\nSave the results to a new, descriptive variable name, and display the results of the resampling.\n\n\n\n\n# Resample to annual maxima\ndataframe_name.resample(offset_alias).max()\n\n\n\nSee our solution!\n# Resample to annual maxima\npeaks_df = discharge_df.resample('YS').max()\npeaks_df\n\n\n\n\n\n\n\n\n\nstreamflow_cfs\n\n\ndatetime\n\n\n\n\n\n1934-01-01 00:00:00+00:00\n2700.0\n\n\n1935-01-01 00:00:00+00:00\n39000.0\n\n\n1936-01-01 00:00:00+00:00\n1680.0\n\n\n1937-01-01 00:00:00+00:00\n16000.0\n\n\n1938-01-01 00:00:00+00:00\n4500.0\n\n\n...\n...\n\n\n2020-01-01 00:00:00+00:00\n1800.0\n\n\n2021-01-01 00:00:00+00:00\n5170.0\n\n\n2022-01-01 00:00:00+00:00\n1540.0\n\n\n2023-01-01 00:00:00+00:00\n6740.0\n\n\n2024-01-01 00:00:00+00:00\n3770.0\n\n\n\n\n91 rows × 1 columns\n\n\n\n\n\n\n\n\n\nTry It\n\n\n\nPlot your resampled data.\n\n\n\n# Plot annual maximum streamflow values\n\n\n\nSee our solution!\n# Plot annual maximum streamflow values\npeaks_df.plot(\n    figsize=(8, 4),\n    xlabel='Year',\n    ylabel='Daily Streamflow (cfs)',\n    title='Annual Maximum Daily Streamflow Values on the Cheyenne River',\n    legend=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWrite a headline and 2-3 sentence description of your plot. What is your visual estimate of the return period was for the flood in 2019?\n\n\n\n\nSelect relevant data\nWhen calculating exceedance probabilities, we are making an assumption of stationarity, meaning that all the peak streamflows are drawn from the same probability distribution. Put another way, we only want to include data from years where the conditions on the river are similar to what they are now.\nDid you notice that the streamflow values from before 1950 or so? You should investigate any obvious causes of that discrepancy so we know if the pre-1950 data is relevant to current conditions.\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat are some possible causes for peak streamflows to decrease systematically?\n\n\n\n\nOne of the problems with adapting to climate change is that we can no longer assume stationarity in a lot of contexts. As scientists, we don’t yet have standard methods for incorporating climate change into flood return period calculations. You can read more about the debate of stationarity, climate change, and return periods in a paper called ‘Stationarity is Dead’ and the many related response papers.\nIt turns out that construction on the Oahe dam on the Cheyenne River was started in 1948. We therefor don’t want to include any streamflow measurements before that date, because the Cheyenne River now as a much different flood response due to the dam. Dams tend to reduce peak streamflow, depending on how they are managed, but can cause other problems in the process.\n\n\n\n\n\n\nRead More\n\n\n\nLearn more about the Oahe Dam on its Wikipedia page. You can also find some local perspectives on the dam in some of the articles about the 2019 flood at the beginning of this coding challenge.\n\n\n\n\n\n\n\n\nTry It\n\n\n\nRemove years of data before the construction of the Oahe Dam. You can use a colon inside the square brackets of the .loc attribute to show that you would like all dates after a certain value, e.g. '1950':\n\n\n\n# Select data from after dam construction\n\n\n\nSee our solution!\npeaks_df = peaks_df.loc['1948':]\npeaks_df\n\n\n\n\n\n\n\n\n\nstreamflow_cfs\n\n\ndatetime\n\n\n\n\n\n1948-01-01 00:00:00+00:00\n4460.0\n\n\n1949-01-01 00:00:00+00:00\n6500.0\n\n\n1950-01-01 00:00:00+00:00\n3920.0\n\n\n1951-01-01 00:00:00+00:00\n1900.0\n\n\n1952-01-01 00:00:00+00:00\n8380.0\n\n\n...\n...\n\n\n2020-01-01 00:00:00+00:00\n1800.0\n\n\n2021-01-01 00:00:00+00:00\n5170.0\n\n\n2022-01-01 00:00:00+00:00\n1540.0\n\n\n2023-01-01 00:00:00+00:00\n6740.0\n\n\n2024-01-01 00:00:00+00:00\n3770.0\n\n\n\n\n77 rows × 1 columns\n\n\n\n\n\nCalculate the exceedance probability and return period for 2019\n\n\n\n\n\n\nLooking for an Extra Challenge?\n\n\n\nCalculate the exceedance probability and return period for each year of the annual data, and add them as columns to your DataFrame.\n\nReplace df with the name of your annual maximum DataFrame.\nReplace col with the name of your streamflow column\nCalculate the return period using Python mathematical operators\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen you use a Python mathematical operator on a pandas.DataFrame column, Python will do the calculation for every row in the DataFrame automatically!\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen you rank the floods in your DataFrame with the .rank() method, you will need the ascending=Falseparameter, by default the largest floods will have the higher number. We useascending=Falsa` to reverse the rankings, since higher rank should be lower exceedence probability.\n\n\ndf['exceed_prob'] = (df.rank(ascending=False).col / len(df))\ndf['return_period'] = \n\npeaks_df\n\n\n\nSee our solution!\n# Make a copy so this is a dataframe and not a view\npeaks_df = peaks_df.copy()\n\n# Calculate exceedance probability\npeaks_df['exceed_prob'] = (\n    peaks_df.rank(ascending=False).streamflow_cfs \n    / len(peaks_df)\n)\n# Calculate return period\npeaks_df['return_period'] = 1 / peaks_df.exceed_prob\n\npeaks_df\n\n\n\n\n\n\n\n\n\nstreamflow_cfs\nexceed_prob\nreturn_period\n\n\ndatetime\n\n\n\n\n\n\n\n1948-01-01 00:00:00+00:00\n4460.0\n0.558442\n1.790698\n\n\n1949-01-01 00:00:00+00:00\n6500.0\n0.376623\n2.655172\n\n\n1950-01-01 00:00:00+00:00\n3920.0\n0.623377\n1.604167\n\n\n1951-01-01 00:00:00+00:00\n1900.0\n0.831169\n1.203125\n\n\n1952-01-01 00:00:00+00:00\n8380.0\n0.311688\n3.208333\n\n\n...\n...\n...\n...\n\n\n2020-01-01 00:00:00+00:00\n1800.0\n0.844156\n1.184615\n\n\n2021-01-01 00:00:00+00:00\n5170.0\n0.467532\n2.138889\n\n\n2022-01-01 00:00:00+00:00\n1540.0\n0.896104\n1.115942\n\n\n2023-01-01 00:00:00+00:00\n6740.0\n0.350649\n2.851852\n\n\n2024-01-01 00:00:00+00:00\n3770.0\n0.649351\n1.540000\n\n\n\n\n77 rows × 3 columns\n\n\n\n\n\n\n\n\n\nTry It\n\n\n\nSelect only the value for 2019.\n\nReplace dataframe_name with the name of your DataFrame\nInside the square brackets, type the year you want to select (2019). Make sure to surround the year with quotes, or Python will interpret this as a row number.\n\n\n\n\ndataframe_name.loc[]\n\n\n\nSee our solution!\npeaks_df.loc['2019']\n\n\n\n\n\n\n\n\n\nstreamflow_cfs\nexceed_prob\nreturn_period\n\n\ndatetime\n\n\n\n\n\n\n\n2019-01-01 00:00:00+00:00\n18400.0\n0.038961\n25.666667\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat is the exceedance probability and return period for the 2019 floods on the Cheyenne River?",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "The Midwest underwater"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html",
    "href": "notebooks/01-climate/climate.html",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "",
    "text": "Higher highs, lower lows, storms, and smoke – we’re all feeling the effects of climate change. In this workflow, you will take a look at trends in temperature over time in ?meta:params.01-climate.location.\n\n\n\n\n\n\nConversation Starter\n\n\n\nIn a few sentences, how is climate change affecting your home?\n\n\n\n\n\n\n\n\nCheck out our demo video!\n\n\n\n\n\n\n\n\nBelow is a scientific Python workflow. But something’s wrong – The code won’t run! Your task is to follow the instructions below to clean and debug the Python code below so that it runs.\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if you can’t solve every bug right away. We’ll get there! If you are working on one bug for more than about 10 minutes, it’s time to ask for help.\n\n\nAt the end, you’ll repeat the workflow for a location and measurement of your choosing.\nAlright! Let’s clean up this code.",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#what-the-fork-who-wrote-this",
    "href": "notebooks/01-climate/climate.html#what-the-fork-who-wrote-this",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "",
    "text": "Below is a scientific Python workflow. But something’s wrong – The code won’t run! Your task is to follow the instructions below to clean and debug the Python code below so that it runs.\n\n\n\n\n\n\nTip\n\n\n\nDon’t worry if you can’t solve every bug right away. We’ll get there! If you are working on one bug for more than about 10 minutes, it’s time to ask for help.\n\n\nAt the end, you’ll repeat the workflow for a location and measurement of your choosing.\nAlright! Let’s clean up this code.",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#python-packages-let-you-use-code-written-by-experts-around-the-world",
    "href": "notebooks/01-climate/climate.html#python-packages-let-you-use-code-written-by-experts-around-the-world",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "Python packages let you use code written by experts around the world",
    "text": "Python packages let you use code written by experts around the world\nBecause Python is open source, lots of different people and organizations can contribute (including you!). Many contributions are in the form of packages which do not come with a standard Python download.\n\n\n\n\n\n\nRead More: Packages need to be installed and imported.\n\n\n\nLearn more about using Python packages. How do you find and use packages? What is the difference between installing and importing packages? When do you need to do each one? This article on Python packages will walk you through the basics.\n\n\nIn the cell below, someone was trying to import the pandas package, which helps us to work with tabular data such as comma-separated value or csv files.\n\n\n\n\n\n\nTry It: Import a package\n\n\n\n\nCorrect the typo below to properly import the pandas package under its alias pd.\nRun the cell to import pandas\n\n\n\n\n# Import pandas\nimport pandsa as pd\n\n\n\nSee our solution!\n# Import pandas\nimport pandas as pd",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#download-the-practice-data",
    "href": "notebooks/01-climate/climate.html#download-the-practice-data",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "Download the practice data",
    "text": "Download the practice data\nNext, lets download some climate data from ?meta:params.01-climate.location to practice with. We keep our practice data on GitHub, so that we can check that it still works and make sure it looks just like the data you would download from the original source.\n\n\n\n\n\n\nUsing online climate data\n\n\n\nDo you want to download your own climate data from a place of your choosing? We think the sample data we’ve provided is helpful for learning, but hopefully you have some other places and times you want data from. Learn how to modify your NCEI data download in our NCEI Data Library entry.\n\n\nThe cell below contains the URL for the data you will use in this part of the notebook. There are two things to notice about the URL code:\n\nIt is surrounded by quotes – that means Python will interpret it as a string, or text, type, which makes sense for a URL.\nThe URL is too long to display as one line on most screens. We’ve put parentheses around it so that we can easily split it into multiple lines by writing two strings – one on each line.\n\nHowever, we still have a problem - we can’t get the URL back later on because it isn’t saved in a variable. In other words, we need to give the url a name so that we can request in from Python later (sadly, Python has no ‘hey what was that thingy I typed yesterday?’ function).\n\n\n\n\n\n\nRead More: Names/variables in Python\n\n\n\nOne of the most common challenges for new programmers is making sure that your results are stored so you can use them again. In Python, this is called naming, or saving a variable. Learn more in this hands-on activity on using variables from our learning portal.\n\n\n\n\n\n\n\n\nTry It: Save the URL for later\n\n\n\n\nPick an expressive variable name for the URL.\nClick on the Jupyter tab in the console panel at the bottom of VSCode to see all your variables. Your new url variable will not be there until you define it and run the code.\nAt the end of the cell where you define your url variable, call your variable (type out its name) so it can be tested.\n\n\n\n\n(\n    'https://github.com/cu-esiil-edu/esiil-learning-portal'\n    '/releases/download/data-release/climate-foundations-data.csv'\n)\n\n\n\nSee our solution!\nncei_url = (\n    'https://github.com/cu-esiil-edu/esiil-learning-portal'\n    '/releases/download/data-release/climate-foundations-data.csv'\n)\nncei_url\n\n\n'https://github.com/cu-esiil-edu/esiil-learning-portal/releases/download/data-release/climate-foundations-data.csv'\n\n\nThe pandas library you imported can download data from the internet directly into a type of Python object called a DataFrame. In the code cell below, you can see an attempt to do just this. But there are some problems…\n\n\n\n\n\n\nTry It: Fix some code!\n\n\n\n\nLeave a space between the # and text in the comment and try making the comment more informative\nMake any changes needed to get this code to run. HINT: The my_url variable doesn’t exist - you need to replace it with the variable name you chose.\nModify the .read_csv() statement to include the following parameters:\n\nindex_col='DATE' – this sets the DATE column as the index. Needed for subsetting and resampling later on\nparse_dates=True – this lets python know that you are working with time-series data, and values in the indexed column are date time objects\nna_values=['NaN'] – this lets python know how to handle missing values\n\nClean up the code by using expressive variable names, expressive column names, PEP-8 compliant code, and descriptive comments\n\n\n\n\nMake sure to call your DataFrame by typing it’s name as the last line of your code cell Then, you will be able to run the test cell below and find out if your answer is correct.\n\n\nclimate_df = pd.read_csv(\n    my_url,\n    index_col='something')\nclimate_df\n\n\n\nSee our solution!\n# Download the climate data\nclimate_df = pd.read_csv(\n    ncei_url,\n    index_col='DATE',\n    parse_dates=True,\n    na_values=['NaN'])\nclimate_df\n\n\n\n\n\n\n\n\n\nSTATION\nPRCP\nTOBS\n\n\nDATE\n\n\n\n\n\n\n\n1893-10-01\nUSC00050848\n0.94\nNaN\n\n\n1893-10-02\nUSC00050848\n0.00\nNaN\n\n\n1893-10-03\nUSC00050848\n0.00\nNaN\n\n\n1893-10-04\nUSC00050848\n0.04\nNaN\n\n\n1893-10-05\nUSC00050848\n0.00\nNaN\n\n\n...\n...\n...\n...\n\n\n2023-09-26\nUSC00050848\n0.00\n74.0\n\n\n2023-09-27\nUSC00050848\n0.00\n69.0\n\n\n2023-09-28\nUSC00050848\n0.00\n73.0\n\n\n2023-09-29\nUSC00050848\n0.00\n66.0\n\n\n2023-09-30\nUSC00050848\n0.00\n78.0\n\n\n\n\n45971 rows × 3 columns\n\n\n\n\nHINT: Check out the type() function below - you can use it to check that your data is now in DataFrame type object\n\n\n# Check that the data was imported into a pandas DataFrame\ntype(climate_df)",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#clean-up-your-dataframe",
    "href": "notebooks/01-climate/climate.html#clean-up-your-dataframe",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "Clean up your DataFrame",
    "text": "Clean up your DataFrame\n\n\n\n\n\n\nTry It: Get rid of unwanted columns\n\n\n\nYou can use double brackets ([[ and ]]) to select only the columns that you want from your DataFrame:\n\nChange some_column_name to the Precipitation column name and another_column_name to the Observed Temperature column name.\n\n\n\n\n\n\n\nWarning\n\n\n\nColumn names are text values, not variable names, so you need to put them in quotes!\n\n\n\n\n\nMake sure to call your DataFrame by typing it’s name as the last line of your code cell Then, you will be able to run the test cell below and find out if your answer is correct.\n\n\nclimate_df = climate_df[['some_column_name', 'another_column_name']]\nclimate_df\n\n\n\nSee our solution!\n# Clean up the DataFrame\nclimate_df = climate_df[['PRCP', 'TOBS']]\nclimate_df\n\n\n\n\n\n\n\n\n\nPRCP\nTOBS\n\n\nDATE\n\n\n\n\n\n\n1893-10-01\n0.94\nNaN\n\n\n1893-10-02\n0.00\nNaN\n\n\n1893-10-03\n0.00\nNaN\n\n\n1893-10-04\n0.04\nNaN\n\n\n1893-10-05\n0.00\nNaN\n\n\n...\n...\n...\n\n\n2023-09-26\n0.00\n74.0\n\n\n2023-09-27\n0.00\n69.0\n\n\n2023-09-28\n0.00\n73.0\n\n\n2023-09-29\n0.00\n66.0\n\n\n2023-09-30\n0.00\n78.0\n\n\n\n\n45971 rows × 2 columns",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#use-labels-to-keep-track-of-units-for-you-and-your-collaborators",
    "href": "notebooks/01-climate/climate.html#use-labels-to-keep-track-of-units-for-you-and-your-collaborators",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "Use labels to keep track of units for you and your collaborators",
    "text": "Use labels to keep track of units for you and your collaborators\nOne way to keep track of your data’s units is to include the unit in data labels. In the case of a DataFrame, that usually means the column names.\n\n\n\n\n\n\nTry It: Add units to your column name\n\n\n\nA big part of writing expressive code is descriptive labels. Let’s rename the columns of your dataframe to include units. Complete the following steps:\n\nReplace dataframe with the name of your DataFrame, and dataframe_units with an expressive new name.\nCheck out the documentation for GCHNd data. We downloaded data with “standard” units; find out what that means for both temperature and precipitation.\nReplace 'TOBS_UNIT' and 'PRCP_UNIT' with column names that reference the correct unit for each.\n\n\n\n\ndataframe_units = dataframe.rename(columns={\n    'TOBS': 'TOBS_UNIT',\n    'PRCP': 'PRCP_UNIT'\n})\n\ndataframe\n\n\n\nSee our solution!\nclimate_u_df = climate_df.rename(columns={\n    'TOBS': 'temp_f',\n    'PRCP': 'precip_in'\n})\nclimate_u_df\n\n\n\n\n\n\n\n\n\nprecip_in\ntemp_f\n\n\nDATE\n\n\n\n\n\n\n1893-10-01\n0.94\nNaN\n\n\n1893-10-02\n0.00\nNaN\n\n\n1893-10-03\n0.00\nNaN\n\n\n1893-10-04\n0.04\nNaN\n\n\n1893-10-05\n0.00\nNaN\n\n\n...\n...\n...\n\n\n2023-09-26\n0.00\n74.0\n\n\n2023-09-27\n0.00\n69.0\n\n\n2023-09-28\n0.00\n73.0\n\n\n2023-09-29\n0.00\n66.0\n\n\n2023-09-30\n0.00\n78.0\n\n\n\n\n45971 rows × 2 columns",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#for-scientific-applications-it-is-often-useful-to-have-values-in-metric-units",
    "href": "notebooks/01-climate/climate.html#for-scientific-applications-it-is-often-useful-to-have-values-in-metric-units",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "For scientific applications, it is often useful to have values in metric units",
    "text": "For scientific applications, it is often useful to have values in metric units\n\n\n\n\n\n\nTry It: Convert units\n\n\n\nThe code below attempts to convert the data to Celcius, using Python mathematical operators, like +, -, *, and /. Mathematical operators in Python work just like a calculator, and that includes using parentheses to designat the order of operations. The equation for converting Fahrenheit temperature to Celcius is:\n\\[\nT_C = (T_F - 32) * \\frac{5}{9}\n\\]\nThis code is not well documented and doesn’t follow PEP-8 guidelines, which has caused the author to miss an important error!\nComplete the following steps:\n\nReplace dataframe with the name of your DataFrame.\nReplace 'old_temperature' with the column name you used; Replace 'new_temperature' with an expressive column name.\nTHERE IS AN ERROR IN THE CONVERSION MATH - Fix it!\n\n\n\n\ndataframe_units['new_temperature']= dataframe_units['old_temperature']-32*5/9\ndataframe_units\n\n\n\nSee our solution!\nclimate_u_df['temp_c'] = (climate_u_df['temp_f'] - 32) * 5 / 9\n\nclimate_u_df\n\n\n\n\n\n\n\n\n\nprecip_in\ntemp_f\ntemp_c\n\n\nDATE\n\n\n\n\n\n\n\n1893-10-01\n0.94\nNaN\nNaN\n\n\n1893-10-02\n0.00\nNaN\nNaN\n\n\n1893-10-03\n0.00\nNaN\nNaN\n\n\n1893-10-04\n0.04\nNaN\nNaN\n\n\n1893-10-05\n0.00\nNaN\nNaN\n\n\n...\n...\n...\n...\n\n\n2023-09-26\n0.00\n74.0\n23.333333\n\n\n2023-09-27\n0.00\n69.0\n20.555556\n\n\n2023-09-28\n0.00\n73.0\n22.777778\n\n\n2023-09-29\n0.00\n66.0\n18.888889\n\n\n2023-09-30\n0.00\n78.0\n25.555556\n\n\n\n\n45971 rows × 3 columns\n\n\n\n\n\n\n\n\n\nLooking for an Extra Challenge?\n\n\n\nUsing the code below as a framework, write and apply a function that converts to Celcius. You should also rewrite this function name to be more expressive.\ndef convert(temperature):\n    \"\"\"Convert temperature to Celcius\"\"\"\n    return temperature # Put your equation in here\n\ndataframe['TOBS_C'] = dataframe['TOBS'].apply(convert)",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#plot-the-precpitation-column-prcp-vs-time-to-explore-the-data",
    "href": "notebooks/01-climate/climate.html#plot-the-precpitation-column-prcp-vs-time-to-explore-the-data",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "Plot the precpitation column (PRCP) vs time to explore the data",
    "text": "Plot the precpitation column (PRCP) vs time to explore the data\nPlotting in Python is easy, but not quite this easy:\n\nclimate_df.plot()\n\nLooks like we have both precipitation and temperature on the same plot, and it’s hard to see what it is because it’s missing labels!\n\n\n\n\n\n\nLabel your plot\n\n\n\n\n\n\nSource: https://xkcd.com/833\n\n\nMake sure each plot has:\n\nA title that explains where and when the data are from\nx- and y- axis labels with units where appropriate\nA legend where appropriate\n\n\n\nWhen plotting in Python, you’ll always need to add some instructions on labels and how you want your plot to look.\n\n\n\n\n\n\nTry It: Plot your data\n\n\n\n\nChange dataframe to your DataFrame name.\nChange y= to the name of your observed temperature column name.\nUse the title, ylabel, and xlabel parameters to add key text to your plot.\nAdjust the size of your figure using figsize=(x,y) where x is figure width and y is figure height\n\n\nHINT: labels have to be a type in Python called a string. You can make a string by putting quotes around your label, just like the column names in the sample code (eg y='TOBS').\n\n\n\n\n# Plot the data using .plot\nclimate_df.plot(\n    y='the_precipitation_column',\n    title='Title Goes Here',\n    xlabel='Horizontal Axis Label Goes Here',\n    ylabel='Vertical Axis Label Goes Here')\n\n\n\nSee our solution!\n# Plot the data using .plot\nclimate_df.plot(\n    y='TOBS',\n    title='Daily Temperature in Boulder, CO',\n    xlabel='Date',\n    ylabel='Temperature ($^\\circ$F)')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking for an Extra Challenge?\n\n\n\nThere are many other things you can do to customize your plot. Take a look at the pandas plotting galleries and the documentation of plot to see if there’s other changes you want to make to your plot. Some possibilities include:\n\nRemove the legend since there’s only one data series\nIncrease the figure size\nIncrease the font size\nChange the colors\nUse a bar graph instead (usually we use lines for time series, but since this is annual it could go either way)\nAdd a trend line\n\nNot sure how to do any of these? Try searching the internet, or asking an AI!",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#clean-up-time-series-plots-by-resampling",
    "href": "notebooks/01-climate/climate.html#clean-up-time-series-plots-by-resampling",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "Clean up time series plots by resampling",
    "text": "Clean up time series plots by resampling\nYou may notice that your plot looks a little “fuzzy”. This happens when Python is trying to plot a value for every date, but the resolution of the image is too low to actually do that. You can address this issue by resampling the data, or summarizing it over a time period of your choice. In this case, we will resample annually, giving us one data point per year.\n\n\n\n\n\n\nTry It: Resample\n\n\n\n\nSet the frequency of your final data by replacing DT_OFFSETwith a Datetime Offset Code. Check out the table in the pandas datetime documentation to find the one you want (we recommend the start of the year).\nChoose how to summarize each year of data by replacing agg_method_here with a method that will calculate the average annual value. Check out the pandas resampling documentation for a list of common built-in options.\n\n\n\n\nann_climate_df = climate_df.resample('DT_OFFSET').agg_method_here()\nann_climate_df\n\n\n\nSee our solution!\nann_climate_df = climate_df.resample('YS').mean()\n# Store for later\n%store ann_climate_df\nann_climate_df\n\n\nStored 'ann_climate_df' (DataFrame)\n\n\n\n\n\n\n\n\n\nPRCP\nTOBS\n\n\nDATE\n\n\n\n\n\n\n1893-01-01\n0.025543\nNaN\n\n\n1894-01-01\n0.058841\nNaN\n\n\n1895-01-01\n0.117090\nNaN\n\n\n1896-01-01\nNaN\nNaN\n\n\n1897-01-01\n0.068922\nNaN\n\n\n...\n...\n...\n\n\n2019-01-01\n0.057644\n54.426997\n\n\n2020-01-01\n0.046721\n57.691460\n\n\n2021-01-01\n0.056658\n57.538462\n\n\n2022-01-01\n0.051479\n56.139726\n\n\n2023-01-01\n0.076740\n58.996337\n\n\n\n\n131 rows × 2 columns\n\n\n\n\n\n\n\n\n\nTry It: Plot Annual Data\n\n\n\n\nTry plotting your new DataFrame in the cell below. Can you see what is going on more clearly now? Don’t forget to adjust your labels!\n\n\n\n\n# Plot the annual data\n\n\n\nSee our solution!\n# Plot the annual data using .plot\nann_climate_df.plot(\n    y='TOBS',\n    title='Annual Average Temperature in Boulder, CO',\n    xlabel='Year',\n    ylabel='Temperature ($^\\circ$F)'\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflect and Respond: Interpret your plot\n\n\n\n\nCreate a new Markdown cell below this one.\nIn the new cell, answer the following questions using a bulleted list in Markdown – what are 2 things you notice about this data? What physical phenomena or data anomaly could be causing each one?",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#check-specific-values-with-an-interactive-plot",
    "href": "notebooks/01-climate/climate.html#check-specific-values-with-an-interactive-plot",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "Check specific values with an interactive plot",
    "text": "Check specific values with an interactive plot\nYou can use the .hvplot() method with similar arguments to create an interactive plot.\n\n\n\n\n\n\nTry It: Interactive Plot\n\n\n\n\nCopy your plotting code into the cell below.\nReplace .plot in your code with .hvplot\n\nNow, you should be able to hover over data points and see their values!\n\n\n\n# Plot the annual data interactively\n\n\n\nSee our solution!\n# Plot the annual data using .hvplot\nann_climate_plot = ann_climate_df.hvplot(\n    y='TOBS',\n    title='Annual Average Temperature in Boulder, CO',\n    xlabel='Year',\n    ylabel='Temperature (deg. F)'\n)\nann_climate_plot\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\nTry It: Explore the data\n\n\n\n\nCreate a new Markdown cell below this one.\nHover over the lowest point on your plot. What is the overall minimum annual average temperature?",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "notebooks/01-climate/climate.html#bonus-save-your-work",
    "href": "notebooks/01-climate/climate.html#bonus-save-your-work",
    "title": "\n                Climate Coding Challenge\n            ",
    "section": "BONUS: Save your work",
    "text": "BONUS: Save your work\nYou will need to save your analyses and plots to tell others about what you find.\n\n\n\n\n\n\nTry It: Save Your Plot\n\n\n\nJust like with any other type of object in Python, if you want to reuse your work, you need to give it a name.\n\nGo back to your hvplot code, and give your plot a name by assigning it to a variable. HINT: if you still want your plot to display in your notebook, make sure to call its name at the end of the cell.\nReplace my_plot with the name you gave to your plot.\nReplace 'my_plot.html' with the name you want for your plot. If you change the file extension, .html, to .png, you will get an image instead of an interactive webpage, provided you have the necessary libraries installed.\n\nOnce you run the code, you should see your saved plot in your files – go ahead and open it up.\n\n\n\n\n\n\nWarning\n\n\n\nYou may need to right-click on your file and download it to be able to view it.\n\n\n\n\n\nhv.save(my_plot, 'my_plot.html')\n\n\n\nSee our solution!\nhv.save(ann_climate_plot, 'annual_climate.html')\n\n\n\n\n\n\n\n\nTry It: Your Turn!\n\n\n\nWhat question do you want to answer with climate data? The options are limitless! To get started, you could think about:\n\nHow is climate change happening in your home town?\nHow is climate change different at different latitudes?\nDo heat waves affect urban areas more?",
    "crumbs": [
      "Unit 2",
      "Climate Coding Challenge",
      "Climate Coding Challenge"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/map-stars.html",
    "href": "pages/03-git-github/03-github-portfolio/map-stars.html",
    "title": "\n                Add a map to your website\n            ",
    "section": "",
    "text": "Check out our demo video!\n\n\n\nCheck out our video demo for adding a map to your portfolio:\n\n \n\nDEMO: Add a map to your portfolio by ESIIL\n\n\n\n\nVector data are composed of discrete geometric locations (x and y values, or latitude and longitude) that define the “shape” of the spatial object. The organization of the vertices determines the type of vector that you are working with. There are three fundamental types of vector data:\nPoints: Each individual point is defined by a single x, y coordinate. Examples of point data include: sampling locations, the location of individual trees or the location of plots.\nLines: Lines are composed of many (at least 2) vertices, or points, that are connected. For instance, a road or a stream may be represented by a line. This line is composed of a series of segments, each bend in the road or stream represents a vertex that has defined x, y location.\nPolygons: A polygon consists of 3 or more vertices that are connected and closed. Thus, the outlines of plot boundaries, lakes, oceans, and states or countries are often represented by polygons.\n\n\n\nThere are three types of vector data – point, line, and polygon\n\n\n\n\n\n\n\n\nTip\n\n\n\nRead more about working with spatial data using Python in our Intro to Earth Data Science, here.\n\n\n\n\n\nTo complete this activity, you will need somewhere to run your code. Start by going to this repository on GitHub. We’ve set it up so that anyone can run Python code from there!\nOnce you are on the website, follow these instructions to get your Codespace up and running:\n\nClick on Use this Template in the upper right, and select Open in Codespace. This might take a minute if you haven’t done it in awhile.\nOnce the Codespace loads, open !00-first-map.ipynb using the Folders tab on the left-hand side.\nContinue working through the sample notebook. All the code should start off the same as what is on this page, but there’s more background information here if you want it.\nOnce you are done, stop your Codespace so you don’t use up your allocation!\n\n\n\n\nOpen Street Map (OSM) is an open-source, editable map of the world – a little like a wiki for places. They also provide a service for looking up locations using text, which we’ll be using in this activity.\n\n\n\nYou’ll need to start by importing some libraries to have access to all the code you need.\n\n# Work with vector data\nimport geopandas as gpd\n\n# Save maps and plots to files\nimport holoviews as hv\n# Create interactive maps and plots\nimport hvplot.pandas\n\n# Search for locations by name - this might take a moment\nfrom osmnx import features as osm\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nYou can use the osmnx package to download and search for spatial vector data in your area, or anywhere around the world.\nIn this case, we’re looking for the location of the United Tribes Technical College campus in North Dakota. The address in here, 'United Tribes Technical College, Bismarck, ND, United States', does not have to be complete or exact, but it should be specific enough to narrow it down.\n\n\n\n\n\n\nTip\n\n\n\nYou can use the Open Street Maps website to fine-tune your address before you copy it into your code.\n\n\nWe are also specifying that we want it to be tagged as a 'college' type of‘amenity’` type. You might have to try a couple different searches with different addresses and/or tags to get the address you want, just like if you are using a map website or app.\n\n\n\n\n\n\nTip\n\n\n\nCheck out the list of all the different amenity types available on Open Street Maps! Different amenity types might be different types of vector data, such as a point location or a building footprint polygon.\n\n\n\n# Search for United Tribes Technical College\nuttc_gdf = osm.features_from_address(\n    'United Tribes Technical College, Bismarck, ND, United States',\n    {'amenity': ['college']},\n    dist=1000)\nuttc_gdf\n\n\n\n\n\n\n\n\n\ngeometry\naddr:city\naddr:housenumber\naddr:postcode\naddr:state\naddr:street\namenity\nname\nwebsite\nwikidata\n\n\nelement\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nway\n1157021269\nPOLYGON ((-100.76305 46.76853, -100.76302 46.7...\nBismarck\n3315\n58504\nND\nUniversity Drive\ncollege\nUnited Tribes Technical College\nhttps://uttc.edu/\nQ7893617\n\n\n\n\n\n\n\n\nuttc_gdf.plot()\n\n\n\n\n\n\n\n\nWe have a map of the UTTC Campus!\n\n\n\n\n\n\nWarning\n\n\n\nThe Open Street Maps (OSM) database is not always complete. For example, try searching for UTTC with the {'building': True}, and compare it to the map of the UTTC campus on their website. What do you notice?\n\n\n\n\n\nThere are lots of different ways to create maps and plots in Python. Here, we’re going to use a tool called 'hvplot' and 'geoviews' to create an interactive map, including the online 'EsriImagery' tile source basemap.\n\n# Plot UTTC boundary\nuttc_map = uttc_gdf.hvplot(\n    # Givethe map a descriptive title\n    title=\"United Tribes Technical College, Bismarck, ND\",\n    # Add a basemap\n    geo=True, tiles='EsriImagery',\n    # Change the colors\n    fill_color='white', fill_alpha=0.2,\n    line_color='skyblue', line_width=5,\n    # Change the image size\n    frame_width=400, frame_height=400)\n\n# Save the map as a file to put on the web\nhv.save(uttc_map, 'uttc.html')\n\n# Display the map\nuttc_map\n\nWARNING:bokeh.core.validation.check:W-1005 (FIXED_SIZING_MODE): 'fixed' sizing mode requires width and height to be set: figure(id='p1071', ...)\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nIf you are doing this activity on GitHub Codespaces or another cloud service, you will need to download the map you created:\n\nOpen the Folders tab on the left hand side\nRight-click on uttc.html (or whatever you named your file)\nSelect Download...\n\nThis should download your map.\n\n\n\nYou are now ready to upload your map to your portfolio repository and place it in your webpage. Because it is HTML and not an image, you will need to use the following HTML to get it on your page:\n&lt;embed type=\"text/html\" src=\"uttc.html\" width=\"600\" height=\"600\"&gt;\n\n\n\n\n\n\n\nImportant\n\n\n\nMake sure to make the width and height of your embed element larger than the frame_width and frame_height of your plot, or it will get cut off!",
    "crumbs": [
      "UNIT 1: First Map in Python",
      "Add a map to your website"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/map-stars.html#get-started-with-map-making-using-open-sources-tools",
    "href": "pages/03-git-github/03-github-portfolio/map-stars.html#get-started-with-map-making-using-open-sources-tools",
    "title": "\n                Add a map to your website\n            ",
    "section": "",
    "text": "Check out our demo video!\n\n\n\nCheck out our video demo for adding a map to your portfolio:\n\n \n\nDEMO: Add a map to your portfolio by ESIIL\n\n\n\n\nVector data are composed of discrete geometric locations (x and y values, or latitude and longitude) that define the “shape” of the spatial object. The organization of the vertices determines the type of vector that you are working with. There are three fundamental types of vector data:\nPoints: Each individual point is defined by a single x, y coordinate. Examples of point data include: sampling locations, the location of individual trees or the location of plots.\nLines: Lines are composed of many (at least 2) vertices, or points, that are connected. For instance, a road or a stream may be represented by a line. This line is composed of a series of segments, each bend in the road or stream represents a vertex that has defined x, y location.\nPolygons: A polygon consists of 3 or more vertices that are connected and closed. Thus, the outlines of plot boundaries, lakes, oceans, and states or countries are often represented by polygons.\n\n\n\nThere are three types of vector data – point, line, and polygon\n\n\n\n\n\n\n\n\nTip\n\n\n\nRead more about working with spatial data using Python in our Intro to Earth Data Science, here.\n\n\n\n\n\nTo complete this activity, you will need somewhere to run your code. Start by going to this repository on GitHub. We’ve set it up so that anyone can run Python code from there!\nOnce you are on the website, follow these instructions to get your Codespace up and running:\n\nClick on Use this Template in the upper right, and select Open in Codespace. This might take a minute if you haven’t done it in awhile.\nOnce the Codespace loads, open !00-first-map.ipynb using the Folders tab on the left-hand side.\nContinue working through the sample notebook. All the code should start off the same as what is on this page, but there’s more background information here if you want it.\nOnce you are done, stop your Codespace so you don’t use up your allocation!\n\n\n\n\nOpen Street Map (OSM) is an open-source, editable map of the world – a little like a wiki for places. They also provide a service for looking up locations using text, which we’ll be using in this activity.\n\n\n\nYou’ll need to start by importing some libraries to have access to all the code you need.\n\n# Work with vector data\nimport geopandas as gpd\n\n# Save maps and plots to files\nimport holoviews as hv\n# Create interactive maps and plots\nimport hvplot.pandas\n\n# Search for locations by name - this might take a moment\nfrom osmnx import features as osm\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nYou can use the osmnx package to download and search for spatial vector data in your area, or anywhere around the world.\nIn this case, we’re looking for the location of the United Tribes Technical College campus in North Dakota. The address in here, 'United Tribes Technical College, Bismarck, ND, United States', does not have to be complete or exact, but it should be specific enough to narrow it down.\n\n\n\n\n\n\nTip\n\n\n\nYou can use the Open Street Maps website to fine-tune your address before you copy it into your code.\n\n\nWe are also specifying that we want it to be tagged as a 'college' type of‘amenity’` type. You might have to try a couple different searches with different addresses and/or tags to get the address you want, just like if you are using a map website or app.\n\n\n\n\n\n\nTip\n\n\n\nCheck out the list of all the different amenity types available on Open Street Maps! Different amenity types might be different types of vector data, such as a point location or a building footprint polygon.\n\n\n\n# Search for United Tribes Technical College\nuttc_gdf = osm.features_from_address(\n    'United Tribes Technical College, Bismarck, ND, United States',\n    {'amenity': ['college']},\n    dist=1000)\nuttc_gdf\n\n\n\n\n\n\n\n\n\ngeometry\naddr:city\naddr:housenumber\naddr:postcode\naddr:state\naddr:street\namenity\nname\nwebsite\nwikidata\n\n\nelement\nid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nway\n1157021269\nPOLYGON ((-100.76305 46.76853, -100.76302 46.7...\nBismarck\n3315\n58504\nND\nUniversity Drive\ncollege\nUnited Tribes Technical College\nhttps://uttc.edu/\nQ7893617\n\n\n\n\n\n\n\n\nuttc_gdf.plot()\n\n\n\n\n\n\n\n\nWe have a map of the UTTC Campus!\n\n\n\n\n\n\nWarning\n\n\n\nThe Open Street Maps (OSM) database is not always complete. For example, try searching for UTTC with the {'building': True}, and compare it to the map of the UTTC campus on their website. What do you notice?\n\n\n\n\n\nThere are lots of different ways to create maps and plots in Python. Here, we’re going to use a tool called 'hvplot' and 'geoviews' to create an interactive map, including the online 'EsriImagery' tile source basemap.\n\n# Plot UTTC boundary\nuttc_map = uttc_gdf.hvplot(\n    # Givethe map a descriptive title\n    title=\"United Tribes Technical College, Bismarck, ND\",\n    # Add a basemap\n    geo=True, tiles='EsriImagery',\n    # Change the colors\n    fill_color='white', fill_alpha=0.2,\n    line_color='skyblue', line_width=5,\n    # Change the image size\n    frame_width=400, frame_height=400)\n\n# Save the map as a file to put on the web\nhv.save(uttc_map, 'uttc.html')\n\n# Display the map\nuttc_map\n\nWARNING:bokeh.core.validation.check:W-1005 (FIXED_SIZING_MODE): 'fixed' sizing mode requires width and height to be set: figure(id='p1071', ...)\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nIf you are doing this activity on GitHub Codespaces or another cloud service, you will need to download the map you created:\n\nOpen the Folders tab on the left hand side\nRight-click on uttc.html (or whatever you named your file)\nSelect Download...\n\nThis should download your map.\n\n\n\nYou are now ready to upload your map to your portfolio repository and place it in your webpage. Because it is HTML and not an image, you will need to use the following HTML to get it on your page:\n&lt;embed type=\"text/html\" src=\"uttc.html\" width=\"600\" height=\"600\"&gt;\n\n\n\n\n\n\n\nImportant\n\n\n\nMake sure to make the width and height of your embed element larger than the frame_width and frame_height of your plot, or it will get cut off!",
    "crumbs": [
      "UNIT 1: First Map in Python",
      "Add a map to your website"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html",
    "title": "\n                What Is Version Control\n            ",
    "section": "",
    "text": "In this chapter, you will learn about the benefits of version control for tracking and managing changes to your files. You will also learn how to implement version control using git and then upload changes to the cloud version of your files on Github.com.\nThe text and graphics in the first three sections were borrowed, with some modifications, from Software Carpentry’s Version Control with git lessons.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#git-and-github.com",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#git-and-github.com",
    "title": "\n                What Is Version Control\n            ",
    "section": "",
    "text": "In this chapter, you will learn about the benefits of version control for tracking and managing changes to your files. You will also learn how to implement version control using git and then upload changes to the cloud version of your files on Github.com.\nThe text and graphics in the first three sections were borrowed, with some modifications, from Software Carpentry’s Version Control with git lessons.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#what-is-version-control",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#what-is-version-control",
    "title": "\n                What Is Version Control\n            ",
    "section": "What is Version Control?",
    "text": "What is Version Control?\nA version control system maintains a record of changes to code and other content. It also allows us to revert changes to a previous point in time.\n\n \n\nMany of us have used the “append a date” to a file name version of version control at some point in our lives. Source: “Piled Higher and Deeper” by Jorge Cham on www.phdcomics.com.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#types-of-version-control",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#types-of-version-control",
    "title": "\n                What Is Version Control\n            ",
    "section": "Types of Version control",
    "text": "Types of Version control\nThere are many forms of version control. Some not as good:\n\nSave a document with a new date or name (we’ve all done it, but it isn’t efficient and easy to lose track of the latest file).\nGoogle Docs “history” function (not bad for some documents, but limited in scope).\n\nSome better:\n\nVersion control tools like Git, Mercurial, or Subversion.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#why-version-control-is-important",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#why-version-control-is-important",
    "title": "\n                What Is Version Control\n            ",
    "section": "Why Version Control is Important",
    "text": "Why Version Control is Important\nVersion control facilitates two important aspects of many scientific workflows:\n\nThe ability to save and review or revert to previous versions.\nThe ability to collaborate on a single project.\n\nThis means that you don’t have to worry about a collaborator (or your future self) overwriting something important. It also allows two people working on the same document to efficiently combine ideas and changes.\n\nThought Questions: Think of a specific time when you weren’t using version control that it would have been useful.\n\nWhy would version control have been helpful to your project and workflow?\nWhat were the consequences of not having a version control system in place?",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-version-control-systems-works",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-version-control-systems-works",
    "title": "\n                What Is Version Control\n            ",
    "section": "How Version Control Systems Works",
    "text": "How Version Control Systems Works\n\nSimple Version Control Model\nA version control system tracks what has changed in one or more files over time. Version control systems begin with a base version of a document. Then, they save the committed changes that you make.\nYou can think of version control as a tape: if you rewind the tape and start at the base document, then you can play back each change and end up with your latest version.\n\n \n\nA version control system saves changes to a document, sequentially as you add and commit them to the system. Source: Software Carpentry.\n\n\nOnce you think of changes as separate from the document itself, you can then think about “playing back” different sets of changes onto the base document. You can then retrieve, or revert to, different versions of the document.\nCollaboration with version control allows users to make independent changes to the same document.\n\n \n\nDifferent versions of the same document can be saved within a version control system. Source: Software Carpentry.\n\n\nIf there aren’t conflicts between the users’ changes (a conflict is an area where both users modified the same part of the same document in different ways), you can review two sets of changes on the same base document. If there are conflicts, they can be resolved by choosing which change you want to keep.\n\n \n\nTwo sets of changes to the same base document can be merged together within a version control system if there are no conflicts (areas where both users modified the same part of the same document in different ways). If there are conflicts, they can resolved by choosing which change you want to keep. After conflicts are resolved, all other changes submitted by both users can then be merged together. Source: Software Carpentry.\n\n\nA version control system is a tool that keeps track of all of these changes for us. Each version of a file can be viewed and reverted to at any time. That way if you add something that you end up not liking or delete something that you need, you can simply go back to a previous version.\n\n\nGit and GitHub - A Distributed Version Control Model\nGit uses a distributed version control model. This means that there can be many copies (or forks/branches in GitHub world) of the repository. When working locally, git is the program that you will use to keep track of changes to your repository.\nGitHub.com is a location on the internet (a cloud web server) that acts as a remote location for your repository. GitHub provides a backup of your work that can be retrieved if your local copy is lost (e.g. if your computer falls off a pier). GitHub also allows you to share your work and collaborate with others on projects.\n\n \n\nOne advantage of a distributed version control system is that there are many copies of the repository. Thus, if any one server or computer dies, any of the client repositories can be copied and used to restore the data! Source: Pro Git by Scott Chacon and Ben Straub.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-git-and-github-support-version-control",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-git-and-github-support-version-control",
    "title": "\n                What Is Version Control\n            ",
    "section": "How Git and GitHub Support Version Control",
    "text": "How Git and GitHub Support Version Control\nDue to the functionality that each tool provides, you can use git and GitHub together in the same workflow to: * keep track of changes to your code locally using git. * synchronizing code between different versions (i.e. either your own versions or others’ versions). * test changes to code without losing the original. * revert back to older version of code, if needed. * back-up your files on the cloud (GitHub.com). * share your files on GitHub.com and collaborate with others.\nThroughout this textbook, you will learn more about the functionality of git and GitHub for version control and collaboration to support open reproducible science.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "",
    "text": "Markdown is a human readable syntax (also referred to as a markup language) for formatting text documents. Markdown can be used to produce nicely formatted documents including PDFs and web pages.\nWhen you format text using Markdown in a document, it is similar to using the format tools (e.g. bold, heading 1, heading 2) in a word processing tool like Microsoft Word or Google Docs. However, instead of using buttons to apply formatting, you use syntax such as **this syntax bolds text in markdown** or # Here is a heading.\nMarkdown syntax allows you to format text in many ways, such as making headings, bolding and italicizing words, creating bulleted lists, adding links, formatting mathematical symbols and making tables. These options allow you to format text in visually appealing and organized ways to present your ideas.\nYou can use Markdown to format text in many different tools including GitHub.com, R using RMarkdown, and Jupyter Notebook, which you will learn more about this page.\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about how you can use Markdown to format text and document workflows in a variety of tools.\n\n\n\n\nA great benefit of Jupyter Notebook and other interactive computing notebooks is that it allows you to combine both code (e.g. Python) and Markdown in one document, so that you can easily document your workflows.\nA Jupyter Notebook file uses cells to organize content, and it can contain both cells that render text written using the Markdown syntax as well as cells that contain and run Python code.\nThus, you can use a combination of Markdown and Python code cells to organize and document your Jupyter Notebook for others to easily read and follow your workflow.\n\n \n\nAn example Markdown cell in Jupyter Notebook.\n\n\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about Markdown for Jupyter Notebook.\n\n\nIf you render your Jupyter Notebook file to HTML or PDF, this Markdown will appear as formatted text in the output document.\n\n\n\n\n\n\nData Tip\n\n\n\nIn fact, this web page that you are reading right now is generated from a Markdown document! On this page, you will learn the basic syntax of Markdown.\n\n\n\n\n\nBeing able to include both Markdown and code (e.g. Python) cells in a Jupyter Notebook file supports reproducible science by allowing you to:\n\nDocument your workflow: You can add text to the document that describes the steps of your processing workflow (e.g. how data is being processed and what results are produced).\nDescribe your data: You can describe the data that you are using (e.g. source, pre-processing, metadata).\nInterpret code outputs: You can add some text that interprets or discusses the outputs.\n\nall in one document!\nWhen used effectively, Markdown documentation can help anyone who opens your Jupyter Notebook to follow, understand and even reproduce your workflow.",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#what-is-markdown",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#what-is-markdown",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "",
    "text": "Markdown is a human readable syntax (also referred to as a markup language) for formatting text documents. Markdown can be used to produce nicely formatted documents including PDFs and web pages.\nWhen you format text using Markdown in a document, it is similar to using the format tools (e.g. bold, heading 1, heading 2) in a word processing tool like Microsoft Word or Google Docs. However, instead of using buttons to apply formatting, you use syntax such as **this syntax bolds text in markdown** or # Here is a heading.\nMarkdown syntax allows you to format text in many ways, such as making headings, bolding and italicizing words, creating bulleted lists, adding links, formatting mathematical symbols and making tables. These options allow you to format text in visually appealing and organized ways to present your ideas.\nYou can use Markdown to format text in many different tools including GitHub.com, R using RMarkdown, and Jupyter Notebook, which you will learn more about this page.\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about how you can use Markdown to format text and document workflows in a variety of tools.\n\n\n\n\nA great benefit of Jupyter Notebook and other interactive computing notebooks is that it allows you to combine both code (e.g. Python) and Markdown in one document, so that you can easily document your workflows.\nA Jupyter Notebook file uses cells to organize content, and it can contain both cells that render text written using the Markdown syntax as well as cells that contain and run Python code.\nThus, you can use a combination of Markdown and Python code cells to organize and document your Jupyter Notebook for others to easily read and follow your workflow.\n\n \n\nAn example Markdown cell in Jupyter Notebook.\n\n\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about Markdown for Jupyter Notebook.\n\n\nIf you render your Jupyter Notebook file to HTML or PDF, this Markdown will appear as formatted text in the output document.\n\n\n\n\n\n\nData Tip\n\n\n\nIn fact, this web page that you are reading right now is generated from a Markdown document! On this page, you will learn the basic syntax of Markdown.\n\n\n\n\n\nBeing able to include both Markdown and code (e.g. Python) cells in a Jupyter Notebook file supports reproducible science by allowing you to:\n\nDocument your workflow: You can add text to the document that describes the steps of your processing workflow (e.g. how data is being processed and what results are produced).\nDescribe your data: You can describe the data that you are using (e.g. source, pre-processing, metadata).\nInterpret code outputs: You can add some text that interprets or discusses the outputs.\n\nall in one document!\nWhen used effectively, Markdown documentation can help anyone who opens your Jupyter Notebook to follow, understand and even reproduce your workflow.",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#format-text-in-jupyter-notebook-with-markdown",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#format-text-in-jupyter-notebook-with-markdown",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Format Text in Jupyter Notebook with Markdown",
    "text": "Format Text in Jupyter Notebook with Markdown\n\nMarkdown Cells in Jupyter Notebook\nIn the previous chapter on Jupyter Notebook, you learned how to add new Markdown cells to your Jupyter Notebook files using Menu tools and Keyboard Shortcuts to create new cells.\n\n\n\n\n\n\n\n\nFunction\nKeyboard Shortcut\nMenu Tools\n\n\n\n\nCreate new cell\nEsc + a (above), Esc + b (below)\nInsert→ Insert Cell Above OR Insert → Insert Cell Below\n\n\nCopy Cell\nc\nCopy Key\n\n\nPaste Cell\nv\nPaste Key\n\n\n\nYou also learned how to change the default type of the cell by clicking in the cell and selecting a new cell type (e.g. Markdown) in the cell type menu in the toolbar. Furthermore, you learned that in a Jupyter Notebook file, you can double-click in any Markdown cell to see the syntax, and then run the cell again to see the Markdown formatting.\nNote: if you type text in a Markdown cell with no additional syntax, the text will appear as regular paragraph text. You can add additional syntax to that text to format it in different ways.\nOn this page, you will learn basic Markdown syntax that you can use to format text in Jupyter Notebook files.",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#section-headers",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#section-headers",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Section Headers",
    "text": "Section Headers\nYou can create a heading using the pound (#) sign. For the headers to render properly, there must be a space between the # and the header text.\nHeading one is denoted using one # sign, heading two is denoted using two ## signs, etc, as follows:\n## Heading Two\n\n### Heading Three\n\n#### Heading Four\nHere is a sample of the rendered Markdown:\n\nHeading Three\n\nHeading Four\nNote: the titles on this page are actually formatted using Markdown (e.g. the words Section Headers above are formatted as a heading two).",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#lists",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#lists",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Lists",
    "text": "Lists\nYou can also use Markdown to create lists using the following syntax:\n* This is a bullet list\n* This is a bullet list\n* This is a bullet list\n\n\n1. And you can also create ordered lists\n2. by using numbers\n3. and listing new items in the lists \n4. on their own lines\nIt will render as follows:\n\nThis is a bullet list\nThis is a bullet list\nThis is a bullet list\n\n\nAnd you can also create ordered lists\nby using numbers\nand listing new items in the lists\non their own lines\n\nNotice that you have space between the * or 1. and the text. The space triggers the action to create the list using Markdown.",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#bold-and-italicize",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#bold-and-italicize",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Bold and Italicize",
    "text": "Bold and Italicize\nYou can also use ** to bold or * to italicize words. To bold and italicize words, the symbols have to be touching the word and have to be repeated before and after the word using the following syntax:\n*These are italicized words, not a bullet list*\n**These are bold words, not a bullet list**\n\n* **This is a bullet item with bold words**\n* *This is a bullet item with italicized words*\nIt will render as follows:\nThese are italicized words, not a bullet list These are bold words, not a bullet list\n\nThis is a bullet item with bold words\nThis is a bullet item with italicized words",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#highlight-code",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#highlight-code",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Highlight Code",
    "text": "Highlight Code\nIf you want to highlight a function or some code within a plain text paragraph, you can use one backtick on each side of the text like this:\n`Here is some code!`\nwhich renders like this:\nHere is some code!\nThe symbol used is the backtick, or grave; not an apostrophe (on most US keyboards, it is on the same key as the tilde (~)).",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#horizontal-lines-rules",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#horizontal-lines-rules",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Horizontal Lines (Rules)",
    "text": "Horizontal Lines (Rules)\nYou can also create a horizontal line or rule to highlight a block of Markdown syntax (similar to the highlighting a block of code using the backticks):\n***\n\nHere is some important text!\n\n***\nwhich renders like this:\n\nHere is some important text!",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#hyperlinks",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#hyperlinks",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Hyperlinks",
    "text": "Hyperlinks\nYou can also use HTML in Markdown cells to create hyperlinks to websites using the following syntax:\n&lt;a href=\"url\" target=\"_blank\"&gt;hyperlinked words&lt;/a&gt;\nYou can identify the words that will be hyperlinked (i.e. prompt a web page to open when clicked) by replacing hyperlinked words in the example above.\nFor example, the following syntax:\nOur program website can be found at &lt;a href=\"http://earthdatascience.org\" target=\"_blank\"&gt;this link&lt;/a&gt;.\nwill render as follows with this link as the hyperlinked words:\nOur program website can be found at this link.",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#render-images",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#render-images",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Render Images",
    "text": "Render Images\nYou can also use Markdown to link to images on the web using the following syntax:\n![alt text here](url-to-image-here)\nThe alt text is the alternative text that appears if an image fails to load on webpage; it is also used by screen-reading tools to identify the image to users of the screen-reading tools.\nFor example, the following syntax:\n![Markdown Logo is here.](https://www.fullstackpython.com/img/logos/markdown.png)\nwill render as follows with an alt text of Markdown Logo is here.:\n\n\n\nMarkdown Logo is here.\n\n\n\nLocal Images Using Relative Computer Paths\nYou can also add images to a Markdown cell using relative paths to files in your directory structure using:\n![alt text here](path-to-image-here)\nFor relative paths (images stored on your computer) to work in Jupyter Notebook, you need to place the image in a location on your computer that is RELATIVE to your .ipynb file. This is where good file management becomes extremely important.\nFor a simple example of using relative paths, imagine that you have a subdirectory named images in your earth-analytics directory (i.e. earth-analytics/images/).\nIf your Jupyter Notebook file (.ipynb) is located in root of this directory (i.e. earth-analytics/notebook.ipynb), and all images that you want to include in your report are located in the images subdirectory (i.e. earth-analytics/images/), then the path that you would use for each image is:\nimages/image-name.png\nIf all of your images are in the images subdirectory, then you will be able to easily find them. This also follows good file management practices because all of the images that you use in your report are contained within your project directory.\n\n\n\n\n\n\nData tip\n\n\n\nThere are many free Markdown editors out there! The atom.io editor is a powerful text editor package by GitHub, that also has a Markdown renderer that allows you to preview the rendered Markdown as you write.",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#additional-resources",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#additional-resources",
    "title": "\n                Format Text With Markdown\n            ",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nGitHub Guide on Markdown\n Jupyter Notebook Markdown Resources",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html",
    "title": "\n                Tools For Open Reproducible Science\n            ",
    "section": "",
    "text": "{% include toc title=“On This Page” icon=“file-text” %}",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#learning-objectives",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#learning-objectives",
    "title": "\n                Tools For Open Reproducible Science\n            ",
    "section": " Learning Objectives",
    "text": "Learning Objectives\n\nDescribe how bash, git, GitHub and Jupyter can help you implement open reproducible science workflows.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#useful-tools-in-the-open-reproducible-science-toolbox",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#useful-tools-in-the-open-reproducible-science-toolbox",
    "title": "\n                Tools For Open Reproducible Science\n            ",
    "section": "Useful Tools in the Open Reproducible Science Toolbox",
    "text": "Useful Tools in the Open Reproducible Science Toolbox\nTo implement open science workflows, you need tools that help you document, automate, and share your work. For example you may need to document how you collected your data (protocols), how the data were processed and what analysis approaches you used to summarize the data.\nThroughout this textbook, you will learn how to use open science tools that will help you: * Document your work, so others and your future self can understand your workflow. * Generate reports that connect your data, code (i.e. methods used to process the data), and outputs and publish them in different formats (HTML, PDF, etc). * Automate your workflows, so they can be reproduced by others and your future self. * Share your workflows. * Collaborate with others.\nWhile there are many tools that support open reproducible science, this textbook uses: bash, git,GitHub.com, and Python in Jupyter Notebooks.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-scientific-programming-to-automate-workflows",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-scientific-programming-to-automate-workflows",
    "title": "\n                Tools For Open Reproducible Science\n            ",
    "section": "Use Scientific Programming to Automate Workflows",
    "text": "Use Scientific Programming to Automate Workflows\nMany people begin to use data in tools such as Microsoft Excel (for spreadsheets / tabular data) or ArcGIS (for spatial data) that have graphical user interfaces (GUIs). GUIs can be easier to learn early on as they have a visual interface that can be less overwhelming as a beginner. However, as the data that you are working with get larger, you will often run into challenges where the GUI based tools can not handle larger volumes of data. Further GUI based tools require individual steps that are often manually implemented (unless you build macros or small automation scripts). This makes your workflow difficult to reproduce. Some tools such as Excel require paid licenses which will limit who can access your data and further, will limit including your workflow in a cloud or other remote environment.\nScientific programming using an open source, free programming language like R or Python, is an effective and efficient way to begin building a workflow that is both reproducible and that can be easily shared.\nIn this textbook, you will learn the Python programming language. Python is a free and open source programming language that anyone can download and use. Further it is becomming one of the more popular and in-demand skills in today’s job market. While you will learn Python in this textbook, many of the principles that you will learn can be applied across many programming languages.\n\n \n\nYou can write and run Python code in interactive development environments such as Jupyter Notebook. This image shows how Python code can be organized and run using cells in Jupyter Notebook and how the output is displayed under the executed cells.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-shell-also-called-bash-for-file-manipulation-and-management",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-shell-also-called-bash-for-file-manipulation-and-management",
    "title": "\n                Tools For Open Reproducible Science\n            ",
    "section": "Use Shell (Also Called Bash) For File Manipulation and Management",
    "text": "Use Shell (Also Called Bash) For File Manipulation and Management\nShell is the primary program that computers use to receive code (i.e. commands) and return information produced by executing these commands (i.e. output). These commands can be entered via a Terminal (also known as a Command Line Interface - CLI), which you will work with in this course.\nUsing a Shell helps you: * Navigate your computer to access and manage files and folders (i.e. directories). * Efficiently work with many files and directories at once. * Run programs that provide more functionality at the command line such as git for version control. * Launch programs from specific directories on your computer such as Jupyter Notebook for interactive programming. * Use repeatable commands for these tasks across many different operating systems (Windows, Mac, Linux).\nShell is also important if you need to work on remote machines such as a high performance computing cluster (HPC) or the cloud. Later in this textbook, you will learn how to use a Bash (a specific implementation of Shell) to access and manage files on your computer and to run other programs that can be started or run from the Terminal, such as Jupyter Notebook and git.\n\n \n\nThe terminal and shell (bash) can be used to view file directory structures. The image above shows bash commands to change directories (cd) from the home directory to a subdirectory called earth-analytics, and to list out the contents (ls) of the earth-analytics directory, which includes a subdirectory called data.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#version-control-and-collaboration-using-git-and-github",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#version-control-and-collaboration-using-git-and-github",
    "title": "\n                Tools For Open Reproducible Science\n            ",
    "section": "Version Control and Collaboration Using Git and GitHub",
    "text": "Version Control and Collaboration Using Git and GitHub\nGit helps you monitor and track changes in files, a process referred to as version control. Git provides a way to create and track a “repository” for a project, i.e., a folder where all relevant files are kept. GitHub is a cloud-based platform to host git repositories, which allows you to store and manage your files and track changes. GitHub also includes project management and communication features that are useful when working on collaborative projects such as issues, forks, and milestone tracking.\nThese tools work together to support sharing files and collaboration within workflows. With git, you can work on your files locally and then upload changes to GitHub.com. If you make your repository public, then others can find it on GitHub and contribute to your code (if you want them to) which makes it ideal for collaboration and sharing. GitHub is also useful for code review as others can comment on changes to a workflow and you can chose to accept or reject proposed changes.\nLater in this textbook, you will learn how to use the git/GitHub workflow to implement version control for your files, share work and collaborate with others.\n\n \n\nYou can make local copies on your computer of repositories on Github.com, using git commands that you run in the Terminal. It’s valuable to have copies of your code in multiple places (for example, on your computer and GitHub) just in case something happens to your computer.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#the-jupyter-project",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#the-jupyter-project",
    "title": "\n                Tools For Open Reproducible Science\n            ",
    "section": "The Jupyter Project",
    "text": "The Jupyter Project\nThe Jupyter project is an open source effort that evolved from the IPython project to support interactive data science and computing. While the project evolved from Python, it supports many different programming languages including R, Python and Julia and was designed to be language-agnostic. The Jupyter platform has been widely adopted by the public and private sector science community. If you are familiar with the R programming language, Jupyter Notebook can be compared to R Markdown.\nThere are three core tools that you should be familiar with associated with Project Jupyter. The text below which describes these tools was copied directly from the  Jupyter Website:\nJupyter Notebook: The Jupyter Notebook is an open-source browser-based application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.\n\n \n\nA Jupyter Notebook file can contain both text documentation as well as programming code, which can be executed interactively within Jupyter Notebook.\n\n\nJupyterLab: JupyterLab is a browser-based interactive development environment for Jupyter notebooks, code, and data. JupyterLab is flexible: you can configure and arrange the user interface to support a wide range of workflows in data science, scientific computing, and machine learning. JupyterLab is extensible and modular: you can write plugins that add new components and integrate with existing ones.\n\n \n\nJupyter Notebook (left) is a browser-based interface that allows you to write code in many programming languages, including Python, and add formatted text that describes what the code does using Markdown. Jupyter Lab (right) provides access to Jupyter Notebook but also allows you to work with multiple documents, including notebook files and other files, at a time.\n\n\nJupyterHub: A multi-person version of Jupyter Notebook and Lab that can be run on a server. This is the tool that supports the cloud based classroom used in all of the Earth Analytics courses and workshops.\nYou will learn more about Jupyter tools in later chapters of this book.\n\nOrganize and Document Workflows Using Jupyter Notebook Files\nConnecting your entire workflow including accessing the data, processing methods and outputs is an important part of open reproducible science.\nJupyter Notebook files can help you connect your workflow by allowing you to write and run code interactively as well as organize your code with documentation and results within individual Jupyter Notebook files. You can also export Jupyter Notebook files to HTML and PDF formats for easy sharing.\nIn this textbook and in our Earth Analytics courses, we use Jupyter Notebook with Python. As described previously, Python is a widely used programming language in the sciences and provides strong functionality for working with a variety of data types and formats.\nWriting and organizing your Python code within Jupyter Notebook files supports open reproducible science through documentation of data inputs, code for analysis and visualization, and results – all within one file that can be easily shared with others.\nIn later chapters, you will learn how to use Jupyter Notebook to write and run Python code for analysis and visualization of earth and environmental science data.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html",
    "title": "\n                How To Organize Your Project: Best Practices for Open Reproducible Science\n            ",
    "section": "",
    "text": "When you are working on a data project, there are often many files that you need to store on your computer. These files may include:\n\nRaw Data Files\nProcessed data files: you may need to take the raw data and process it in some way\nCode and scripts\nOutputs like figures and tables\nWriting associated with your project\n\nIt will save you time and make your project more useable and reproducible if you carefully consider how these files are stored on your computer. Below are some best practices to consider when pulling together a project.\n\n\n\nAs you create new directories and files on your computer, consider using a carefully crafted naming convention that makes it easier for anyone to find things and also to understand what each files does or contains.\nIt is good practice to use file and directory that are:\n\nHuman readable: use expressive names that clearly describe what the directory or file contains (e.g. code, data, outputs, figures).\nMachine readable: avoid strange characters or spaces. Instead of spaces, you can use - or _ to separate words within the name to make them easy to read and parse.\nSortable: it is nice to be able to sort files to quickly see what is there and find what you need. For example, you can create a naming convention for a list of related directories or files (e.g. 01-max.jpg, 02-terry.jpg, etc), which will result in sortable files.\n\nThese guidelines not only help you to organize your directories and files, but they can also help you to implement machine readable names that can be easily queried or parsed using scientific programming or other forms of scripting.\nUsing a good naming convention when structuring a project directory also supports reproducibility by helping others who are not familiar with your project quickly understand your directory and file structure.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#project-organization-and-management-for-open-reproducible-science-projects",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#project-organization-and-management-for-open-reproducible-science-projects",
    "title": "\n                How To Organize Your Project: Best Practices for Open Reproducible Science\n            ",
    "section": "",
    "text": "When you are working on a data project, there are often many files that you need to store on your computer. These files may include:\n\nRaw Data Files\nProcessed data files: you may need to take the raw data and process it in some way\nCode and scripts\nOutputs like figures and tables\nWriting associated with your project\n\nIt will save you time and make your project more useable and reproducible if you carefully consider how these files are stored on your computer. Below are some best practices to consider when pulling together a project.\n\n\n\nAs you create new directories and files on your computer, consider using a carefully crafted naming convention that makes it easier for anyone to find things and also to understand what each files does or contains.\nIt is good practice to use file and directory that are:\n\nHuman readable: use expressive names that clearly describe what the directory or file contains (e.g. code, data, outputs, figures).\nMachine readable: avoid strange characters or spaces. Instead of spaces, you can use - or _ to separate words within the name to make them easy to read and parse.\nSortable: it is nice to be able to sort files to quickly see what is there and find what you need. For example, you can create a naming convention for a list of related directories or files (e.g. 01-max.jpg, 02-terry.jpg, etc), which will result in sortable files.\n\nThese guidelines not only help you to organize your directories and files, but they can also help you to implement machine readable names that can be easily queried or parsed using scientific programming or other forms of scripting.\nUsing a good naming convention when structuring a project directory also supports reproducibility by helping others who are not familiar with your project quickly understand your directory and file structure.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects",
    "title": "\n                How To Organize Your Project: Best Practices for Open Reproducible Science\n            ",
    "section": "Best Practices for Open Reproducible Science Projects",
    "text": "Best Practices for Open Reproducible Science Projects\n\n1. Use Consistent Computer Readable Naming Conventions\nMachine readable file names allow your directory structure to be quickly manipulated and handled by code.\nFor example, you may want to write a script that processes a set of images and you may want to sort those images by date. If the date of each image is included in the file name at the very beginning of the name, it will become easier to parse with your code. The files below could be difficult to parse because the naming convention is not standard.\n```{bash}\n* file.jpg\n* file-two.jpg\n* filethree.jpg\n```\nHowever this list of files is easier to parse as the date is included with the file name.\n```{bash}\n* 2020-image.jpg\n* 2019-image.jpg\n* 2018-image.jpg\n```\nSometimes simply numbering the files is enough to allow for sorting:\n```{bash}\n* 01-image.jpg\n* 02-image.jpg\n* 03-image.jpg\n```\nIf your files and directories follow identifiable patterns or rules, it will allow you to more easily manipulate them. This in turn will make it easier for you to automate file processing tasks.\nA few other best practices to consider when naming files within a project:\n\nAvoid spaces in file and dir names: spaces in a file name can be difficult when automating workflows.\nUse dashes-to-separate-words (slugs): dashes or underscores can make is easier for you to create expressive file names. Dashes or underscores are also easier to parse when coding.\nConsider whether you may need to sort your files. If you do, you may want to number things.\n\n\n\n2. Be Consistent When Naming Files - Use Lower Case\nIt might be tempting when naming files and directories to use lower and Upper case. However, case will cause coding issues for you down the road particularly if you are switching between operating systems (Mac vs Linux vs Windows).\nCase in point, have a look at the file names below.\n```{bash}\nmy-file.txt\nMy-File.txt\n```\nIf you want to open / read my-file.txt it would be easy to call:\npandas.read.csv(\"my-file.txt\")\nin Python. This call will work on all operating systems. However, this call:\npandas.read.csv(\"My-file.txt\")\nmay work on some machines (possibly Windows) but it’s likely to fail on Linux or MAC. To keep things simple and to avoid case sensitvity issues, use lower case naming conventions for all file and directory names.\n\n\n3. Organize Your Project Directories to Make It Easy to Find Data, Code and Outputs\nRather than saving a bunch of files into a single directory, consider a directory organization approach that fits your project.\nCreate numbered directories that cover the steps of your workflow - for example:\n```{bash}\n/vegetation-health-project\n    /01-code-scripts\n    /02-raw-data\n    /03-processed-data\n    /04-graphics-outputs\n    /05-paper-blog\n```\nThe numbers before each folder allow you to sort the directories in a way that makes it easier to parse. Notice also that each directory has an expressive (uses words that describe what is in the directory) name. Expressive naming will be discussed in the next section.\nUsing individual directories to store data, scripts, output graphics and then the final paper and blog posts being written for the project makes it easier to find components of your project.\nThis is especially useful for your future self who may need to come back to the project in six months to update things. It also makes is easier for a colleague that you are collaborating with to quickly find things.\nThere is no one perfect example as each project may require different directories. The best advice is to pick something that works well for you and your team and stick to it. It’s best to be consistent.\n\n\n\n\n\n\n\n\nOrganized Project\nNon Organized Project\n\n\n\n\n/01-scripts     01-clean-data.py      02-run-model.py     03-create-plots.py  /02-data      /raw-data          /landsat-imagery         /fire-boundary/03-output-graphics    study-area-map.png  /04-final-paper     fire-paper.pdf\nfile1-new.pyfile1.py plotting-test.py  data-file.txt  /old-stuff  testoutput1.txt testoutput2.csv\n\n\n\n\nLook at the example directory structures above. Which structure is easier to understand? In which could you more easily find what you need?\n\n\n\n\n4. Use Meaningful (Expressive) File And Directory Names\nExpressive file names are those that are meaningful and thus describe what each directory or file is or contains. Using expressive file names makes it easier to scan a project directory and quickly understand where things are stored and what files do or contain.\nExpressive names also support machine readibility, as discernible patterns in expressive names can be used by a computer to identify and parse files.\n\n\n\n\n\n\n\n\nExpressive Project\nNon Expressive Project\n\n\n\n\n/01-scripts     01-process-landsat-data.py      02-calculate-ndvi.py     03-create-ndvi-maps.py  /02-data      /raw-data          /landsat-imagery                /june-2016                /july-2016         /cold-springs-fire-boundary/03-output-graphics    ndvi-map-june-2016.png      ndvi-map-july-2016.png /04-final-paper     veg-impacts-cold-springs-fire.pdf\nwork.pyplotting.py plotting-test.py landsat/ data-file.txt old-stuff/  testoutput1.txt testoutput2.csv\n\n\n\n\nLook at the example directory structures above. Which directory structure (the one on the LEFT or the one on the RIGHT) would you prefer to work with?\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWindows Users: Note that the default names of your existing directories often begin with upper case letters (e.g. Documents, Downloads). When creating new directories, use lower case to follow the textbook more easily and for best results from future programming tasks.\n\n\n\n\n5. Document Your Project With a README File\nThere are many ways to document a project; however, a readme file at the top level of your project is a standard convention. When you begin to use GitHub, you will notice that almost all well designed github repositories contain readme files. The readme is a text file that describes data / software packages and tools used to process data in your project. The readme should also describe files and associated naming conventions. Finally, the readme can be used to document any abbreviations used, units, etc as needed.\nThere are other files that you may consider as well such as software installation instructions if those are required, citation information and if the project is one that you want others to contribute to, then a CONTRIBUTING file may be in order.\n\n\n6. Don’t Use Proprietary File Formats\nProprietary formats are formats that require a specific tool (and a specific license often) to open. Examples include Excel (.xls) or Word (.doc). These formats may change over time as new versions come out (example: .xls upgraded to .xlsx.\nIn some cases, certain formats are operating system specific (example: most Linux users do not run Microsoft tools).\nWhen choosing file formats for your projects, think about whether you will have a license to access that file format in the future and whether others have access to the license.\nWhen you can, stick to formats that are operating system and tool agnostic such as .csv and .txt. Text files are not proprietary and thus can be opened on any operating system and on any computer with the right open tools. This allows more people to have access to your files including your future self who might not have a license to open these files.\n\n\n\n\n\n\nTip\n\n\n\nUsing standard data formats increases opportunities for re-use and expansion of your research.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects---a-case-study",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects---a-case-study",
    "title": "\n                How To Organize Your Project: Best Practices for Open Reproducible Science\n            ",
    "section": "Best Practices For Open Reproducible Science Projects - A Case Study",
    "text": "Best Practices For Open Reproducible Science Projects - A Case Study\nJennifer recently graduated with a degree in environmental science and got a job working with an environmental non-profit. While a student, she worked on some great projects to build flood models using MATLAB, a proprietary software used to design and run models. In collaboration with a professor and other class mates, Jennifer wrote a paper that was accepted for publication in well known hydrology journal, though some minor changes were requested.\nExcited to get the paper revised for publication, Jennifer tracks down her project files and tries to remember which files produced the final outputs that she included in the submitted paper. However, she realizes that even when she is able to identify which files she needs, she no longer has access to the MATLAB, which she needs to access the files. Unfortunately, her license expired when she graduated, and her non-profit does not have licenses for MATLAB.\nJennifer’s story can be a common experience for anyone who has moved to a new job where the resources and licenses differ, or who has spent a long time away from a particular project and need to recreate a workflow.\nHow could using organized and expressively named directories have helped Jennifer with this project? How could avoiding proprietary file formats contribute to the longevity of this project?",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/99-contribute/03-authoring.html",
    "href": "pages/99-contribute/03-authoring.html",
    "title": "\n                Learning Portal Authoring\n            ",
    "section": "",
    "text": "Using callouts in Quarto\n\n\n\n\n\n\nReflect and Respond: What do you think?\n\n\n\nRespond\n\n\n\n\n\n\n\n\nTry It\n\n\n\nTask\n\n\n\n\n\n\n\n\nCheck out our demo video!\n\n\n\nVideo\n\n\n\n\n\n\n\n\nLooking for an Extra Challenge?\n\n\n\nExtra",
    "crumbs": [
      "Learning Portal Authoring"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/css/02-facilitating/index.html",
    "href": "pages/00-overviews/04b-events/css/02-facilitating/index.html",
    "title": "\n                Facilitating cross-cultural projects\n            ",
    "section": "",
    "text": "Meaningful projects may be the key to classroom inclusion — but meaningful work is often tough, emotional work. As STEM educators we aren’t usually trained to productively channel student’s emotions and experiences. In this session we will cover three frameworks that we use at the Earth Data Science Innovation and Inclusion Lab to foster innovative, cross-cultural science teamwork: active listening, ethical space, and the “groan zone”. Active listening is an important skill for constructing a classroom environment where team members can express potentially traumatic or upsetting experiences that motivate their learning and inquiry goals. Ethical space is a framework for collaborating across cultures while respecting all team-members’ contributions and sovereignty. Finally, the “groan zone” refers to the fact that learning and innovating is inherently uncomfortable, and teams who can’t tolerate that discomfort miss out on the juicy and impactful ideas and understanding that lies on the other side. In this workshop, we will present these three frameworks, practice them using role play, and discuss some ways they can be used to facilitate cross-cultural student projects.",
    "crumbs": [
      "Session 2 -- Facilitating cross-cultural projects"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/css/02-facilitating/index.html#session-slides",
    "href": "pages/00-overviews/04b-events/css/02-facilitating/index.html#session-slides",
    "title": "\n                Facilitating cross-cultural projects\n            ",
    "section": "Session slides",
    "text": "Session slides",
    "crumbs": [
      "Session 2 -- Facilitating cross-cultural projects"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/css/03-ai-peer/index.html",
    "href": "pages/00-overviews/04b-events/css/03-ai-peer/index.html",
    "title": "\n                You don’t need to be an expert to teach programming\n            ",
    "section": "",
    "text": "Many students who graduate with science degrees say they did not receive the training they needed in computational skills. Indeed, we’ve observed that many departments would not hire their own undergraduates to do research because they lack coding skills. It is urgent to inject these skills into all kinds of science and math classrooms so that students feel confident applying for jobs and graduate programs in their field. In this workshop we will explore strategies that non-expert programmers can use to expose students to coding. We will discuss teaching coding using AI, teaching debugging skills rather than computer science concepts, and setting up an environment where students can support each other.",
    "crumbs": [
      "Session 3 -- You don't need to be an expert to teach coding"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/hyrsense/index.html",
    "href": "pages/00-overviews/04b-events/hyrsense/index.html",
    "title": "\n                HYR-SENSE\n            ",
    "section": "",
    "text": "HYR-SENSE (3)\nNASA-SBG and NSF-ESIIL “HYR-SENSE: Hyperspectral and Thermal Remote Sensing for Environmental Justice” program. This training is funded by the NASA award #8ONSSC24KO328, and is subject to the NASA’s and NSF’s terms and conditions.\nCheck out HYR-SENSE on GitHub at our repository!",
    "crumbs": [
      "HYR-SENSE"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/hyrsense/index.html#training-details",
    "href": "pages/00-overviews/04b-events/hyrsense/index.html#training-details",
    "title": "\n                HYR-SENSE\n            ",
    "section": "Training details",
    "text": "Training details\nJoin NASA Surface Biology and Geology (SBG) and ESIIL in Boulder, Colorado this summer for HYR-SENSE: Hyperspectral and Thermal Remote Sensing for Environmental Justice. Participants will gain hands-on experience with hyperspectral and thermal imaging remote sensing technology and its applications for environmental justice issues.\n\nWho should apply?: Undergraduate and graduate students, faculty, and early career scientists currently attending or affiliated with a Tribal College or University or affiliates of Native American Tribes. Invited participants will have experience and interests in relevant disciplines, which may include ecology, environmental science, Geographic Information Systems (GIS), remote sensing, natural resource management, or similar.\nWhen: June 10th-13th, 2024 with additional pre-training sessions\nWhere: University of Colorado, Boulder\nCost: This training is funded by NASA and ESIIL at no cost to the participant. Participants’ travel costs, lodging, and meals will be fully covered.\nThis program will be tailored to the interests and needs of the participants while being led by experts in the field from NASA and ESIIL.\n\nClick here for more details.",
    "crumbs": [
      "HYR-SENSE"
    ]
  },
  {
    "objectID": "pages/00-overviews/02-textbooks/ignite/index.html",
    "href": "pages/00-overviews/02-textbooks/ignite/index.html",
    "title": "\n                ESIIL IGNITE Data Analytics\n            ",
    "section": "",
    "text": "Welcome to ESIIL IGNITE Data Analytics! If you are an environmental scientist, computer programmer, or statistician looking to get involved in the highly interdisciplinary field of Environmental Data Analytics, you’re in the right place.",
    "crumbs": [
      "ESIIL IGNITE Data Analytics"
    ]
  },
  {
    "objectID": "pages/00-overviews/02-textbooks/ignite/index.html#how-to-use-esiil-ignite",
    "href": "pages/00-overviews/02-textbooks/ignite/index.html#how-to-use-esiil-ignite",
    "title": "\n                ESIIL IGNITE Data Analytics\n            ",
    "section": "How to use ESIIL IGNITE",
    "text": "How to use ESIIL IGNITE\nIGNITE resources are typically built around interactive computing notebooks. We often provide starter code if you want to work things out yourself, as well as working examples in the “See our solution” dropdown. We recommend running the code as you go – it’s how our students find the most success.",
    "crumbs": [
      "ESIIL IGNITE Data Analytics"
    ]
  },
  {
    "objectID": "pages/00-overviews/02-textbooks/ignite/index.html#we-want-your-contributions",
    "href": "pages/00-overviews/02-textbooks/ignite/index.html#we-want-your-contributions",
    "title": "\n                ESIIL IGNITE Data Analytics\n            ",
    "section": "We want your contributions!",
    "text": "We want your contributions!\nIf you think we’re missing something that was essential to your transition to environmental data analytics, reach out in our contribution page! We want this resource to evolve with your needs and with technological development.",
    "crumbs": [
      "ESIIL IGNITE Data Analytics"
    ]
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/01-fundamentals/05-final.html",
    "href": "pages/00-overviews/04a-courses/foundations/01-fundamentals/05-final.html",
    "title": "\n                Fundamentals of Earth Data Analytics\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/01-fundamentals/04-raster.html",
    "href": "pages/00-overviews/04a-courses/foundations/01-fundamentals/04-raster.html",
    "title": "\n                Final project\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/index.html",
    "href": "pages/00-overviews/04a-courses/foundations/index.html",
    "title": "\n                Earth Data Analytics – Foundations\n            ",
    "section": "",
    "text": "Welcome to the Earth Data Analytics – Foundations graduate certificate program at the University of Colorado Boulder!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/02-topics/index.html",
    "href": "pages/00-overviews/04a-courses/foundations/02-topics/index.html",
    "title": "\n                Topics in Earth Data Analytics\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/01-collaboration/04-applications.html",
    "href": "pages/00-overviews/04a-courses/shortcourse/01-collaboration/04-applications.html",
    "title": "\n                Applications\n            ",
    "section": "",
    "text": "This course will be available in 2024."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/01-collaboration/03-geospatial.html",
    "href": "pages/00-overviews/04a-courses/shortcourse/01-collaboration/03-geospatial.html",
    "title": "\n                Geospatial Data Fundamentals\n            ",
    "section": "",
    "text": "This course will be available in 2024.",
    "crumbs": [
      "Unit 3",
      "Geospatial Data Fundamentals"
    ]
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/index.html",
    "href": "pages/00-overviews/04a-courses/shortcourse/index.html",
    "title": "\n                ESIIL Data Short Course\n            ",
    "section": "",
    "text": "Through this 4-week, project-based data short course, Earth Science educators and leaders will learn how to inclusively engage learners in:\n\nUnderstanding and unlocking the potential of EDS empower their communities\nContributing to sustainable, collaborative EDS projects\nTelling their community’s data stories\n\nParticipants will engage in a series of trainings that prepare them to include open science (Python) and collaboration tools (GitHub, including GitHub Classroom, GitHub Codespaces, and GitHub Pages) into their curriculum or existing research model. We will emphasize working with key types of environmental data (time series, vector, and raster), and using cloud computing to enhance access to Earth Data Science education. At the end of the data short course, participants will be expected to create a lesson that applies lessons learned to a class or project that they are currently working on."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/index.html#what-is-the-esiil-data-short-course",
    "href": "pages/00-overviews/04a-courses/shortcourse/index.html#what-is-the-esiil-data-short-course",
    "title": "\n                ESIIL Data Short Course\n            ",
    "section": "",
    "text": "Through this 4-week, project-based data short course, Earth Science educators and leaders will learn how to inclusively engage learners in:\n\nUnderstanding and unlocking the potential of EDS empower their communities\nContributing to sustainable, collaborative EDS projects\nTelling their community’s data stories\n\nParticipants will engage in a series of trainings that prepare them to include open science (Python) and collaboration tools (GitHub, including GitHub Classroom, GitHub Codespaces, and GitHub Pages) into their curriculum or existing research model. We will emphasize working with key types of environmental data (time series, vector, and raster), and using cloud computing to enhance access to Earth Data Science education. At the end of the data short course, participants will be expected to create a lesson that applies lessons learned to a class or project that they are currently working on."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/index.html#who-is-this-for",
    "href": "pages/00-overviews/04a-courses/shortcourse/index.html#who-is-this-for",
    "title": "\n                ESIIL Data Short Course\n            ",
    "section": "Who is this for?",
    "text": "Who is this for?\nLessons will be geared toward educators and early careerists interested in incorporating EDS teaching into their existing programs and curricula (biology, ecology, geography, etc.)."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/index.html#when-and-how-can-you-participate",
    "href": "pages/00-overviews/04a-courses/shortcourse/index.html#when-and-how-can-you-participate",
    "title": "\n                ESIIL Data Short Course\n            ",
    "section": "When and how can you participate?",
    "text": "When and how can you participate?\nAll trainings will be available as both: 1) live online workshops and 2) materials for self-paced learning\nBuilding on participation in the short course, we will establish an ongoing open community forum, help desk, and office hours to support continued learning and capacity-building."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/index.html#whats-next",
    "href": "pages/00-overviews/04a-courses/shortcourse/index.html#whats-next",
    "title": "\n                ESIIL Data Short Course\n            ",
    "section": "What’s next?",
    "text": "What’s next?\nOur commitment to building a community of educators.This data short course is first in a series of 4 courses that will introduce participants to:\n\nCourse 1: EDS community standard collaboration, education, and online publishing tools\nCourse 2: Finding and working with EDS data following FAIR and CARE data principles\nCourse 3: Writing modular, readable, and reproducible scientific workflows\nCourse 4: Cyberinfrastructure skills for teaching Earth Data Science\n\nEach course will provide participants with the opportunity to develop their own lessons that apply skills learned during the training."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/03-reproducible/index.html",
    "href": "pages/00-overviews/04a-courses/shortcourse/03-reproducible/index.html",
    "title": "\n                Readable, Modular, Reproducible Code\n            ",
    "section": "",
    "text": "This course will be available in 2026."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/stars/05-air-quality/index.html",
    "href": "pages/00-overviews/04a-courses/stars/05-air-quality/index.html",
    "title": "\n                Who’s breathing wildfire smoke?\n            ",
    "section": "",
    "text": "This course will be available in 2024."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/stars/04-migration/index.html",
    "href": "pages/00-overviews/04a-courses/stars/04-migration/index.html",
    "title": "\n                Get started with vector data\n            ",
    "section": "",
    "text": "This course will be available in 2024."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/stars/03-flooding/index.html",
    "href": "pages/00-overviews/04a-courses/stars/03-flooding/index.html",
    "title": "\n                How big were the 2019 floods in the Midwestern U.S.?\n            ",
    "section": "",
    "text": "This course will be available in 2024."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/stars/index.html",
    "href": "pages/00-overviews/04a-courses/stars/index.html",
    "title": "\n                ESIIL Stars\n            ",
    "section": "",
    "text": "We love our (rock) Stars!\n\n\nWe are excited to have you in class as we introduce you to Earth and Environmental Data Science (EDS) fundamentals using Python.\nESIIL Stars is modeled after the Harnessing the Data Revolution (HDR) Earth Data Science Corps (EDSC), which took place from 2020-2022. Both of these programs are funded by the National Science Foundation (NSF).\nESIIL Stars aims to meet the following objectives through technical training and project based learning:\n\nTrain the next generation of Earth and Environmental Data Scientists\nAnswer relevant GIS and Earth/Environmental science questions\nDiversify the EDS workforce\nBuild capacity to teach & learn EDS at partner institutions\n\nThis work represents a partnership between Oglala Lakota College (OLC), Metropolitan State University of Denver (MSU), United Tribes Technical College (UTTC), and The Environmental Data Science Innovation and Inclusion Lab (ESIIL). ESIIL is a part of the Cooperative Institute for Research in Environmental Sciences (CIRES) a partnership of the University of Colorado Boulder and the National Oceanic and Atmospheric Administration (NOAA). We are also affiliated with Earth Lab.\nWe appreciate these partnerships and look forward to working with you all!",
    "crumbs": [
      "ESIIL Stars"
    ]
  },
  {
    "objectID": "pages/00-overviews/04a-courses/stars/index.html#welcome-to-the-esiil-stars-internship",
    "href": "pages/00-overviews/04a-courses/stars/index.html#welcome-to-the-esiil-stars-internship",
    "title": "\n                ESIIL Stars\n            ",
    "section": "",
    "text": "We love our (rock) Stars!\n\n\nWe are excited to have you in class as we introduce you to Earth and Environmental Data Science (EDS) fundamentals using Python.\nESIIL Stars is modeled after the Harnessing the Data Revolution (HDR) Earth Data Science Corps (EDSC), which took place from 2020-2022. Both of these programs are funded by the National Science Foundation (NSF).\nESIIL Stars aims to meet the following objectives through technical training and project based learning:\n\nTrain the next generation of Earth and Environmental Data Scientists\nAnswer relevant GIS and Earth/Environmental science questions\nDiversify the EDS workforce\nBuild capacity to teach & learn EDS at partner institutions\n\nThis work represents a partnership between Oglala Lakota College (OLC), Metropolitan State University of Denver (MSU), United Tribes Technical College (UTTC), and The Environmental Data Science Innovation and Inclusion Lab (ESIIL). ESIIL is a part of the Cooperative Institute for Research in Environmental Sciences (CIRES) a partnership of the University of Colorado Boulder and the National Oceanic and Atmospheric Administration (NOAA). We are also affiliated with Earth Lab.\nWe appreciate these partnerships and look forward to working with you all!",
    "crumbs": [
      "ESIIL Stars"
    ]
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/04-cyberinfrastructure/index.html",
    "href": "pages/00-overviews/04a-courses/shortcourse/04-cyberinfrastructure/index.html",
    "title": "\n                Cyberinfrastructure for Earth Data Science Leaders\n            ",
    "section": "",
    "text": "This course will be available in 2027."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/02-data/index.html",
    "href": "pages/00-overviews/04a-courses/shortcourse/02-data/index.html",
    "title": "\n                Ethical Earth Data Use\n            ",
    "section": "",
    "text": "This course will be available in 2025."
  },
  {
    "objectID": "pages/00-overviews/04a-courses/shortcourse/01-collaboration/02-open-science.html",
    "href": "pages/00-overviews/04a-courses/shortcourse/01-collaboration/02-open-science.html",
    "title": "\n                Open, Reproducible, Ethical Science\n            ",
    "section": "",
    "text": "This course will be available in 2024.",
    "crumbs": [
      "Unit 2",
      "Open, Reproducible, Ethical Science"
    ]
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/02-topics/02-clustering.html",
    "href": "pages/00-overviews/04a-courses/foundations/02-topics/02-clustering.html",
    "title": "\n                Clustering\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/02-topics/01-big-data.html",
    "href": "pages/00-overviews/04a-courses/foundations/02-topics/01-big-data.html",
    "title": "\n                Working with larger-then-memory (big) data\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/01-fundamentals/02-time-series.html",
    "href": "pages/00-overviews/04a-courses/foundations/01-fundamentals/02-time-series.html",
    "title": "\n                Time-series Data\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/01-fundamentals/03-vector.html",
    "href": "pages/00-overviews/04a-courses/foundations/01-fundamentals/03-vector.html",
    "title": "\n                Geospatial Vector Data\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04a-courses/foundations/03-applications/index.html",
    "href": "pages/00-overviews/04a-courses/foundations/03-applications/index.html",
    "title": "\n                Earth Data Analytics Applications\n            ",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "pages/00-overviews/04b-events/css/index.html",
    "href": "pages/00-overviews/04b-events/css/index.html",
    "title": "\n                Environmental Data Science Workshop with ESIIL\n            ",
    "section": "",
    "text": "We think Environmental Data Science units have a place in many different types of classrooms, from physics to ethnic studies. In this special workshop, we’ll show you how. We’re also thrilled to be joined by Elisha Yellow Thunder and Jim Sanovia, who will be talking about how they bring together inclusivity, culture, and enviromental data science in a Tribal College and University context.\n\n\n\n\n\n\nThe Chicago Symposium Series\n\n\n\n\n\n\n\nEarth Data Science Innovation and Inclusion Lab\n\n\n\n\n\nIntroductory slides:",
    "crumbs": [
      "Workshop Overview"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/css/index.html#welcome-to-the-environmental-data-science-with-esiil-workshop",
    "href": "pages/00-overviews/04b-events/css/index.html#welcome-to-the-environmental-data-science-with-esiil-workshop",
    "title": "\n                Environmental Data Science Workshop with ESIIL\n            ",
    "section": "",
    "text": "We think Environmental Data Science units have a place in many different types of classrooms, from physics to ethnic studies. In this special workshop, we’ll show you how. We’re also thrilled to be joined by Elisha Yellow Thunder and Jim Sanovia, who will be talking about how they bring together inclusivity, culture, and enviromental data science in a Tribal College and University context.\n\n\n\n\n\n\nThe Chicago Symposium Series\n\n\n\n\n\n\n\nEarth Data Science Innovation and Inclusion Lab\n\n\n\n\n\nIntroductory slides:",
    "crumbs": [
      "Workshop Overview"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/css/index.html#chicago-symposium",
    "href": "pages/00-overviews/04b-events/css/index.html#chicago-symposium",
    "title": "\n                Environmental Data Science Workshop with ESIIL\n            ",
    "section": "Chicago Symposium",
    "text": "Chicago Symposium\nThe Chicago Symposium is a forum for faculty and graduate students in education, mathematics, and science devoted to improving teaching and learning of mathematics and science. Our inter-disciplinary forums bring together people from universities, 4-year colleges and 2-year colleges.\n\nMission Statement\n\nThe mission of the Chicago Symposium Series is to sustain a dynamic interdisciplinary, inter-institutional community of scholars, who are well-informed about national and local initiatives and research on mathematics and science education, for the purpose of improving instructional practice.\n\n\n\nGoals\n\nTo encourage productive dialog among faculty from universities, 4-year colleges and community colleges on the common issue of instructional improvement.\nTo highlight exemplary practices from Chicago area institutions.\nTo assist Chicago area faculty in making and maintaining professional contacts.\nTo inform mathematics and science faculty on current research in mathematics and science education and point out ways in which research can directly impact their own teaching.\nTo increase awareness of how institutions of higher learning may impact pre-college math and science instruction and involve faculty in preparation of future teachers.\nTo strengthen relationships and partnerships with the Chicago Public Schools",
    "crumbs": [
      "Workshop Overview"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/css/01-urban-heat/index.html",
    "href": "pages/00-overviews/04b-events/css/01-urban-heat/index.html",
    "title": "\n                Climate change inquiry\n            ",
    "section": "",
    "text": "Higher highs, lower lows, storms, and smoke – we’re all feeling the effects of climate change. As science and math educators, students are looking to us to help make sense of their changing environments. In this classroom activity, we will investigate the 2024 heat wave in the Chicago area — or any time and place that is meaningful to you or your students. This activity can support a variety of domain-specific topics in biology, physics, math, environmental science, and public health — all while teaching fundamental computational skills. As part of the activity, we will use data from the National Centers for Environmental Information, will discuss the critical link between FAIR (findable, accessible, interoperable, and reproducible) data and cultural and/or personal relevance. By the end of the session, you will have the skills and resources you need to facilitate a computational climate change activity as an element in your next class.",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave"
    ]
  },
  {
    "objectID": "pages/00-overviews/04b-events/mefa/index.html",
    "href": "pages/00-overviews/04b-events/mefa/index.html",
    "title": "\n                MEFA Phenocam Workshop 2024\n            ",
    "section": "",
    "text": "Welcome to the MEFA 2024 Phenocam Workshop!",
    "crumbs": [
      "MEFA Phenocam Workshop 2024"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-overview.html",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-overview.html",
    "title": "\n                Get started with open reproducible science!\n            ",
    "section": "",
    "text": "Open reproducible science makes scientific methods, data and outcomes available to everyone. That means that everyone who wants should be able to find, read, understand, and run your workflows for themselves.\n\n\nImage from https://www.earthdata.nasa.gov/esds/open-science/oss-for-eso-workshops\n\nFew if any science projects are 100% open and reproducible (yet!). However, members of the open science community have developed open source tools and practices that can help you move toward that goal. You will learn about many of those tools in the Intro to Earth Data Science textbook. Don’t worry about learning all the tools at once – we’ve picked a few for you to get started with.\n\n\n\n\n\n\nRead More\n\n\n\nRead our textbook chapter about open reproducible science.\n\n\n\n\n\n\n\n\nConversation Starter\n\n\n\nWhat are some advantages to open, reproducible science?",
    "crumbs": [
      "Session 1 -- Chicago Heat Wave",
      "Open, Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html",
    "title": "\n                What Is Open Reproducible Science?\n            ",
    "section": "",
    "text": "Open science involves making scientific methods, data, and outcomes available to everyone. It can be broken down into several parts (Gezelter 2009) including:\n\nTransparency in data collection, processing and analysis methods, and derivation of outcomes.\nPublicly available data and associated processing methods.\nTransparent communication of results.\n\nOpen science is also often supported by collaboration.\nReproducible science is when anyone (including others and your future self) can understand and replicate the steps of an analysis, applied to the same or even new data.\nTogether, open reproducible science results from open science workflows that allow you to easily share work and collaborate with others as well as openly publish your data and workflows to contribute to greater science knowledge.\n\n \n\nAn open science workflow highlighting the roles of data, code, and workflows. Source: Max Joseph, Earth Lab at University of Colorado, Boulder.\n\n\n  \n\nWatch this 15 minute video to learn more about the importance of reproducibility in science and the current reproducibility “crisis.”",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science?"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#what-is-open-reproducible-science",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#what-is-open-reproducible-science",
    "title": "\n                What Is Open Reproducible Science?\n            ",
    "section": "",
    "text": "Open science involves making scientific methods, data, and outcomes available to everyone. It can be broken down into several parts (Gezelter 2009) including:\n\nTransparency in data collection, processing and analysis methods, and derivation of outcomes.\nPublicly available data and associated processing methods.\nTransparent communication of results.\n\nOpen science is also often supported by collaboration.\nReproducible science is when anyone (including others and your future self) can understand and replicate the steps of an analysis, applied to the same or even new data.\nTogether, open reproducible science results from open science workflows that allow you to easily share work and collaborate with others as well as openly publish your data and workflows to contribute to greater science knowledge.\n\n \n\nAn open science workflow highlighting the roles of data, code, and workflows. Source: Max Joseph, Earth Lab at University of Colorado, Boulder.\n\n\n  \n\nWatch this 15 minute video to learn more about the importance of reproducibility in science and the current reproducibility “crisis.”",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science?"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#benefits-of-open-reproducible-science",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#benefits-of-open-reproducible-science",
    "title": "\n                What Is Open Reproducible Science?\n            ",
    "section": "Benefits of Open Reproducible Science",
    "text": "Benefits of Open Reproducible Science\nBenefits of openness and reproducibility in science include:\n\nTransparency in the scientific process, as anyone including the general public can access the data, methods, and results.\nEase of replication and extension of your work by others, which further supports peer review and collaborative learning in the scientific community.\nIt supports you! You can easily understand and re-run your own analyses as often as needed and after time has passed.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science?"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#how-do-you-make-your-work-more-open-and-reproducible",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#how-do-you-make-your-work-more-open-and-reproducible",
    "title": "\n                What Is Open Reproducible Science?\n            ",
    "section": "How Do You Make Your Work More Open and Reproducible?",
    "text": "How Do You Make Your Work More Open and Reproducible?\nThe list below are things that you can begin to do to make your work more open and reproducible. It can be overwhelming to think about doing everything at once. However, each item is something that you could work towards.\n\nUse Scientific Programming to Process Data\nScientific programming allows you to automate tasks, which facilitates your workflows to be quickly run and replicated. In contrast, graphical user interface (GUI) based workflows require interactive manual steps for processing, which become more difficult and time consuming to reproduce. If you use an open source programming language like Python or R, then anyone has access to your methods. However, if you use a tool that requires a license, then people without the resources to purchase that tool are excluded from fully reproducing your workflow.\n\n\nUse Expressive Names for Files and Directories to Organize Your Work\nExpressive file and directory names allow you to quickly find what you need and also support reproducibility by facilitating others’ understanding of your files and workflows (e.g. names can tell others what the file or directory contains and its purpose). Be sure to organize related files into directories (i.e. folders) that can help you easily categorize and find what you need (e.g. raw-data, scripts, results).\n\n\nUse FAIR Data to Enhance the Reproducibility of Projects\nMake sure that the data used in your project adhere to the FAIR principles (Wilkinson et al. 2016), so that they are findable, accessible, interoperable, and re-usable, and there is documentation on how to access them and what they contain. FAIR principles also extend beyond the raw data to apply to the tools and workflows that are used to process and create new data. FAIR principles enhance the reproducibility of projects by supporting the reuse and expansion of your data and workflows, which contributes to greater discovery within the scientific community.\n\n\nProtect Your Raw Data\nDon’t modify (or overwrite) the raw data. Keep data outputs separate from inputs, so that you can easily re-run your workflow as needed. This is easily done if you organize your data into directories that separate the raw data from your results, etc.\n\n\nUse Version Control and Share Your Code (If You Can)\nVersion control allows you to manage and track changes to your files (and even undo them!). If you can openly share your code, implement version control and then publish your code and workflows on the cloud. There are many free tools to do this including Git and GitHub.\n\n\nDocument Your Workflows\nDocumentation can mean many different things. It can be as basic as including (carefully crafted and to the point) comments throughout your code to explain the specific steps of your workflow. Documentation can also mean using tools such as Jupyter Notebooks or RMarkdown files to include a text narrative in Markdown format that is interspersed with code to provide high level explanation of a workflow.\nDocumentation can also include docstrings, which provide standardized documentation of Python functions, or even README files that describe the bigger picture of your workflow, directory structure, data, processing, and outputs.\n\n\nDesign Workflows That Can Be Easily Recreated\nYou can design workflows that can be easily recreated and reproduced by others by: * listing all packages and dependencies required to run a workflow at the top of the code file (e.g. Jupyter Notebook or R Markdown files). * organizing your code into sections, or code blocks, of related code and include comments to explain the code. * creating reusuable environments for Python workflows using tools like docker containers, conda environments, and interactive notebooks with binder.\n\n\n\n\n\n\nOpen Reproducible Science - A Case Study\n\n\n\nChaya is a scientist at Generic University, studying the role of invasive grasses on fires in grassland areas. She is building models of fire spread as they relate to vegetation cover. This model uses data collected from satellites that detect wildfires and also plant cover maps. After documenting that an invasive plant drastically alters fire spread rates, she is eager to share her findings with the world. Chaya uses scientific programming rather than a graphical user interface tool such as Excel to process her data and run the model to ensure that the process is automated. Chaya writes a manuscript on her findings. When she is ready to submit her article to a journal, she first posts a preprint of the article on a preprint server, stores relevant data in a data repository and releases her code on GitHub. This way, the research community can provide feedback on her work, the reviewers and others can reproduce her analysis, and she has established precedent for her findings.\nIn the first review of her paper, which is returned 3 months later, many changes are suggested which impact her final figures. Updating figures could be a tedious process. However, in this case, Chaya has developed these figures using the Python programming language. Thus, updating figures is easily done by modifying the processing methods used to create them. Further because she stored her data and code in a public repository on GitHub, it is easy and quick for Chaya three months later to find the original data and code that she used and to update the workflow as needed to produce the revised versions of her figures. Throughout the review process, the code (and perhaps data) are updated, and new versions of the code are tracked. Upon acceptance of the manuscript, the preprint can be updated, along with the code and data to ensure that the most recent version of the paper and analysis are openly available for anyone to use.",
    "crumbs": [
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science?"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html",
    "title": "\n                Text File Formats for Earth Data Science\n            ",
    "section": "",
    "text": "Common text file formats for earth data science workflows include Markdown, text (.txt, .csv) files, and YAML (Yet Another Markup Language).",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Text File Formats for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html#text-file-formats-for-earth-data-science",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html#text-file-formats-for-earth-data-science",
    "title": "\n                Text File Formats for Earth Data Science\n            ",
    "section": "",
    "text": "Common text file formats for earth data science workflows include Markdown, text (.txt, .csv) files, and YAML (Yet Another Markup Language).",
    "crumbs": [
      "Unit 1",
      "Text File Types",
      "Text File Formats for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "",
    "text": "Tabular data are data that are stored in a row / column format. Columns (and sometimes rows) are often identified by headers, which if named correctly, explain what is in that row or column. You may already be familiar with spreadsheet tools such as Excel and Google Sheets that can be used to open tabular data."
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#what-is-tabular-data",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#what-is-tabular-data",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "",
    "text": "Tabular data are data that are stored in a row / column format. Columns (and sometimes rows) are often identified by headers, which if named correctly, explain what is in that row or column. You may already be familiar with spreadsheet tools such as Excel and Google Sheets that can be used to open tabular data."
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#tabular-data-structure",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#tabular-data-structure",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "Tabular Data Structure",
    "text": "Tabular Data Structure\nIn the example below, you see a table of values that represent precipitation for 3 days. The headers in the data include\n\nday and\nprecipitation-mm\n\n\n\n\nday\nprecipitation-mm\n\n\n\n\nmonday\n0\n\n\ntuesday\n1\n\n\nwednesday\n5\n\n\n\nThe tabular data above contains 4 rows - the first of which (row 1) is a header row and subsequent rows contain data. The table also has 2 columns."
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#common-tabular-data-file-types-.csv-and-.txt",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#common-tabular-data-file-types-.csv-and-.txt",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "Common Tabular Data File Types: .csv and .txt",
    "text": "Common Tabular Data File Types: .csv and .txt\nTabular data can be downloaded in many different file formats. Spreadsheet formats include .xls and xlsx which can be directly opened in Microsoft Excel. When you are downloading Earth and Environmental data, you will often see tablular data stored in file formats including:\n\n.csv: Comma Separated Values - This file has each column separated (delimited) by a comma.\n.txt: A basic text file. In a txt file, often the delimiter (the thing that separates out each column) can vary. Delimiters are discussed below in more detail.\n\nThese formats are text based and often can be opened in a text editor like Atom or Notepad. They can be then imported into Python using Pandas for further exploration and processing.\n\n\n\n\n\n\nData Tip\n\n\n\nThe challenge with graphical user interface (GUI) based tools like Excel is that they often have limitations when it comes to working with larger files. Further, it becomes difficult to recreate workflows implemented in Excel because you are often pressing buttons rather than scripting workflows. You can use Open Source Python to implement any workflow you might implement in Excel and that workflow can become fully sharable and reproducible!"
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#text-files-delimiters",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#text-files-delimiters",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "Text Files & Delimiters",
    "text": "Text Files & Delimiters\nA delimiter refers to the character that defines the boundary for different sets of information. In a text file, the delimiter defines the boundary between columns. A line break (a return) defines each row.\nBelow you will find an example of a comma delimited text file. In the example below, each column of data is separated by a comma ,. The data also include a header row which is also separated by commas.\nsite_code, year, month, day, hour, minute, second, time_decimal, value, value_std_dev  \nBRW,1973,1,1,0,0,0,1973.0,-999.99,-99.99\nBRW,1973,2,1,0,0,0,1973.0849315068492,-999.99,-99.99 \nBRW,1973,3,1,0,0,0,1973.1616438356164,-999.99,-99.99 \nHere is an example of a space delimited text file. In the example below, each column of data are separated by a single space.\nsite_code year month day hour minute second time_decimal value value_std_dev  \nBRW 1973 1 1 0 0 0 1973.0 -999.99 -99.99\nBRW 1973 2 1 0 0 0 1973.0849315068492 -999.99 -99.99 \nBRW 1973 3 1 0 0 0 1973.1616438356164 -999.99 -99.99 \nThere are many different types of delimiters including:\n\ntabs\ncommas\n1 (or more) spaces\n\nSometimes you will find other characters used as delimiters but the above-listed options are the most common.\n\n\n\n\n\n\nData Tip:\n\n\n\nThe .csv file format is most often delimited by a comma, hence the name."
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#earth-and-environmental-data-that-are-stored-in-text-file-format",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#earth-and-environmental-data-that-are-stored-in-text-file-format",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "Earth and Environmental Data That Are Stored In Text File Format",
    "text": "Earth and Environmental Data That Are Stored In Text File Format\nThere are many different types of data that are stored in text and tabular file formats. Below you will see a few different examples of data that are provided in this format. You will also explore some of the cleanup steps that you need to import and begin to work with the data.\n\n\n\n\n\n\nData Tip\n\n\n\nNot all text files store tabular text (character) based data. The .asc file format is a text based format that stores spatial raster data.\n\n\n\n# Import packages\nimport os\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nIf you have a url that links directly to a file online, you can open it using pandas .read_csv(). Have a look at the data below - and notice that is has:\n\n3 columns: months, precip and seasons\n12 rows: notice that the first row is numered as 0. This is because indexing in Python always starts at 0 rather than 1.\n\n\n\n\n\n\n\nData Tip\n\n\n\nYou can learn more about zero-based indexing in the chapter on lists in this textbook \n\n\n\n# Download and open the .csv file using Pandas\navg_monthly_precip = pd.read_csv(\n    \"https://ndownloader.figshare.com/files/12710618\")\n\n# View the data that you just downloaded and opened\navg_monthly_precip\n\n\n\n\n\n\n\n\nmonths\nprecip\nseasons\n\n\n\n\n0\nJan\n0.70\nWinter\n\n\n1\nFeb\n0.75\nWinter\n\n\n2\nMar\n1.85\nSpring\n\n\n3\nApr\n2.93\nSpring\n\n\n4\nMay\n3.05\nSpring\n\n\n5\nJune\n2.02\nSummer\n\n\n6\nJuly\n1.93\nSummer\n\n\n7\nAug\n1.62\nSummer\n\n\n8\nSept\n1.84\nFall\n\n\n9\nOct\n1.31\nFall\n\n\n10\nNov\n1.39\nFall\n\n\n11\nDec\n0.84\nWinter\n\n\n\n\n\n\n\nIn Pandas, this table format is referred to as a dataframe. You can view some stats about the dataframe including the number of columns and rows in the data using .info().\n\navg_monthly_precip.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 12 entries, 0 to 11\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   months   12 non-null     object \n 1   precip   12 non-null     float64\n 2   seasons  12 non-null     object \ndtypes: float64(1), object(2)\nmemory usage: 416.0+ bytes\n\n\nFinally, you can plot the data using .plot().\n\n# Plot the data\navg_monthly_precip.plot(\n    x=\"months\",\n    y=\"precip\",\n    title=\"Precipitation (mm) for One Year\",\n    xlabel='Month',\n    ylabel='Precipitation (mm)')\n# Pretty display\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen you are using an interactive notebook, any plot you create in the last line of a cell will be displayed no matter what. However – you may notice that it also displays some extra text unless you add the line plt.show() to the end. This line of code cleans up the display for you a bit.\n\n\n\n\n\n\n\n\nChallenge 1\n\n\n\n\nUse Python to determine the type of data stored in each column of avg_monthly_precip\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nShow the solution\n# Check the type of the variable avg_monthly_precip in this cell\navg_monthly_precip.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 12 entries, 0 to 11\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   months   12 non-null     object \n 1   precip   12 non-null     float64\n 2   seasons  12 non-null     object \ndtypes: float64(1), object(2)\nmemory usage: 416.0+ bytes\n\n\n\n\n\n\n\n\n\n\nChallenge 2\n\n\n\nIn most programming languages, you can customize the options for how a function or method runs by using parameters. Examples of parameters in the plot method above include:\n\nx=\"months\" - tell python which data to place on the x-axis\ny=\"precip\" - tell python which data to place on the y-axis\n\nAbove you created a line plot. You can use the kind=\"\" parameter to modify the type of plot that pandas created. You can use the color=\"\" parameter to specify a color that you wish to use for each bar in the plot.\nDo the following:\n\nAdd kind=\"bar\" to the .plot() method.\nSpecify the color of the bars using the color=\"\" parameter.\n\nRun your code and see what the final plot looks like. You can select any color that you wish to complete your plot.\n\n\n\n\n\n\nTip\n\n\n\nUse this link to find a list of colors (open it in a new browser tab!) https://het.as.utexas.edu/HET/Software/Matplotlib/api/colors_api.html\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWhen using the interactive cells to plot, you may need to click on the plot to get it to show up.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe plot below is an example of what your final plot should look like.\n\n\n\n\nShow our solution!\navg_monthly_precip.plot(\n    # Make it a bar plot\n    kind=\"bar\",\n    # Change the color of the bars using color=\n    color=\"green\",\n    x=\"months\",\n    y=\"precip\",\n    title=\"Challenge 2 Plot: Precipitation (mm) for One Year\",\n    xlabel='Month',\n    ylabel='Precipitation (mm)')\nplt.show()"
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#cleaning-tabular-text-files-so-you-can-open-them-in-python",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#cleaning-tabular-text-files-so-you-can-open-them-in-python",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "Cleaning Tabular Text Files So You Can Open Them in Python",
    "text": "Cleaning Tabular Text Files So You Can Open Them in Python\n\nMissing Data Values & Headers in Text Files\nNot all text files are as simple as the example above. Many text files have several lines of header text above the data that provide you with useful information about the data itself. This data is referred to as metadata.\nAlso, often times, there are data missing from the data that were collected. These missing values will be identified using a specific value that is hopefully documented in the metadata for that file.\nNext you will explore some temperature data that need to be cleaned up.\n\n\n\n\n\n\nData Tip\n\n\n\nYou can visit the NOAA NCDC website to learn more about the data you are using below.\n\nMiami, Florida CSV: https://www.ncdc.noaa.gov/cag/city/time-series/USW00012839-tmax-12-12-1895-2020.csv\nSeattle, Washington CSV: https://www.ncdc.noaa.gov/cag/city/time-series/USW00013895-tmax-1-5-1895-2020.csv\n\n\n\n\n# Open temperature data for Miami, Florida\nmiami_temp_url = (\n    \"https://www.ncdc.noaa.gov/cag/city/time-series\"\n    \"/USW00012839-tmax-12-12-1895-2020.csv\")\n\nmiami_temp = pd.read_csv(miami_temp_url)\nmiami_temp\n\n\n\n\n\n\n\n\n# Miami\nFlorida January-December Maximum Temperature\n\n\n\n\n0\n# Units: Degrees Fahrenheit\nNaN\n\n\n1\n# Missing: -99\nNaN\n\n\n2\nDate\nValue\n\n\n3\n194812\n85.1\n\n\n4\n194912\n84.5\n\n\n...\n...\n...\n\n\n71\n201612\n85.3\n\n\n72\n201712\n85.5\n\n\n73\n201812\n85.2\n\n\n74\n201912\n85.8\n\n\n75\n202012\n85.6\n\n\n\n\n76 rows × 2 columns\n\n\n\nNotice that the data above contain a few extra rows of information. This information however is important for you to understand.\n\nMissing: -99 – this is the value that represents the “no data” value. Misisng data might occur if a sensor stops working or a measurement isn’t recorded. You will want to remove any missing data values.\nUnits: Degrees Fahrenheit – it’s always important to first understand the units of the data before you try to interpret what the data are showing!\n\nBelow you will use all of the information stored in the header to import your data. You will also remove the first few rows of data because they don’t actually contain any data values. These rows contain metadata.\n\n\nFunction Parameters in Python\nA parameter refers to an option that you can specify when running a function in Python. You can adjust the parameters associated with importing your data in the same way that you adjusted the plot type and colors above.\nBelow you use:\n\nskiprows=: to tell Python to skip the first 3 rows of your data\nna_values=: to tell Python to reassign any missing data values to “NA”\n\nNA refers to missing data. When you specify a value as NA (NaN or Not a Number in Python), it will not be included in plots or any mathematical operations.\n\n\n\n\n\n\nData Tip\n\n\n\nYou can learn more about no data values in Pandas in the intermediate earth data science textbook\n\n\n\n# Open the Miami data skipping the first 3 rows and setting no data values\nmiami_temp = pd.read_csv(\n    miami_temp_url,\n    skiprows=3,\n    na_values=-99)\n\n# View the first 5 rows of the data\nmiami_temp.head()\n\n\n\n\n\n\n\n\nDate\nValue\n\n\n\n\n0\n194812\n85.1\n\n\n1\n194912\n84.5\n\n\n2\n195012\n83.6\n\n\n3\n195112\n83.9\n\n\n4\n195212\n84.5\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge 3\n\n\n\nNow that you have imported temperature data for Miami, plot the data using the code example above!! In your plot code, set Date as your x-axis value and Value column as your y-axis value.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSee our solution\nmiami_temp.plot(\n   x=\"Date\",\n   y=\"Value\",\n   kind=\"line\",\n   title=\"Challenge 3 Plot: Temperature (Fahrenheit) - Miami, FL\",\n   xlabel='Date',\n   ylabel='Temperature (Fahrenheit)')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge 4\n\n\n\nUse the link below to open and plot temperature data for Seattle, Washington. Don’t forget to take a look at your data before you plot it!\nhttps://www.ncdc.noaa.gov/cag/city/time-series/USW00013895-tmax-1-5-1895-2020.csv\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSee our solution here!\n# Open the Seattle data\nseattle_temp_url = (\n    \"https://www.ncdc.noaa.gov/cag/city/time-series\"\n    \"/USW00013895-tmax-1-5-1895-2020.csv\")\nseattle_temp = pd.read_csv(\n    seattle_temp_url,\n    skiprows=3,\n    na_values=-99)\n\nseattle_temp.plot(\n    x=\"Date\",\n    kind=\"line\",\n    y=\"Value\",\n    title=\"Challenge 4 Plot: Temperature (Fahrenheit) - Seattle, WA\",\n    color=\"red\",\n    xlabel='Date',\n    ylabel='Temperature (Fahrenheit)')\nplt.show()"
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#additional-resources",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#additional-resources",
    "title": "\n                Use Tabular Data for Earth Data Science\n            ",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nChapter on Pandas in the Intro to Earth Data Science textbook \nChapter on Time Series with Pandas \n\n Textbook Section on Dealing with No Data Values in Pandas"
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html",
    "title": "\n                Use GitHub to Collaborate on Open Science Projects\n            ",
    "section": "",
    "text": "GitHub.com is a website that supports version control using git. In this chapter, you will learn how to use GitHub for both version control and as a collaboration tool. Specifically, you will learn about a well-known and used collaboration model that is used in the open software community.\nAfter completing this chapter, you will be able to:\n\nExplain the difference between git and GitHub.\nDescribe the open source software collaboration model as it is implemented on GitHub.\nExplain what a pull request (PR) is and how PRs are used on GitHub.\nCreate a pull request in GitHub.\nExplain what a GitHub issue is and explain how issues are used on GitHub.\nCreate an issue in GitHub.\n\nYou will need a web browser and a GitHub.com login (username and password).",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-collaboration",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-collaboration",
    "title": "\n                Use GitHub to Collaborate on Open Science Projects\n            ",
    "section": "",
    "text": "GitHub.com is a website that supports version control using git. In this chapter, you will learn how to use GitHub for both version control and as a collaboration tool. Specifically, you will learn about a well-known and used collaboration model that is used in the open software community.\nAfter completing this chapter, you will be able to:\n\nExplain the difference between git and GitHub.\nDescribe the open source software collaboration model as it is implemented on GitHub.\nExplain what a pull request (PR) is and how PRs are used on GitHub.\nCreate a pull request in GitHub.\nExplain what a GitHub issue is and explain how issues are used on GitHub.\nCreate an issue in GitHub.\n\nYou will need a web browser and a GitHub.com login (username and password).",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#why-use-github-for-science-collaboration",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#why-use-github-for-science-collaboration",
    "title": "\n                Use GitHub to Collaborate on Open Science Projects\n            ",
    "section": "Why Use GitHub For Science Collaboration?",
    "text": "Why Use GitHub For Science Collaboration?\nIn the previous chapter, you learned about git and GitHub. Recall that git is a tool that is used to manage version control for various files. GitHub.com is a website that runs git behind the scenes.\nThe GitHub.com website also has additional functionality that extends the functionality of git. This functionality allows you to manage projects and coordinate with others on updates to code, text files, and other files in your repo. GitHub also facilitates sharing your code with the world (OR with specific people if you need to work with a smaller group of people privately).\nIn the next few lessons, you will learn more about the various GitHub tools that you can use to collaborate on projects.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-project-management-and-collaboration",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-project-management-and-collaboration",
    "title": "\n                Use GitHub to Collaborate on Open Science Projects\n            ",
    "section": "GitHub For Project Management and Collaboration",
    "text": "GitHub For Project Management and Collaboration\nThere are several tools that GitHub offers that you can use to support collaborating on projects.\n\n1. GitHub Pull Requests\nA pull request is a way that you or a colleague can suggest code changes to a repository.\nA pull request allows: * Your collaborators to see exactly what items were changed line by line in the code. * A group of people working on the code to view, review and comment on the code line by line. * You to document changes to your project which can also be clearly linked to issues that describe the need for those changes (see below).\nThe pull request is a great way to ensure that everyone is on the same page with your edits before the changes are merged or combined into the designated repository.\nPull Requests are specific to the GitHub website.\n\n \n\nThis screenshot shows a diff (i.e. difference between two files) associated with a pull request. On the LEFT, you can see the text (highlighted with red) that was modified by the proposed pull request. The words that are dark red were the ones that were deleted. On the RIGHT, you can see the text (in green) that represents the proposed changes. The words that are darker green were added. In this example, the word earthpy was replaced with matplotcheck in the contributing.rst file of the repo.\n\n\n\n\n2. GitHub Issues\nIssues in GitHub are ways to document and discuss changes needed in a repository. Issues are also ideal for managing changes in a project.\nIssues are normally text (and code) that describe something that needs to be addressed in the repository. An issue could be related to something that needs to be fixed in your code or text.\nIssues can be assigned to one or more people to work on which makes them useful for project management. You can keep track of who is working on what items in the repository.\nOnce an issue is defined (with requested changes to the code in your repo), you can then assign it to someone. At that point, you have documentation of who is working on what task. Finally, when the person assigned an issue submits a pull request to address that issue, they can link the pull request back to the original issues.\nIf you are familiar with IT (Information Technology) groups or computer help desks, this is similar to submitting a ticket, except for this ticket can be created collaboratively.\nLinking issues to pull requests is good practice and will be discussed in more detail later in this chapter.\n\n \n\nIn a GitHub workflow, there is often a central repository. This is where the code or content maintainers keep the most up to date and ‘live’ versions of the code. Changes are suggested by users using a pull request workflow where someone makes changes in a fork and then suggests that the maintainers add those changes to the central repository using a pull request. Source: Colin Williams, NEON\n\n\n\n\n3. GitHub Project Milestones\nThere are other project management tools within GitHub that you can use to manage your project as it becomes more complex, including milestones and even Trello like project boards.\nIf you are working on a large project, you can create milestones which can be used to group sets of related issues together. Milestones can have deadlines associated with them.\n\n \n\nGitHub milestones allow you to track smaller sets of tasks within a larger GitHub project.\n\n\n\n\n4. GitHub Project Management Tools\nYou can also use GitHub to manage an entire project or set of projects. You can setup boards similar to a tool like Trello to manage pull requests and milestones, who is working on what and associated deadlines.\nThese more advanced GitHub project management tools are not discussed in this chapter, but you are encouraged to check them out if you are interested in using GitHub to manage your open science projects.\n\n \n\nGitHub allows you to track projects across a single repository OR across all of the repos in your organization or account.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#putting-it-all-together-the-open-source-collaboration-and-project-management-model",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#putting-it-all-together-the-open-source-collaboration-and-project-management-model",
    "title": "\n                Use GitHub to Collaborate on Open Science Projects\n            ",
    "section": "Putting It All Together: the Open Source Collaboration and Project Management Model",
    "text": "Putting It All Together: the Open Source Collaboration and Project Management Model\n\nGitHub Issues and Pull Requests\nOver the course of this chapter, you will learn how to put together all of the pieces of the pull request workflow. To break it down, it looks something like this:\n\nIndividuals within your team identify issues that need to be addressed.\nSomeone (likely the owners of the repository) assigns team members to work on specific issues.\nTeam members work on their individual tasks.\nWhen they are ready to suggest changes, team members submit a pull request (PR) to the main repository. That pull request is reviewed by team leaders (or whomever is assigned to review).\nThe reviewers may suggest changes to the code. If so, the PR submitters go back and work on the code some more. This process may continue until everyone is happy with the PR.\nWhen the PR is approved by the reviewers, it will be merged into the code base of the repository.\n\nAll of the above steps may be repeated over and over through time, as issues are identified and contributors submit changes.\nThis is the open source collaborative software workflow and a workflow that many use to manage GitHub projects in general.\n\n \n\nGitHub supports collaboration across multiple users working on related tasks within one repository. One way that GitHub supports this collaboration is through the use of forks (i.e. copies of a central repository that each user can use to work independently on tasks). After work is completed in a fork, a user can request to have their changes applied to the central repository using a pull request. Source: Earth Lab, Alana Faller\n\n\nIn this chapter, you will first learn about and practice submitting pull requests to update repositories. In the second half of the chapter, you will be exposed to the full open source collaboration workflow, including the use of issues.",
    "crumbs": [
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "",
    "text": "When we meet for our in-person Environmental Data Science training, we’d like for all of us to be able to share our websites with each other. You don’t have to have any data science projects on it yet! But, there are a couple of reasons we are assigning this challenge:\n\nIt’s a great way to get to know each other! We hope you will show off your creativity and share about yourselves and your community on your website.\nPortfolio websites are incredibly valuable when you are looking for jobs or collaborators on data science projects. Anyone can say they know how to code – a portfolio shows it’s true.\nThought it’s not Python, you’ll need to understand some fundamentals about how code works to write your website. Code has a syntax that is more structured than written language, which you’ll be able observe that while using Markdown and HTML. Code is also built to be able to do similar tasks repeatedly by changing parameters. Keep an eye out for these concepts as you work through this challenge!\n\n\n\n\n\n\n\nTry It\n\n\n\nBefore we meet at our in-person training in Boulder, you will need to:\n\nBuild and publish your portfolio page\nWrite about yourself and your interest in environmental data science\nAdd at least one image\n\nYou can optionally add additional formatting and a theme to your webpage. We’ll work through adding a map to your page together – but you’re welcome to try it out yourself if you need an extra challenge! We’ve provided a lot of resources here to help you, including written descriptions, screenshots, and video demos. However, don’t hesitate to reach out to your faculty or us if you run into a problem.",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1a-create-a-github-account",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1a-create-a-github-account",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "STEP 1A: Create a GitHub account",
    "text": "STEP 1A: Create a GitHub account\nUse this link to create a free GitHub account.\n\n\n\n\n\n\nWarning\n\n\n\nIf you already have a GitHub account, there is no need to create a new account!",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1b-create-a-repository",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1b-create-a-repository",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "STEP 1B: Create a repository",
    "text": "STEP 1B: Create a repository\nOnce you have a GitHub account, get started by creating a new repository for your webpage. There are several ways to accomplish this task.\n\n\n\n\n\n\nWarning\n\n\n\nSometimes buttons on GitHub are blue instead of green.\n\n\n\n\n\n\n\n\n\nWhat is a repository?\n\n\n\nA GitHub repository is a collection of code, documentation, and configuration files. All changes you make in a repository will be tracked using the version control system git. You can discuss and manage your project’s work within the repository.\n\nTo do this you can:\n\nNavigate to your profile page\nClick on the dropdown arrow next to your profile photo in the upper right corner\nSelect Your profile\n\n\n\nSelect Your profile\n\n\nSelect the Repositories tab from the menu near the top of the page.\n\n\n\nSelect the Repositories tab from the menu near the top of the page.\n\n\nFrom here, you can select the green New button on the right to get started.\n\n\n\nSelect the green New button on the right to get started\n\n\nCustomize the settings:\n\nGive your repository a short and descriptive name. We recommend &lt;yourusername&gt;.github.io because it results in the simplest url for your website.\nGive your repository a description\nMake your repository Public\nYou can skip adding the gitignore file for now\nAdd a README so your repository home page (on GitHub, NOT your published website) will include your title and description\nChoose a License for your repository. Check out choosealicense.com for more information about popular options.\n\nOnce you’re done, select the green Create Repository button at the bottom of the page\n\n\n\n\n\n\n\n\nSpeak Code\n\n\n\nWhen reading code snippets, the &lt; and &gt; symbols are usually used to surround text you should replace. Do not leave the &lt; and &gt; symbols in place!. For example, in this case your repository name would be jdoe.github.io, if jdoe was your GitHub username. There’s a BIG exception to this rule when it comes to building websites – &lt; and &gt; are key characters if you are using HTML.\n\n\n\n\n\n\n\nLicenses\n\n\n\nA license, copyright, and data rights or data sovereignty are all slightly different. A license is about whether and how someone else can use the code in your repository. Copyright is about the text published on your website, and data rights are about whether and how others can use your data",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1c-create-a-new-index.md-file",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1c-create-a-new-index.md-file",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "STEP 1C: Create a new index.md file",
    "text": "STEP 1C: Create a new index.md file\nYou will create a new file called index.md that will serve as the content for your webpage. To do this you can :\n\nSelect the Add file button from the menu on the right\nSelect Create new file.\n\n\n\nSelect Create new file.\n\n\nName your new Markdown file index.md. This will make it the home page of your website. Then, add a Markdown header text to your index file, e.g.\n\n# A fabulous Earth Data Science Portfolio\n\n\n\n\n\n\nNote\n\n\n\nYou can change this text to your name or something else. This is your website, and you’ll always be able to come back and make edits!",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1d-commit-changes",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1d-commit-changes",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "STEP 1D: Commit changes",
    "text": "STEP 1D: Commit changes\nNow that you’ve created your index.md file and added some text, you’ll want to commit changes to your repository. Add an optional extended description of your changes and then select the green Commit changes button at the bottom of the page.\n\n\n\nCommit changes",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1e-build-your-webpage",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1e-build-your-webpage",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "STEP 1E: Build your webpage",
    "text": "STEP 1E: Build your webpage\nOnce you’ve created your index.md file you’re ready to build your webpage:\n\nFrom your repository, select the Settings tab from the right end of the menu.\n\n\n\nNavigate to your repository settings\n\n\nFrom here, scroll down the menu on the left and select Pages.\n\n\n\nSelect the Pages settings tab\n\n\nNow you’ll want to select the main option under the Branch heading and then select Save.\n\n\n\nSelect the main branch in your repository",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1f-check-on-your-webpage",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1f-check-on-your-webpage",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "STEP 1F: Check on your webpage",
    "text": "STEP 1F: Check on your webpage\nCheck in on your webpage to see how it is doing by opening the link https://username.github.io/ in a new tab in your web browser. Here, you’ll need to replace username with your GitHub username. Once you see your name (or whatever text you added to your index.md file in Step 2) appear as a Markdown header, then you know your webpage is working!\n\n\n\n\n\n\nNote\n\n\n\nSometimes your webpage can take a minute or so to build so be patient and refresh every 30 seconds or so until the page is done building. You can track the progress in the Actions tab.",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1g-start-adding-information-to-your-webpage",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#step-1g-start-adding-information-to-your-webpage",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "STEP 1G: Start adding information to your webpage",
    "text": "STEP 1G: Start adding information to your webpage\n\n\n\n\n\n\n\nNote\n\n\n\nReview the **Markdown Basic Syntax guide to help you format your webpage using Markdown and HTML. We also have a lesson in our Earth Data Science textbook that may be helpful.\n\nNow you’re ready to start adding some more information to your webpage. Navigate back to your repository and open the index.md file that you just created. You will edit this page by clicking on the pencil icon on the right of the menu near the top of your repository page on GitHub. You will use Markdown and Hypertext Markup Language (HTML) to add text, links, images, and other content to your webpage. Markdown and HTML are both common markup langauges, and have wide application including formatting text, report writing, and website development.\n\n\n\nEdit a file on GitHub\n\n\n\nHere you should think about adding the following information to your webpage:\n\nYour name (as a header) if you haven’t already\nA bulleted list of links to your public contact information (email, GitHub account, LinkedIn account, social media accounts, etc.)\nYour educational and professional background\nA biographical paragraph about yourself\nWhat you’re excited about learning about Earth Data Science\nQuestions that you’d like to answer using Earth Data Science\n\nYou should also plan to add a photo of yourself and/or where you live. We’ll go over how to add and customize images on your page in the next two lessons.\n\n\n\n\n\n\nWarning\n\n\n\nAlways remember to commit changes so that your updated content gets added to your webpage.",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#images-make-your-website-easier-to-understand",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#images-make-your-website-easier-to-understand",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "Images make your website easier to understand",
    "text": "Images make your website easier to understand\nThe following code will display an image from the internet using Markdown:\n![Mississippi Delta](https://deltax.jpl.nasa.gov/img/delta-google-earth.jpg)\n\n\n\nMississippi Delta\n\n\n\nImage source: image of the Mississippi Delta from the Jet Propulsion Laboratory DeltaX project\n\n\n\n\n\n\n\nImportant\n\n\n\nAlways make sure you have permission to use images, and give credit to your image sources. Most images are fair to use for education (teaching, research, and study), as long as you give credit to your source. If you later on decide to use your portfolio to make money (for example, if you use it as marketing materials), then you should reconsider what images you are using.\nLearn more about fair use from the CU Library Fair Use page.",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#adding-your-own-images",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#adding-your-own-images",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "Adding your own images",
    "text": "Adding your own images\nIncluding images from the web is the easiest way to add images to your site, but you will probably want to include your own images! There are three common ways that you can add images you have taken or created to your website:\n\nUploading an image to your portfolio repository on GitHub\nUploading an image elsewhere and then linking to it\nGenerate an image with code and render it into your website\n\nWe’ll try out the first two options in this lesson. But first, you need to understand the difference between absolute and relative URLs on the web.\n\nAbsolute and relative links\nOn your website, you can link to files on the web, or you can link to local files.\nAbsolute URLs are on the web, and so they begin with something like http:// or https://. When you are using an absolute link, you don’t need to worry about your file structure – for example, what folder your Markdown file is in. If you move things around in your project the link will still work.\n\n\n\n\n\n\nWarning\n\n\n\nLinks on the internet aren’t forever. If you are using an absolute link, you should check on it occasionally to make sure it’s still there. You can also select image sources that are more reliable long term, or even an image with a permanent link or Digital Object Identifier (DOI).\n\n\nRelative links are to files that are local, or in the same location as your website. Keep in mind that what is local can change if you keep multiple copies of your repository, such as one on GitHub and one on your computer. Relative links, because they will change depending on the file and directory structure of your website. If you are working on your own computer, you can link to a file that isn’t in your repository, and then it won’t show up when you deploy your site.\n\n\n\n\n\n\n\nWhat is a directory?\n\n\n\nDirectory is another word for a folder on your computer – you can organize files by putting them in directories.\n\nThere’s a couple of special characters when using relative links. Suppose you have a Markdown file in a pages directory, and an image you want to display in an img folder:\n&lt;username&gt;.github.io/\n├── README.md\n├── pages/\n│   └── index.md\n└── img/\n    └── cool_satellite_image.jpeg\n\n\n\n\n\n\n\nSpeak Code: File Trees\n\n\n\nIn the text diagram to the left, indentation and lines are being used to show which files are inside which folders – for example the index.md file is indented under the pages directory and connected by a line, indicating that index.md is inside pages.\n\nWhen you are working in index.md, you are in the pages directory. If you want to go up a directory to &lt;username&gt;.github.io from pages, you can use ... For example, ../img/cool_satellite_image.jpeg.\nYou can also make website paths starting from the root directory of the site, in this case &lt;username&gt;.github.io, by starting the path with a slash character, /:\n\n\n\nKeyboard highlighting the slash key\n\n\nThe equivalent link to ../img/cool_satellite_image.jpeg would be /img/cool_satellite_image.jpeg.\n\n\nUpload an image to GitHub\n\nSTEP 1: Create an empty image directory on GitHub\nIt’s important to keep your files organized in a project like a website. Before uploading any images, you should make a place to put them. By convention, images in most websites are kept in the img directory, but you can name it whatever you want.\ngit, the system used by GitHub to keep track of changes to files, doesn’t keep a record of directories without any files in them, and as of now you can’t upload an image to a directory that doesn’t exist yet. This puts us in a bit of a pickle! Fortunately, there’s a common solution – we’ll create an empty text file named .keep in the new directory.\n\n\n\n\n\n\n\nSpeak Code – why .keep?\n\n\n\nYou could name your empty placeholder file anything you want. However, there are two good reasons to use .keep as your filename. First, files that start with a dot (.) are hidden in unix-based operating systems like linux and MacOS, which helps avoid clutter when you are looking at your files. Second, adhering to the convention means that anyone else looking at your repository will know what the .keep file is doing there.\n\nTo create a img/.keep file, go to the main page of your website repository on GitHub and click the Code tab. Then, find the + menu button on the upper right and select Add a file from the dropdown:\n\n\n\nClick add a file\n\n\nType `img/.keep into the name field and then commit your changes:\n\n\n\nName the file img/.keep and commit\n\n\n\n\n\nClick Commit\n\n\n\n\n\nClick Commit again to confirm\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWhen you type img/, GitHub will automatically make a folder, so only .keep will be visible in the text box.\n\n\n\n\nSTEP 2: Upload your image to the img directory\nFirst, make sure that the name of your image file on your computer is descriptive and machine-readable (doesn’t contain any spaces or special characters other than _, -, or .). You won’t be able to rename your file once you upload it to GitHub.\nYou should now be in the img directory in your repository. If note, you can get there from the Code tab in your website repository, by clicking on the img directory in the files. From there, click the Add file menu in the upper right, but this time select Upload files:\n\n\n\nClick on Add file, then Upload files\n\n\nDrag your image file, or browse and select it.\n\n\n\nCommit file upload\n\n\nFinally, write a message and click Commit changes: \n\n\n\nOther places to host images\nGitHub has a couple of limitations when it comes to hosting images:\n\nThe site will not allow you to upload files larger than 100MB\nIf you make changes to an image file, GitHub will keep all the previous versions, which can make your repository unwieldy to download. If you are generating image files yourself and changing them frequently, consider hosting them somewhere else.\n\nSo, where can you host images that you have taken or generated? There are a few options:\n\nYou can use the Free Image Hosting service to upload images without an account or giving up any information about yourself. Note that while you retain ownership of these images you are granting a license to Free Image Hosting to use them however they want.\nFor a final version, you can use a research hosting service like figshare to upload images and get code to embed them in your website.\nIf you want to use photos you have already uploaded to social media, you can usually get a direct link by right-clicking on the image and selecting Copy Image Link.\nYou will likely find that most file storage services such as Google Drive and Dropbox don’t provide you with a direct link to images that you can use in a website. You can look for instructions on generating direct links for these files, but they are often unsupported and could change without warning.\nThere’s another way of hosting on GitHub that doesn’t have the same drawbacks when it comes to large files. You can include files in a release, which creates a direct link to files, but does not attempt to track changes. To get started, follow the instructions from GitHub documentation. Note that once you have a release you can add additional files to it.\n\n\n\n\n\n\n\nWarning\n\n\n\nBy uploading images to social media or other hosting services, you are sometimes giving up your rights to the image, or granting. Photo apps like Flickr are usually better bets, since they are built for photographers with copyright protection in mind. But be sure to read the fine print when uploading material that is sensitive to you personal or to your community – you can look for the term ownership rights in the Terms and Conditions of whatever sites you use.",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#the-building-blocks-of-the-web",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#the-building-blocks-of-the-web",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "The building blocks of the web",
    "text": "The building blocks of the web\nMost web pages are built using three key technologies:\n\nHyper-Text Markup Language (HTML) includes and structures the content\nCascading Style Sheets (CSS) controls how the page looks\nJavascript (JS) controls what the page does\n\nWhen using GitHub Pages, you can rely on GitHub to translate Markdown to HTML before putting it on the web using a system called Jekyll. You can see the result by:\n\nNavigate to your portfolio page on the internet\nRight-click anywhere on the page\nSelect an option like Inspect or Web Developer Tools, depending on your browser.\n\nYou should now see the source code for your webpage in a new panel. What do you notice about your content? How is it different from what you wrote?\n\n\n\nWeb developer tools\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also control CSS and JS to a limited extent on GitHub Pages. However, we recommend sticking with the CSS and JS supplied by a Jekyll theme created by a designer. It’s hard to make a website that looks good from scratch. We’ll get into how to add a theme using Jekyll later on.",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#use-html-to-add-features-that-arent-available-in-markdown",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#use-html-to-add-features-that-arent-available-in-markdown",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "Use HTML to add features that aren’t available in Markdown",
    "text": "Use HTML to add features that aren’t available in Markdown\nWhen creating your webpage, you might want to do a couple of things with your content that most types of Markdown can’t do, such as:\n\nSpecify the size of an image\nControl whether links open up in a new tab\nEmbed videos and other web content\nChange colors, fonts, or font sizes in one section of your page\n\nHTML (Hyper-Text Markup Language), does have the ability to do all those things and more.\n\nMake sure to format your HTML code so that it is readable\nOne great thing about Markdown is that it is both human-readable and machine-readable. It’s a little harder to tell what is going on with HTML, especially if it is formatted poorly. For example, take a look at some Markdown and its equivalent in HTML. Unlike Markdown, the computer doesn’t care how we use whitespace when formatting HTML. We can make HTML easier to read by adding whitespace and new lines:\n\nMarkdownMessy HTML (Don’t do this!)Cleaner HTML\n\n\n1# A fabulous Earth Data Science Portfolio\n\n2![Super-cool satellite imagery](/img/cool_satellite_image.jpeg)\n\nSome text and [a link](https://www.my_link.org) and:\n\n  * A\n  * Bulleted\n  * List\n\n1\n\nThe will be a level 1 header because it begins with one #\n\n2\n\nThis will be an image since it starts with a !\n\n\n\n\n&lt;h1&gt;A fabulous Earth Data Science Portfolio&lt;/h1&gt;&lt;img \nsrc=\"/img/cool_satellite_image.jpeg\" alt-text=\"Super-cool satellite imagery\"&gt;\n&lt;p&gt;Some text and &lt;a \nhref=\"https://www.my_link.org\"&gt;a link&lt;/a&gt; \nand:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A&lt;/li&gt;&lt;li&gt;Bulleted\n&lt;/li&gt;&lt;li&gt;List&lt;/li&gt;&lt;/ul&gt;\n\n\n1&lt;h1&gt;A fabulous Earth Data Science Portfolio&lt;/h1&gt;\n\n2&lt;!-- Comments help the reader understand your code --&gt;\n&lt;img \n  src=\"/img/cool_satellite_image.jpeg\" \n3  alt=\"Super-cool satellite imagery\" /&gt;\n\n&lt;p&gt;\n  Some text and &lt;a href=\"https://www.my_link.org\"&gt;a link&lt;/a&gt; \n  and:\n&lt;/p&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;A&lt;/li&gt;\n    &lt;li&gt;Bulleted&lt;/li&gt;\n    &lt;li&gt;List&lt;/li&gt;\n&lt;/ul&gt;\n\n1\n\nThis is a level 1 header, since it is surrounded by h1 tags.\n\n2\n\nComments won’t appear on your web page\n\n3\n\nThe img tag will be an image.\n\n\n\n\n\n\n\nHTML syntax for Markdown users\nEvery coding language has some special characters and structures, known as the syntax. When you render or run code, the syntax gets interpreted into some kind of behavior. For example, in Markdown, the syntax # gets interpreted as the start of a level 1 header.\nHTML is less human-readable than Markdown. To use it effectively, you will need to understand some key vocabulary about the syntactic elements of HTML.\n\nTags\n\n\n\n\n\n\n\nSpeak Code\n\n\n\nRemember that the &lt; and &gt; symbols are usually used to surround text you should replace with something applicable to you and your project. There’s a BIG exception when it comes to building websites – &lt; and &gt; are key special characters if you are using HTML, the markup language used on most websites. So, if the code sample is HTML, you should leave the angle brackets &lt; and &gt; in.\n\nNotice that most elements are surrounded by tags enclosed in angle brackets (&lt; and &gt;). For example, when we include a header 1, we do that with the following code:\n1&lt;h1&gt;\n2  A fabulous Earth Data Science Portfolio\n3&lt;/h1&gt;\n\n1\n\nStart with the opening tag for h1 (header level 1), then\n\n2\n\nPlace the text of the header in between the tags.\n\n3\n\nEnd with the closing tag, which match the opening tag plus a slash (/)\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf there is no text that needs to go between two HTML tags, you don’t need a closing tag. Instead, you can end the opening tag with /&gt; to indicate that there’s no content. For example, take another look at the image HTML code:\n&lt;img \n  src=\"/img/cool_satellite_image.jpeg\" \n  alt=\"Super-cool satellite imagery\" /&gt;\n\n\n\n\nParameters\nIn addition to marking the beginning and end of HTML elements, tags can contain addition information about how to display their contents. This extra information is known as parameters. For example, let’s revisit the code above for an HTML link, which contains the href parameter:\n1&lt;a href=\"https://www.my_link.org\"&gt;\n  a link\n&lt;/a&gt;\n\n1\n\nParameters are included inside the opening tag. The parameter name (href) must be followed by and equals sign =, and the parameter value (https://www.my_link.org) must be surrounded by quotation marks.\n\n\n\n\n\nInclude HTML directly in Markdown\nYou can add HTML elements into your Markdown documents. There is no need when using GitHub Pages to write entire documents in HTML; you can directly substitute HTML elements for Markdown elements where needed. For example,\n\n\nAdjust the size of images\nSay you have written the following Markdown to display an image:\n![Super-cute pika!](/img/pika.jpg)\n\n\nImage source: Wikipedia\n\nUnfortunately, the image is taking up the entire width of the section. You can’t adjust the size with GitHub Markdown alone, but you can replace the image with HTML and control the width:\n&lt;img \n  src=\"/img/pika.jpg\" \n  alt=\"Super-cute pika!\" \n  width=\"25%\"&gt;\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you set both the width and the height of an image, your image will become distorted:\n&lt;img \n  src=\"/img/pika.jpg\" \n  alt=\"Super-cute pika!\" \n  height=\"100px\" \n  width=\"400px\"&gt;\n\n\n\nWhen setting image height and width, there are different units you can use:\n\n\n\n\n\n\n\nUnit\nMeaning\n\n\n\n\npx\nA pixel is the smallest item that can be displayed on your screen\n\n\nem or rem\nThese units are relative to your font size (e.g. the width of an m)\n\n\n%\nA percentage of the element that contains the image\n\n\n\nWhen using px, keep in mind that others may be viewing your webpage on different devices (e.g. phone vs. computer). px units are pegged to the resolution of the screen, so this can result in vastly different sizes on different devices. Furthermore, rem measurements will change if the viewer zooms in or out of the page in their browser, making them more accessible.\n\n\n\n\n\n\nTip\n\n\n\nYou can simulate what your webpage will look like on another device using the Web Developer Tools. Usually there’s a button that looks like a screen in the upper right.\n\n\n\nWeb developer tools with the device simulator highlighted\n\n\n\n\n\n\nOpen external links in a new tab\nWhen you are linking to someone else’s webpage, often you want that page to open in a new tab or window so your reader doesn’t leave your webpage.\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that some web designers and readers don’t like this behavior and would prefer that the reader decide for themselves whether they open a new tab or not. But it’s a pretty widespread practice, so it’s up to you how you want your webpage to work.\n\nThere’s no way to do this in most flavors of Markdown, but if you write your link in HTML you can at a target=\"_blank\" parameter:\n&lt;a \n  href=\"https://www.my_link.org\"\n  target=\"_blank\"&gt;\n  a link\n&lt;/a&gt; \n\n\nEmbedding content from other webpages\nMarkdown is great for text and images, but what if you want to content that is hosted elsewhere, like a video? HTML lets you load content from other webpages (also known as embedding content) using an element called an iframe:\n&lt;iframe \n  width=\"467\" height=\"831\" \n  src=\"https://www.youtube.com/embed/Oly8f4h5C78\" \n  title=\"Natural Habitat Shorts- Chipmunks have cheek pouches used to store food. 🐿🥜\" \n  frameborder=\"0\" \n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" \n  allowfullscreen&gt;\n&lt;/iframe&gt;\n\n\nUsually the website that hosts your video will already have embed code prepared for you. For example, on YouTube you can find the embed code below the video:\n\n\nStyling text\nStyle on a webpage refers to how the page looks. For example, you might want to change colors, fonts, or spacing on your page. Usually this would be done with CSS or with pre-styled theme elements. However, if you doing something small, you can use the style parameter in an HTML tag, as in the following examples:\n\n\n\n\n\n\nChange the \n&lt;span style=\"color: red; font-size: 2rem\"&gt; \n  color and font size\n&lt;/span&gt;.\nChange the  color and font size.\n\n\n\n\n\n\nTip\n\n\n\nWe are using the span tag here instead of the p (paragraph) tag, so that HTML will not put the text on a new line.\n\n\n\n\n\n\n\n\n\n\n\nAdd a border to an image:\n\n&lt;img \n  src=\"/img/cool_satellite_image.jpeg\" \n  alt=\"Super-cool satellite imagery\" \n  height=\"100rem\"\n  style=\"border: dashed 5px blue;\"&gt;",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#make-attractive-websites-with-themes",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#make-attractive-websites-with-themes",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "Make attractive websites with themes",
    "text": "Make attractive websites with themes\nWebsite themes are a system for applying a particular design to your web content. They consist of acollection of website configuration files, content templates, and style files that control how a website looks, but can be filled in with any content. Themes are great because: * Your website will immediately look and function like the theme * Most themes allow you to change style elements (like colors and fonts), and store data (like your name and email address) in a central location. * Themed websites will most likely work on lots of different devices, like phones, tablets, and computers. You can double-check if your theme mentions being adaptive or responsive, bu most themes these days are. * Some themes support interactive components like photo carousels or lightboxes without needing to write a lot of code\n\n\nJekyll is a system for building websites from Markdown, HTML, and CSS. In fact, Jekyll is the system that GitHub Pages uses to deploy websites. This means that we can take advantage of free Jekyll themes to make any website look great.\n\n\n\n\n\n\nCheck out our themes demo video!",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#jekyll-plays-well-with-github-pages",
    "href": "pages/03-git-github/03-github-portfolio/portfolio-stars.html#jekyll-plays-well-with-github-pages",
    "title": "\n                Build your Environmental Data Science portfolio\n            ",
    "section": "Jekyll plays well with GitHub Pages",
    "text": "Jekyll plays well with GitHub Pages\n\nSupported themes\nWe recommend starting out by using one of the GitHub Pages supported themes. Follow these instructions from GitHub.\nEven if you don’t ultimately end up using one of these themes, you can make sure that everything is working with one of these themes.\n\n\nRemote themes\nGitHub Pages allows you to add any Jekyll theme available on GitHub to your site with a configuration file.\nTo do this you can: 1. Choose the Jekyll theme you want to use (here are some examples). Note that some themes work more seamlessly than others, so you may have to try more than one. 2. Preview the theme by clicking Live Demo on jekyllthemes.io, or searching the GitHub README for a preview link. 3. Follow the instructions from GitHub on how to apply the theme using a _config.yml file. 4. Go to the GitHub repository for the theme by clicking on the Get THEME on GitHub button on jekyllthemes.io. Follow any instructions about customizing things like your name or the title of your webpage.\n\n\n\nSo what is YAML?\nThe _config.yml file is written in YAML, a human-readable format for structured information (lists and key/value pairs). Learn more about YAML on their website\nThe _config.yml file that you created to add a theme can also sometimes be used to change the title of your website from the default (the name of your repository). Check out the README for your theme to see what parameters are available For example, and example _config.yml file for the minimal theme looks like:\ntitle: J. Doe's Awesome Portfolio Website\ndescription: Check out my projects!\nlogo: img/headshot.png\nremote_theme: pages-themes/minimal@v0.2.0\n\n\n\n\n\n\nWarning\n\n\n\nYou may need or want to add a _data/data.yml file or your own templates in _layouts in addition to the _config.yml file, depending on your theme. You will need to read the README for the theme you are using to see what you can customize. We recommend copying any example configuration files from the theme repository, and then modifying them to meet your needs.",
    "crumbs": [
      "UNIT 0: Build Your Online Portfolio",
      "Build your Environmental Data Science portfolio"
    ]
  },
  {
    "objectID": "notebooks/08-habitat/habitat.html",
    "href": "notebooks/08-habitat/habitat.html",
    "title": "\n                Habitat Suitability Coding Challenge\n            ",
    "section": "",
    "text": "In this project, you will create a habitat suitability model for Sorghastrum nutans, a grass native to North America. In the past 50 years, its range has moved northward. The model will be based on combining multiple data layers related to soil, topography, and climate. You will also demonstrate the coding skills covered in this class by creating a modular, reproducible workflow for the model."
  },
  {
    "objectID": "notebooks/08-habitat/habitat.html#our-changing-climate-is-changing-where-key-grassland-species-can-live-and-grassland-management-and-restoration-practices-will-need-to-take-this-into-account.",
    "href": "notebooks/08-habitat/habitat.html#our-changing-climate-is-changing-where-key-grassland-species-can-live-and-grassland-management-and-restoration-practices-will-need-to-take-this-into-account.",
    "title": "\n                Habitat Suitability Coding Challenge\n            ",
    "section": "",
    "text": "In this project, you will create a habitat suitability model for Sorghastrum nutans, a grass native to North America. In the past 50 years, its range has moved northward. The model will be based on combining multiple data layers related to soil, topography, and climate. You will also demonstrate the coding skills covered in this class by creating a modular, reproducible workflow for the model."
  },
  {
    "objectID": "notebooks/08-habitat/habitat.html#you-will-create-a-reproducible-scientific-workflow",
    "href": "notebooks/08-habitat/habitat.html#you-will-create-a-reproducible-scientific-workflow",
    "title": "\n                Habitat Suitability Coding Challenge\n            ",
    "section": "You will create a reproducible scientific workflow",
    "text": "You will create a reproducible scientific workflow\nYour workflow should:\n\nDefine your study area: Download the USFS National Grassland Units and select your study site(s). Undergraduate students may choose one grassland; graduate students must choose AT LEAST 2.\nFit a model: For each grassland:\n\nDownload model variables as raster layers covering your study area envelope, including:\n\nAt least one soil variable from the POLARIS dataset\nElevation from the SRTM (available from the APPEEARS API)\nAt least one climate variable from the MACAv2 dataset, accessible from Climate Toolbox. *Undergraduate students may download a single year and scenario; Graduate students should download at least two)\n\nCalculate at least one derived topographic** variable** (slope or aspect) to use in your model. You probably will wish to use the xarray-spatial library, which is available in the latest earth-analytics-python environment (but will need to be installed/updated if you are working on your own machine). Note that calculated slope may not be correct if you are using a CRS with units of degrees; you should re-project into a projected coordinate system with units of meters, such as the appropriate UTM Zone.\nHarmonize your data - make sure that the grids for each of your layers match up. Check out the ds.rio.reproject_match() method from rioxarray.\nBuild your model. You can use any model you wish, so long as you explain your choice. However, if you are not sure what to do, we recommend building a fuzzy logic model (see below).\n\nPresent your results in at least one figure for each grassland/climate scenario combination."
  },
  {
    "objectID": "notebooks/08-habitat/habitat.html#if-you-are-unsure-about-which-model-to-use-we-recommend-using-a-fuzzy-logic-model",
    "href": "notebooks/08-habitat/habitat.html#if-you-are-unsure-about-which-model-to-use-we-recommend-using-a-fuzzy-logic-model",
    "title": "\n                Habitat Suitability Coding Challenge\n            ",
    "section": "If you are unsure about which model to use, we recommend using a fuzzy logic model",
    "text": "If you are unsure about which model to use, we recommend using a fuzzy logic model\nTo train a fuzzy logic habitat suitability model:\n\nResearch S. nutans, and find out what optimal values are for each variable you are using (e.g. soil pH, slope, and current climatological annual precipitation).\nFor each digital number in each raster, assign a value from 0 to 1 for how close that grid square is to the optimum range (1=optimal, 0=incompatible).\nCombine your layers by multiplying them together. This will give you a single suitability number for each square.\nOptionally, you may apply a threshold to make the most suitable areas pop on your map."
  },
  {
    "objectID": "notebooks/08-habitat/habitat.html#you-will-be-evaluated-on-your-code-and-how-you-present-your-results",
    "href": "notebooks/08-habitat/habitat.html#you-will-be-evaluated-on-your-code-and-how-you-present-your-results",
    "title": "\n                Habitat Suitability Coding Challenge\n            ",
    "section": "You will be evaluated on your code AND how you present your results",
    "text": "You will be evaluated on your code AND how you present your results\nI will use the following rubric:\n\n\n\n\n\n\n\nDescription\nMaximum Points\n\n\n\n\nGITHUB REPOSITORY\n30\n\n\nProject is stored on GitHub\n3\n\n\nThe repository has a README that introduces the project\n5\n\n\nThe README also explains how to run the code\n5\n\n\nThe README has a DOI badge at the top\n5\n\n\nThe repository has a LICENSE\n2\n\n\nRepository is organized and there are not multiple versions of the same file in the repository\n5\n\n\nRepository files have machine and human-readable names\n5\n\n\nCODE\n120\n\n\nThe code runs all the way through using the instructions from the README\n10\n\n\nThe code follows the PEP-8 style standard\n10\n\n\nThe code is well-documented with comments\n10\n\n\nThe code uses functions and/or loops to be DRY and modular\n10\n\n\nAny functions have numpy-style docstrings\n10\n\n\nThe code makes use of conditionals to cache data and/or computations, making efficient use of computing resources\n10\n\n\nThe code contains a site map for the US National Grassland(s) used (1 ugrad, 2+ grad)\n10\n\n\nFor each grassland (ugrad 1, grad 2+), the code downloads at least model variables as raster layers: soil, elevation, and climate (ugrad 1, grad 2 scenarios)\n10\n\n\nThe code correctly calculates a derived topographic variable\n10\n\n\nThe code harmonizes the raster data\n10\n\n\nFor each climate scenario (1 ugrad, 2+ grad), the code builds a habitat suitability model\n10\n\n\nFor each grassland/climate scenario combination, the code produces at least one (sub)figure displaying the results\n10\n\n\nAny unfinished components have detailed pseudocode or a flow diagram explaining how they could be finished in the future, and or a complete bug report explaining the problem\nup to 90 points, in place of other categories\n\n\nWRITTEN ANALYSIS\n50\n\n\nThe notebook contains a project description\n10\n\n\nThe notebook contains a researched site description\n10\n\n\nThe notebook contains a data description and citation for each data source\n10\n\n\nThe notebook contains a model description\n10\n\n\nThe notebook contains a headline and description for each figure\n10"
  },
  {
    "objectID": "notebooks/08-habitat/habitat.html#keep-your-eyes-out-for-videos",
    "href": "notebooks/08-habitat/habitat.html#keep-your-eyes-out-for-videos",
    "title": "\n                Habitat Suitability Coding Challenge\n            ",
    "section": "Keep your eyes out for videos!",
    "text": "Keep your eyes out for videos!\nI won’t release a full demo of this, but you will have videos on writing pseudocode, accessing data sources, and any tricky problems that come up."
  },
  {
    "objectID": "notebooks/02-flood/flood-download-stars.html",
    "href": "notebooks/02-flood/flood-download-stars.html",
    "title": "\n                Download streamflow data\n            ",
    "section": "",
    "text": "US streamflow data are freely available online from the National Water Information Service (NWIS). These data are collected by the US Geological Survey by comparing the height, or stage of a river or stream with a series of flow measurements.\n\n\n\n\n\n\n\n\nRead More\n\n\n\nRead more about how the USGS collects streamflow data at the USGS Water Science School site\n\n\nYou’ll start out by previewing the data online so that you can get a feel for what it looks like. Then, you’ll access the data using the dataretrieval Python package maintained by the USGS.\n\n\n\n\n\n\nTry It\n\n\n\nTo preview the data, follow along with the screenshots below to complete these steps:\n\nReturn to the Cheyenne River near Wasta site page.\nChange the dates on the data.\nTry downloading some data with your web browser to see what it looks like\n\n\n\n\n\n\n\n\nReturn to the Cheyenne River near Wasta site page\n\n\n\n\n\n\n\n\nScroll down and switch the data type to Discharge instead of Gage Height\n\n\n\n\n\n\n\n\nScroll up and select the dates you want to look at.\n\n\n\n\n\n\n\n\nTake a look at your data. What do you see? You can try changing some dates as well.\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat do you notice about this data? You can think about:\n\nWhat type of data is it?\nWhat dates in 2019 had the worst flooding?\nHow unusual were the 2019 floods?\nDoes anything about the data seem unusual to you?\n\n\n\n\n\n\n Open up the file you downloaded – it should automatically open in your web browser. Does this look like streamflow data to you?\n\n\n\n\n\n\nRead More\n\n\n\nCheck out the NWIS documentation to find out more about how these data are formatted.\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat do you notice about the data? Write down your thoughts on:\n\nWhat separator or delimiter does the data use to separate columns?\nWhat should the data types of each column be?\nWhich column contains the streamflow data?\nDo you need to skip any rows that don’t contain data? How can you identify those rows?\nDid you notice anything else?\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nDescribe your data. Include the following information:\n\nA 1-2 sentence description of the data\nData citation\nWhat are the units?\nWhat is the time interval for each data point?\nIs there a “no data” value, or a value used to indicate when the sensor was broken or didn’t detect anything? (These are also known as NA, N/A, NaN, nan, or nodata values)",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "Download streamflow data"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-download-stars.html#the-national-water-information-service",
    "href": "notebooks/02-flood/flood-download-stars.html#the-national-water-information-service",
    "title": "\n                Download streamflow data\n            ",
    "section": "",
    "text": "US streamflow data are freely available online from the National Water Information Service (NWIS). These data are collected by the US Geological Survey by comparing the height, or stage of a river or stream with a series of flow measurements.\n\n\n\n\n\n\n\n\nRead More\n\n\n\nRead more about how the USGS collects streamflow data at the USGS Water Science School site\n\n\nYou’ll start out by previewing the data online so that you can get a feel for what it looks like. Then, you’ll access the data using the dataretrieval Python package maintained by the USGS.\n\n\n\n\n\n\nTry It\n\n\n\nTo preview the data, follow along with the screenshots below to complete these steps:\n\nReturn to the Cheyenne River near Wasta site page.\nChange the dates on the data.\nTry downloading some data with your web browser to see what it looks like\n\n\n\n\n\n\n\n\nReturn to the Cheyenne River near Wasta site page\n\n\n\n\n\n\n\n\nScroll down and switch the data type to Discharge instead of Gage Height\n\n\n\n\n\n\n\n\nScroll up and select the dates you want to look at.\n\n\n\n\n\n\n\n\nTake a look at your data. What do you see? You can try changing some dates as well.\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat do you notice about this data? You can think about:\n\nWhat type of data is it?\nWhat dates in 2019 had the worst flooding?\nHow unusual were the 2019 floods?\nDoes anything about the data seem unusual to you?\n\n\n\n\n\n\n Open up the file you downloaded – it should automatically open in your web browser. Does this look like streamflow data to you?\n\n\n\n\n\n\nRead More\n\n\n\nCheck out the NWIS documentation to find out more about how these data are formatted.\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat do you notice about the data? Write down your thoughts on:\n\nWhat separator or delimiter does the data use to separate columns?\nWhat should the data types of each column be?\nWhich column contains the streamflow data?\nDo you need to skip any rows that don’t contain data? How can you identify those rows?\nDid you notice anything else?\n\n\n\n\n\n\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nDescribe your data. Include the following information:\n\nA 1-2 sentence description of the data\nData citation\nWhat are the units?\nWhat is the time interval for each data point?\nIs there a “no data” value, or a value used to indicate when the sensor was broken or didn’t detect anything? (These are also known as NA, N/A, NaN, nan, or nodata values)",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "Download streamflow data"
    ]
  },
  {
    "objectID": "notebooks/02-flood/flood-download-stars.html#access-the-data-with-code",
    "href": "notebooks/02-flood/flood-download-stars.html#access-the-data-with-code",
    "title": "\n                Download streamflow data\n            ",
    "section": "Access the data with code",
    "text": "Access the data with code\nOne way to access data is through an Application Programming Interface, or API. Luckily for us, the USGS has written a Python library to interface with the NWIS API, called dataretrieval. The dataretrieval.nwis submodule has a function or command for downloading stream discharge data from the NWIS!\n\n\n\n\n\n\nTry It\n\n\n\nImport the dataretrieval library.\nIf you want to store the data so that you are not dependant on the API to keep working, you will also need the earthpy library for managing local files and the pandas library for loading a csv file. If you are going that route, import the libraries you need, making sure to follow PEP-8 guidelines by keeping your libraries in alphabetical order.\n\n\n\n# Import libraries\n\n\n\nSee our solution!\n# Import libraries\nimport dataretrieval\nimport earthpy\nimport pandas as pd\n\n\nNext, we’ll set some parameters. You can use these to customize your workflow.\n\nid = 'stars'\nsite_name = 'Cheyenne River'\nyear = 2019\ndata_dir = 'cheyenne-river-flood'\ndownload_title = 'Cheyenne River Flood Frequency'\ncsv_filename = 'cheyenne_streamflow_1934_2024.csv'\n\n\n\n\n\n\n\nTry It\n\n\n\nThe sample code below needs some changes from you before it will run.\n\nFind the site number on the site page for the Cheyenne River near Wasta gage.\nDetermine what date range you would like to download. For right now, start by downloading just the data\nDefine variables for the site number, start date, and end date to match the rest of the code. You can find the site number on the site page.\nDownload the data using the provided code.\n\nNote that the dataretrieval.nwis.get_discharge_measurements() function returns data in a format called a pandas DataFrame, as well as metadata in a format called a NWIS_metadata. That’s why we need two variables to store the results.\n\n\n\n\n\n\n\n\nLooking for an Extra Challenge?\n\n\n\nTry to write some code:\n\nStore the data on your computer\nOnly download the data if it’s not on the computer already.\nLoad the data from your computer.\n\n\n\n\n\n\n\n\n\n\nWater Years\n\n\n\nWhen we look at streamflow data, we usually try to download water years rather than calendar years. The water year in the Northern Hemisphere starts on October 1 of the previous calendar year and runs through September 31. For example, water year 2018 (or WY2018) runs from October 1, 2017 to September 31, 2018.\nWhy is the water year different? In most of the Northern Hemisphere, the snowpack is as low as it gets around October 1, and begins to build up for the winter at that point. When we’re keeping track of water fluxes, it’s easiest if we don’t need a count on how much water is in the snow pack at the start of the year.\n\n\n\n\n\n\n\nReflect and Respond\n\n\n\nWhat parameter would you change in the code below if you wanted to switch locations?\n\n\n\n# Define download parameters HERE\n\n# Get discharge data and metadata from NWIS\nnwis_df, meta = dataretrieval.nwis.get_discharge_measurements(\n    sites=site_number,\n    start=start_date,\n    end=end_date)\nnwis_df\n\n\n\nSee our solution!\n# Define download parameters\nsite_number = '06423500'\nstart_date = '1934-10-01'\nend_date = '2024-09-30'\n\n# Get discharge data and metadata from NWIS if not already downloaded\nproject = earthpy.project.Project(dirname=data_dir)\nnwis_path = project.project_dir / csv_filename\nif not nwis_path.exists():\n    nwis_df, meta = dataretrieval.nwis.get_dv(\n        sites=site_number,\n        start=start_date,\n        end=end_date)\n        \n    nwis_df.to_csv(nwis_path)\n\n# Load from file\nnwis_df = pd.read_csv(nwis_path, index_col='datetime', parse_dates=True)\n\n# Display downloaded data\nnwis_df\n\n\n\n**Final Configuration Loaded:**\n{}\n\n\n\n\n\n\n\n\n\nsite_no\n00060_Mean\n00060_Mean_cd\n00065_Mean\n00065_Mean_cd\n\n\ndatetime\n\n\n\n\n\n\n\n\n\n1934-10-01 00:00:00+00:00\n6423500\n54.0\nA\nNaN\nNaN\n\n\n1934-10-02 00:00:00+00:00\n6423500\n51.0\nA\nNaN\nNaN\n\n\n1934-10-03 00:00:00+00:00\n6423500\n51.0\nA\nNaN\nNaN\n\n\n1934-10-04 00:00:00+00:00\n6423500\n54.0\nA\nNaN\nNaN\n\n\n1934-10-05 00:00:00+00:00\n6423500\n54.0\nA\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n\n\n2024-09-26 00:00:00+00:00\n6423500\n103.0\nA\n0.44\nA\n\n\n2024-09-27 00:00:00+00:00\n6423500\n94.9\nA\n0.40\nA\n\n\n2024-09-28 00:00:00+00:00\n6423500\n90.7\nA\n0.39\nA\n\n\n2024-09-29 00:00:00+00:00\n6423500\n83.9\nA\n0.36\nA\n\n\n2024-09-30 00:00:00+00:00\n6423500\n73.6\nA, e\nNaN\nNaN\n\n\n\n\n32866 rows × 5 columns\n\n\n\nNow, let’s check the data:\n\nnwis_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nDatetimeIndex: 32866 entries, 1934-10-01 00:00:00+00:00 to 2024-09-30 00:00:00+00:00\nData columns (total 5 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   site_no        32866 non-null  int64  \n 1   00060_Mean     32866 non-null  float64\n 2   00060_Mean_cd  32866 non-null  object \n 3   00065_Mean     1592 non-null   float64\n 4   00065_Mean_cd  1592 non-null   object \ndtypes: float64(2), int64(1), object(2)\nmemory usage: 1.5+ MB\n\n\nThe dataretrieval library has taken care of a lot of the work of accessing and importing NWIS data. However, we still want to clean up the data a little, by selecting the column we want and renaming it with a descriptive label. You should also double-check that any NODATA values are properly encoded, and that the data types make sense! For example, plotting a histogram can be a useful way to see if the data values are what you expect.\n\n\n\n\n\n\nReflect and Respond\n\n\n\nDo you see any problems with your data? List out three things that you checked to make sure that you won’t have problems down the line.",
    "crumbs": [
      "UNIT 2: Flooding Coding Challenge",
      "Download streamflow data"
    ]
  }
]