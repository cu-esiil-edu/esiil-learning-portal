# STEP 3: Convert units

It's important to keep track of the units of all your data. You don't want to be like the [NASA team who crashed a probe into Mars because different teams used different units](https://www.latimes.com/archives/la-xpm-1999-oct-01-mn-17288-story.html))!

## Use labels to keep track of units for you and your collaborators

One way to keep track of your data's units is to include the unit in data **labels**. In the case of a `DataFrame`, that usually means the column names.

::: {.callout-task title="Add units to your column name"}

A big part of writing **expressive** code is descriptive labels. Let's rename the columns of your dataframe to include units. Complete the following steps:

  1. Replace `dataframe` with the name of **your** `DataFrame`, and `dataframe_units` with an expressive new name.
  2. Check out the [documentation for GCHNd data](https://www.ncei.noaa.gov/data/global-historical-climatology-network-daily/doc/GHCND_documentation.pdf). We downloaded data with "standard" units; find out what that means for both temperature and precipitation.
  3. Replace `'TOBS'` with the temperature column name in your data, and `'TOBS_UNIT'` with a column name that includes the correct unit.

:::
```{python}
#| template: student
dataframe_units = dataframe.rename(columns={
    'TOBS': 'TOBS_UNIT',
})

dataframe
```

```{python}
#| template: answer
climate_u_df = climate_df.rename(columns={
    f'{data_type}': 'temp_f',
})
climate_u_df
```

## For scientific applications, it is often useful to have values in metric units

::: {.callout-task title="Convert units"}

The code below attempts to convert the data to Celcius, using Python mathematical **operators**, like `+`, `-`, `*`, and `/`. Mathematical operators in Python work just like a calculator, and that includes using parentheses to designat the **order of operations**. The equation for converting Fahrenheit temperature to Celcius is:

$$
T_C = (T_F - 32) * \frac{5}{9}
$$

This code is not well documented and doesn't follow [PEP-8 guidelines](https://peps.python.org/pep-0008/#other-recommendations), which has caused the author to miss an **important error**!

Complete the following steps:

  1. Replace `dataframe` with the name of **your** `DataFrame`.
  2. Replace `'old_temperature'` with the column name **you** used; Replace `'new_temperature'` with an **expressive** column name. 
  3. **THERE IS AN ERROR IN THE CONVERSION MATH - Fix it!**
:::

```{python}
#| template: student
dataframe_units['new_temperature']= dataframe_units['old_temperature']-32*5/9
dataframe_units
```

```{python}
#| template: answer
climate_u_df['temp_c'] = (climate_u_df['temp_f'] - 32) * 5 / 9

climate_u_df
```

::: {.callout-extra}
Using the code below as a framework, write and apply a **function** that converts to Celcius. You should also rewrite this function name to be more expressive.
  
```python
def convert(temperature):
    """Convert temperature to Celcius"""
    return temperature # Put your equation in here

dataframe['TEMP_C'] = dataframe['TEMP_F'].apply(convert)
```
:::
