---
title: Practice using names and operators in Python
jupyter: python3
---


We've found that it's helpful for students who are brand new to programming to have some practice with the basic syntax. If that's you, that's what this notebook is for - we hope it helps with getting used to Python. If you're someone with more experience, don't overthink it - just move on quickly to the analysis for this week!

Be sure you have read the following chapters of the Introduction to Earth Data Science online textbook:

* **Chapter 10 from Section 4** <a href="https://www.earthdatascience.org/courses/intro-to-earth-data-science/python-code-fundamentals/get-started-using-python/lists/" target="_blank">Chapter 10 - Introduction to Python</a>
* **Chapter 16 from Section 7** <a href="https://www.earthdatascience.org/courses/intro-to-earth-data-science/write-efficient-python-code/intro-to-clean-code/" target="_blank">Chapter 16 - Introduction to Clean Code</a>

These chapters cover:

* how to create and work with variables and lists 
* more background on **Python** packages and environments
* how to write clean code, including an introduction to the PEP 8 style guide for **Python**.


## Assignment Data 
This data in this assignment, represent average monthly temperature for <a href="https://www.esrl.noaa.gov/psd/boulder/Boulder.mm.html" target="_blank">Boulder, Colorado, provided by the U.S. National Oceanic and Atmospheric Administration (NOAA).</a> 

## Create Variables in Python

Add your code to the cell below to complete the following task:

* Create a unique variable that represents the monthly average temperature (Fahrenheit) for each month January through March.
* Name each variable using the month column name. You should have 3 variables in total. (`jan`, `feb`, and `march`)

IMPORTANT: Python variable names are CASE SENSITIVE! Be sure that you spell the variable name correctly and consider capitalization.

Month  | Temperature (Fahrenheit) |
--- | --- |
jan | 32.0 |
feb | 35.6 |
mar | 41.0 |

```{python}
# Create variables of monthly temp

# BEGIN SOLUTION

jan = 32.0
feb = 35.6
mar = 41.0

round(jan + feb + mar, 1)
# END SOLUTION
```

```{python}
# DO NOT MODIFY THIS CELL!
# Did you create all of the variables? Run this cell to find out

variables_exist = False

try:
    checksum = round(jan + feb + mar, 1)
    print("\u2705 Nice work - all of your variables exist!")
    variables_exist = True
except NameError as ne:
    print(("\u274C Oops! At least one of your variables is missing. "
           "Be sure that all your variables are spelled exactly as it is "
           "represented in the Month column in the table above"), 
          ne)

if variables_exist:
    if checksum == 108.6:
        print("\u2705 All of your variables are set to the correct values.")
    else:
        print(("\u274C You variables exist, but at least one does not have "
               "the correct value (the sum is incorrect)."))
```

## Run Calculations on Variables

In the cell below, complete the following task:

* Convert the 6 variable values for January through June that you created above **from Fahrenheit to Celsius** using the following equation:
    * Celsius = (Fahrenheit - 32) / 1.8
    * Note that Python by default follows the standard rules of math order of operations. This means that division would happen BEFORE subtraction. Including `Fahrenheit - 32` within parenthesis `()` tells `Python` to execute that calculation first.  

```{python}
# Convert variable values from Fahrenheit to Celsius

# BEGIN SOLUTION
jan = (jan - 32) / 1.8
feb = (feb - 32) / 1.8
mar = (mar - 32) / 1.8
round(jan + feb + mar, 1)
# END SOLUTION
```

```{python}
# DO NOT MODIFY THIS CELL

checksum_celsius = 7.0

if round(jan + feb + mar, 1) == checksum_celsius:
    print(("\u2705 You modified the variables you created above correctly, "
           "good job!"))
else:
    print(("\u274C You did not modify the variables as expected. Make sure "
           "you assigned the output of your modification back to the "
           "variable."))
```

## Create List of Converted Monthly Temperatures

In the cell below, add your code **after the line for `Your Code Here`**, replacing `raise NotImplementedError()` with your code, to complete the following task:

* Create a Python object of type **list** called **temp** for average monthly temperature for Boulder, CO containing the **variables for January to June in the Celsius degrees**. 
* Call the list you created at the end of the cell. For example:
```
list = [value1, value2]
list
```
IMPORTANT: If you don't call the object at the end of your cell, the autograder will break. 

```{python}
# Create list of converted monthly temps

# BEGIN SOLUTION

temp = [jan, feb, mar]

temp
# END SOLUTION
```

```{python}
# DO NOT MODIFY THIS CELL!

student_temp = _

is_list = False

if isinstance(student_temp, list):
    print(("\u2705 Nice work! The object you called at the end of the cell "
           "is of type - list"))
    is_list = True
else:
    print(("\u274C Oops! Did you create a list variable and call it at the "
           "end of the cell? Please reread the directions."))
if is_list:
    if len(student_temp) == 3:
        print(("\u2705 Nice work! Your list has the correct number of "
               "elements"))
    else:
        print(("\u274C Oops - your list is not the correct length."))
    
if round(sum(student_temp), 1) == checksum_celsius:
    print(("\u2705 The list you created has the correct values in it, good "
           "job!"))
else:
    print("\u274C The list you created does not contain the correct values.")
```

## Add Values to List of Converted Monthly Temperatures

In the cell below, replace the  `raise NotImplementedError()` with your code to complete the following task:

* Add the average monthly temperature values for **July to December in the Celsius degrees** (in the table below) to your list called `temp` of converted monthly temperatures.
    > HINT: There are actually 3 different ways you could complete this task: `.append()`, `.extend()`, or `+=`. Try out all 3 for practice!
* **Print your completed list of converted monthly temperatures (in Celsius degrees).** 

Month  | Temperature (Celsius) |
--- | --- |
apr | 9.6 |
may | 14.4 |
june | 19.6 |
july | 22.8 |
aug | 21.7 |
sept | 16.7 |
oct | 11.6 |
nov | 4.9 |
dec | 1.0 |

```{python}
# BEGIN SOLUTION
temp.append(9.6)
temp.extend([14.4, 19.6, 22.8, 21.7])
temp += [16.7, 11.6, 4.9, 1.0]
print(round(sum(temp), 1))
temp
# END SOLUTION
```

```{python}
# DO NOT MODIFY THIS CELL

student_temp_long = _

is_list = False

if isinstance(student_temp_long, list):
    print(("\u2705 Nice work! The object you called at the end of the cell "
           "is of type - list"))
    is_list = True
else:
    print(("\u274C Oops! Did you create a list variable and call it at the "
           "end of the cell? Please reread the directions."))

if is_list:
    if len(student_temp_long) == 12:
        print(("\u2705 Nice work! Your list has the correct number of "
               "elements"))
    else:
        print(("\u274C Oops - your list is not the correct length."))
    
if round(sum(student_temp_long), 1) == 129.3:
    print(("\u2705 The list you created has the correct values in it, good "
           "job!"))
else:
    print("\u274C The list you created does not contain the correct values.")
```

## Discuss Use of PEP 8 Style Guide

In the Markdown cell below, answer the following questions about the PEP 8 style guide using a **bullet list**:

1. How did the PEP 8 style guide influence your choice of variable names and your code organization in this assignment?

2. Describe one way in which these standards are promoted and/or enforced within the `Python` community.

Remove any existing text in the cell before adding your answer.

=== BEGIN MARK SCHEME ===

Thoughtful answer to each question - 2 pts each

=== END MARK SCHEME ===

# YOUR ANSWER HERE

<div class="notice--warning" markdown="1">

## <i class="fa fa-pencil-square-o" aria-hidden="true"></i> BONUS Challenge: List Comprehensions in Python (OPTIONAL)

**This activity is optional!**

Above you performed many tasks manually. Included in those manual steps was one 
where you converted each individual value in your list from Fahrenheit to Celsius.
In **Python**, list comprehensions are a great way to perform operations on a sequence 
of values stored within a list. 

The syntax for a list comprehension is below. Essentially what is happening is that 
Python is iterating through each value in the old list (`for i in my_old_list`) and 
multiplying it by 2 (`i*2`). In each iteration of the loop, the value `i` represents 
the next value in the list. In the example below, `i` will first be the value 1, 
and then 2, and finally 3.


```python
my_old_list = [1, 2, 3]
my_new_list = [i*2 for i in my_old_list] 
```

`my_new_list` will equal each value in `my_old_list` multiplied by 2, so `my_new_list` 
will be equivalent to `[2, 4, 6]`. You can run this code and see the output for yourself!
Try to experiment with writing more efficient code. Convert your `boulder_precip_inches` 
list of values to a new list called `boulder_precip_mm` using a list comprehension. Use 
the syntax above to help you create this list comprehension.

### Your Challenge If You Chose to Accept It

The code below creates a list object called temp_fah that stores 6 temperature values in degrees
Fahrenheit. 

`temp_fah = [32.0, 35.6, 41.0, 49.2, 57.9, 67.2]`

Do the following:

1. Copy the code into the code cell below
2. Create a list comprehension that creates a new object which contains each value converted into Celsius.
3. Call the new list you created at the end of the cell. 


### Learn More About For Loops and List Comprehensions in Python (OPTIONAL)

For more information on loops and changing values within a list, you can check out:

* <a href="https://www.earthdatascience.org/courses/intro-to-earth-data-science/write-efficient-python-code/loops/" target="_blank">Earth Lab's lesson introducing loops in Python,</a> and 
* <a href="https://www.earthdatascience.org/courses/intro-to-earth-data-science/write-efficient-python-code/loops/list-comprehensions" target="_blank">Earth Lab's lesson on list comprehensions in Python.</a>

</div>

```{python}
#| nbgrader: {grade: false, grade_id: bonus-answer, locked: false, schema_version: 3, solution: true, task: false}
# Add your code here

# BEGIN SOLUTION

temp_fah = [32.0, 35.6, 41.0, 49.2, 57.9, 67.2]
temp_cel = [(i - 32) / 1.8 for i in temp_fah]
print(round(sum(temp_cel), 1))
temp_cel

# END SOLUTION
```

```{python}
#| nbgrader: {grade: true, grade_id: bonus-tests, locked: true, points: 5, schema_version: 3, solution: false, task: false}
# DO NOT MODIFY THIS CELL

student_temp_cel = _

student_temp_cel_points = 0

if isinstance(student_temp_cel, list):
    print(("\u2705 Nice work! The object you called at the end of the cell "
           "is of type - list"))
    student_temp_cel_points += 1
    is_list = True
else:
    print(("\u274C Oops! Did you create a list variable and call it at the "
           "end of the cell? Please reread the directions."))

if is_list:
    if len(student_temp_cel) == 6:
        print(("\u2705 Nice work! Your list has the correct number of "
               "elements"))
        student_temp_cel_points += 1
    else:
        print(("\u274C Oops - your list is not the correct length."))

    if round(sum(student_temp_cel), 1) == 50.5:
        print(("\u2705 Your list comprehension output has the correct "
               "values in it."))
        student_temp_cel_points += 3
    else:
        print(("\u274C Your list comprehension output does not have the "
               "correct values in it."))

print("\n \u27A1 You received {} out of 5 extra credit points for creating a list "
      "with list comprehension."
      .format(student_temp_cel_points))

student_temp_cel_points
```

