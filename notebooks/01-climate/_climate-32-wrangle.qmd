# Wrangle your data

## Python **packages** let you use code written by experts around the world

Because Python is open source, lots of different people and organizations can contribute (including you!). Many contributions are in the form of **packages** which do not come with a standard Python download.

::: {.callout-read title="Packages need to be installed and imported."}
Learn more about using Python packages. How do you find and use packages? What is the difference between installing and importing packages? When do you need to do each one? [This article on Python packages](https://www.earthdatascience.org/courses/intro-to-earth-data-science/python-code-fundamentals/use-python-packages/) will walk you through the basics.
:::

In the cell below, someone was trying to import the **pandas package**, which helps us to work with [**tabular data** such as comma-separated value or csv files](https://www.earthdatascience.org/courses/intro-to-earth-data-science/file-formats/use-text-files/). But something's wrong!

::: {.callout-task title="Import packages"}

  1. Correct the typo below to properly import the pandas package under its **alias** pd.
  2. Run the cell to import the libraries you'll need for this workflow.

:::

::: {.content-visible when-format="ipynb"}
:::: {.callout-warning}
Make sure to run your code in the right **environment** to avoid import errors!

We've created a coding **environment** for you to use that already has all the software and packages you will need! When you try to run some code, you may be prompted to select a **kernel**. The **kernel** refers to the version of Python you are using. You should use the **base** kernel, which should be the default option for you.
::::
:::

```{python}
#| template: student
# Import libraries
import earthpy
import holoviews as hv
import hvplot.pandas
import pandsa as pd
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Import libraries
import earthpy
import holoviews as hv
import hvplot.pandas
import pandas as pd
```
:::

## STEP 1: Download the practice data

Next, lets download some climate data from {{< meta params.location >}} to practice with. 

::: {.callout-task title="Save the URL for later"}

  1. Replace `Project Name Here` with the actual project name, {{< meta params.project_name >}}. 
  2. Replace  `data-folder-name-here` with a *descriptive* name for your data folder.
  3. Run the cell. Can you find the data on your computer?

:::

```{python}
#| template: student
# Set up project folders
project = earthpy.Project(
    'Project Name Here',
    dirname='data-folder-name-here')

# Download data
project.get_data()

# Check where the data ended up
project.project_dir
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Set up project folders
project = earthpy.Project(project_name)

# Download data
project.get_data()

# Check where the data ended up
project.project_dir
```
:::

If you are on GitHub Codespaces, you should be able to see your data in your `Explorer` tab.

![You can find the Explorer tab on the left hand side of the screen. Your data should be in the `data` folder mounted there.](/img/notebooks/climate/codespaces-data.png)

You can also take a look at your data using the `bash` programming language, either in your terminal or here in your Jupyter notebook (the `!` indicates to use the current bash process, and the `{}` indicates to use a Python variable):

```{python}
!ls "{project.project_dir}"
```

## STEP 2: Import data to Python

The `pandas` library you imported can download data from the internet directly into a type of Python **object** called a `DataFrame`. In the code cell below, you can see an attempt to do just this. But there are some problems...

::: {.callout-task title="Fix some code!"}

  1. Make any changes needed to get this code to run. HINT: The `filename.csv` isn't correct - you need to replace it with the name of the file you downloaded! See if you can find where the data downloaded to.
  2. The `pd.read_csv()` function isn't formatting the data 100% correctly. Modify the code to include the following additional parameters, making sure to put a comma (`,`) in-between each parameter:

      + `index_col='DATE'` -- this sets the `DATE` column as the index. Needed for subsetting and resampling later on
      + `parse_dates=True` -- this lets `python` know that you are working with time-series data, and values in the indexed column are **date time objects**
      + `na_values=['NaN']` -- this lets `python` know how to handle missing values

  3. We can't get the data back later on because it isn't saved in a **variable**. In other words, we need to give the url a **name** so that we can request in from Python later (sadly, Python has no 'hey what was that thingy I typed yesterday?' function). Make sure to use an **expressive variable name** so you remember what it is later on!

:::

::: {.callout-read .column-margin title="Names/variables in Python" }
One of the most common challenges for new programmers is making sure that your results are stored so you can use them again. In Python, this is called **naming**, or saving a **variable**.  Learn more in this [hands-on activity on using variables](https://www.earthdatascience.org/courses/intro-to-earth-data-science/python-code-fundamentals/get-started-using-python/variables/) from our learning portal.
:::

```{python}
#| template: student
# Load climate data from NCEI
pd.read_csv(
    project.project_dir / 'filename.csv'
)
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Load climate data from NCEI
climate_df = pd.read_csv(
    project.project_dir / ncei_filename,
    index_col='DATE',
    parse_dates=True,
    na_values=['NaN'])
climate_df
```
:::

:::{.callout-tip}
Check out the `type()` function below - you can use it to check that your data is now in `DataFrame` type object.
:::

```{python}
#| template: student
# Check that data was imported into a pandas DataFrame
type(climate_df)
```

## STEP 3: Clean up your `DataFrame`

::: {.callout-task title="Get rid of unwanted columns"}
You can use **double brackets** (`[[` and `]]`) to select only the columns that you want from your `DataFrame`:

  1. Change `some_column_name` to the Temperature column name.
  2. Put quotes around your column name so Python interprets it as text and not a variable name.
  2. Clean up the code by using **descriptive comments**.

:::

```{python}
#| template: student
climate_df = climate_df[[some_column_name]]
climate_df
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Clean up the DataFrame
climate_df = climate_df[[f'{data_type}']]
climate_df
```
:::
