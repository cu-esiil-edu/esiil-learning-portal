## There are more Earth Observation data online than any one person could ever look at

[NASA's Earth Observing System Data and Information System (EOSDIS) alone manages over 9PB of data](https://www.earthdata.nasa.gov/learn/articles/getting-petabytes-people-how-eosdis-facilitates-earth-observing-data-discovery-and-use). 1 PB is roughly 100 times the entire Library of Congress (a good approximation of all the books available in the US). It's all available to **you** once you learn how to download what you want.

Here we're using the NOAA National Centers for Environmental Information (NCEI) [Access Data Service](https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation) application progamming interface (API) to request data from their web servers. We will be using data collected as part of the Global Historical Climatology Network daily (GHCNd) from their [Climate Data Online library](https://www.ncdc.noaa.gov/cdo-web/datasets) program at NOAA.

For this example we're requesting [daily summary data in {{< meta params.location >}} (station ID {{< meta params.station_id >}})](https://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:{{< meta params.station_id >}}/detail).

::: {.callout-response title="Research and cite your data"}

  1.  Research the [**Global Historical Climatology Network - Daily**](https://www.ncei.noaa.gov/metadata/geoportal/rest/metadata/item/gov.noaa.ncdc:C00861/html) data source.
  2. In the cell below, write a 2-3 sentence description of the data source. 
  3.  Include a citation of the data (**HINT:** See the 'Data Citation' tab on the GHCNd overview page).

Your description should include: 

  + who takes the data
  + where the data were taken
  + what the maximum temperature units are
  + how the data are collected
  
:::

::: {.content-visible when-format="ipynb"}
:::: {.cell .markdown}
**YOUR DATA DESCRIPTION AND CITATION HERE** üõéÔ∏è
::::
:::

## Access NCEI GHCNd Data from the internet using its API üñ•Ô∏è üì° üñ•Ô∏è

The cell below contains the URL for the data you will use in this part of the notebook. We created this URL by generating what is called an **API endpoint** using the NCEI [API documentation](https://www.ncei.noaa.gov/support/access-data-service-api-user-documentation).

::: {.callout-note .column-margin title="What's an API?"}
An **application programming interface** (API) is a way for two or more computer programs or components to communicate with each other. It is a type of software interface, offering a service to other pieces of software ([Wikipedia](https://en.wikipedia.org/wiki/API)).
:::

First things first -- you will need to import the `earthpy` library to help with data management and the `pandas` library to work with tabular data:

```{python}
# Import required packages
```

::: {.content-visible when-format="html"}
```{python}
#| code-fold: true
#| code-summary: See our solution!
# Import required packages
import pandas as pd
```
:::

The cell below contains the URL you will use to download climate data. There are two things to notice about the URL code:

  1. It is surrounded by quotes -- that means Python will interpret it as a `string`, or text, type, which makes sense for a URL.
  2. The URL is too long to display as one line on most screens. We've put parentheses around it so that we can easily split it into multiple lines by writing two strings -- one on each line.

::: {.callout-task title="Format your URL for readability"}

  1. Pick an expressive variable name for the URL.
  2. Reformat the URL so that it adheres to the [79-character PEP-8 line limit](https://peps.python.org/pep-0008/#maximum-line-length), and so that it is **easy to read**. If you are using GitHub Codespaces, you should see two vertical lines in each cell -- don't let your code go past the second line.
  3. Replace 'DATATYPE', 'STATION', and the start and end dates 'YYYY-MM-DD', with the values for the data you want to download.

:::

```{python}
#| template: student
stuff23 = ('https://www.ncei.noaa.gov/access/services/da'
'ta/v1?dataset=daily-summaries&dataTypes=DATATYPE&stations=STATION&startDate=YYYY-MM-DD&endDate=YYYY-MM-DD&units=standard')
stuff23
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
ncei_url = (
    'https://www.ncei.noaa.gov/access/services/data/v1'
    '?dataset=daily-summaries'
    f'&dataTypes={data_type}'
    f'&stations={station_id}'
    f'&startDate={start_date}'
    f'&endDate={end_date}'
    '&units=standard'
)
ncei_url
```
:::

## Get NCEI data using the API

::: {.callout-task}

  1. Replace `url` with the name of your URL
  2. Run the code to download and check your data
  
:::

```{python}
#| template: student
# Download the climate data
climate_df = pd.read_csv(
    url,
    index_col='DATE',
    parse_dates=True,
    na_values=['NaN']
)

# Check that the download worked
climate_df.head()
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Download the climate data
# Retry a few times in case the server is down
for i in range(10):
    try:
        climate_df = pd.read_csv(
            ncei_url,
            index_col='DATE',
            parse_dates=True,
            na_values=['NaN'])
        break
    except:
        continue
        

# Check that the download worked
climate_df.head()
```
:::

## Save climate data to your computer

::: {.callout-task}

  1. Replace `filename` with the 
  2. Run the code to download and check your data
  
:::

::: {.callout-warning}
For this activity it's fine, but as a general rule you don't want to upload data files to a GitHub repository! You can get into a situation where it's impossible to upload to GitHub.
:::

```{python}
#| template: student
# Save the climate data
climate_df.to_csv('filename')
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Save the climate data using earthpy
import earthpy
project = earthpy.Project(dirname=project_dirname)
climate_df.to_csv(project.project_dir / ncei_filename)
```
:::

::: {.content-hidden}
```{python}
project.data.prepare_for_upload()
```
:::
