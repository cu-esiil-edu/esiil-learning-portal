# Part 4: Plot your results

::: {.content-visible when-format="ipynb"}
First things first -- make sure to load the climate `DataFrame` you stored in the previous notebooks using Jupyter cell magic:

```{python}
# Load all stored variables
%store -r climate_df
```
:::


You'll also need some libraries later on. This is an extension to `pandas` that will allow you to easily make beautiful, interactive plots, and a related library that will let you save your plots:

```{python}
import holoviews as hv
import hvplot.pandas
```

## Plot the precpitation column (PRCP) vs time to explore the data

Plotting in Python is easy, but not quite this easy:

```{python}
#| template: student
climate_df.plot()
```

Looks like we have *both* precipitation and temperature on the same plot, and it's hard to see what it is because it's missing labels!

::: {.callout-tip}
### **Label your plot**

![Source: https://xkcd.com/833](https://imgs.xkcd.com/comics/convincing.png)

Make sure each plot has: 

  * A title that explains where and when the data are from 
  * x- and y- axis labels with **units** where appropriate 
  * A legend where appropriate
:::

When plotting in Python, you'll always need to add some instructions on labels and how you want your plot to look.

::: {.callout-task title="Plot your data"}

1.  Change `dataframe` to **your** `DataFrame` name.
2.  Change `y=` to the name of your **observed temperature** column name.
3.  Use the `title`, `ylabel`, and `xlabel` parameters to add key text to your plot.
4.  Adjust the size of your figure using `figsize=(x,y)` where `x` is figure width and `y` is figure height

> **HINT:** labels have to be a *type* in Python called a **string**. You can make a string by putting quotes around your label, just like the column names in the sample code (eg `y='TOBS'`).
:::

```{python}
#| template: student
# Plot the data using .plot
climate_df.plot(
    y='the_precipitation_column',
    title='Title Goes Here',
    xlabel='Horizontal Axis Label Goes Here',
    ylabel='Vertical Axis Label Goes Here')
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Plot the data using .plot
climate_df.plot(
    y='TOBS',
    title='Daily Temperature in Boulder, CO',
    xlabel='Date',
    ylabel='Temperature ($^\circ$F)')
```
:::

::: {.callout-extra}

There are many other things you can do to customize your plot. Take a look at the [pandas plotting galleries](https://pandas.pydata.org/docs/user_guide/visualization.html) and the [documentation of plot](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html) to see if there's other changes you want to make to your plot. Some possibilities include: 

  * Remove the legend since there's only one data series 
  * Increase the figure size 
  * Increase the font size 
  * Change the colors 
  * Use a bar graph instead (usually we use lines for time series, but since this is annual it could go either way) 
  * Add a trend line

Not sure how to do any of these? Try searching the internet, or asking an AI!
:::

## Clean up time series plots by resampling

You may notice that your plot looks a little "fuzzy". This happens when Python is trying to plot a value for every date, but the resolution of the image is too low to actually do that. You can address this issue by **resampling** the data, or summarizing it over a time period of your choice. In this case, we will resample annually, giving us one data point per year.

::: {.callout-task title="Resample"}

  1. Set the frequency of your final data by replacing `DT_OFFSET`with a **Datetime Offset Code**. Check out the table in the [pandas datetime documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects) to find the one you want (we recommend the start of the year).
  2. Choose how to summarize each year of data by replacing `agg_method_here` with a method that will calculate the **average annual value**. Check out the [pandas resampling documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#basics) for a list of common built-in options.
:::

```{python}
#| template: student
ann_climate_df = climate_df.resample('DT_OFFSET').agg_method_here()
ann_climate_df
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
ann_climate_df = climate_df.resample('YS').mean()
# Store for later
%store ann_climate_df
ann_climate_df
```
:::

::: {.callout-task title="Plot Annual Data"}

  1. Try plotting your new DataFrame in the cell below. Can you see what is going on more clearly now? Don't forget to adjust your labels!
:::

```{python}
#| template: student
# Plot the annual data
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Plot the annual data using .plot
ann_climate_df.plot(
    y='TOBS',
    title='Annual Average Temperature in Boulder, CO',
    xlabel='Year',
    ylabel='Temperature ($^\circ$F)'
)
```
:::

::: {.cell .markdown}
:::: {.callout-respond title="Interpret your plot"}

  1. Create a new Markdown cell below this one.

  2. In the new cell, answer the following questions using a **bulleted list** in Markdown -- what are 2 things you notice about this data? What physical phenomena or data anomaly could be causing each one?

::::: {.content-visible when-profile="graded"}
Rubric:

| Task | Max Points | Points | Comments |
|------|------------|--------|----------|
| Create Markdown cell             | 1 |  |  |
| Use a bulleted list              | 2 |  |  |
| Thoughtful response to question  | 4 |  |  |
| Easily readable                  | 1 |  |  |
:::::
::::
:::

## Check specific values with an interactive plot

You can use the `.hvplot()` method with similar arguments to create an interactive plot. 

::: {.callout-task title="Interactive Plot"}

  1. Copy your plotting code into the cell below.
  2. Replace `.plot` in your code with `.hvplot`

 Now, you should be able to hover over data points and see their values!
:::

```{python}
#| template: student
# Plot the annual data interactively
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Plot the annual data using .hvplot
ann_climate_plot = ann_climate_df.hvplot(
    y='TOBS',
    title='Annual Average Temperature in Boulder, CO',
    xlabel='Year',
    ylabel='Temperature (deg. F)'
)
ann_climate_plot
```
:::

::: {.cell .markdown}
:::: {.callout-task title="Explore the data"}

  1. Create a new Markdown cell below this one.

  2. Hover over the lowest point on your plot. What is the overall minimum annual average temperature?

::::
:::

## BONUS: Save your work

You will need to save your analyses and plots to tell others about what you find.

::: {.callout-task title="Save Your Plot"}

Just like with any other type of object in Python, if you want to reuse your work, you need to give it a name.

  1. Go back to your `hvplot` code, and give your plot a name by assigning it to a variable. HINT: if you still want your plot to display in your notebook, make sure to **call** its name at the end of the cell.
  2. Replace `my_plot` with the name you gave to your plot.
  3. Replace `'my_plot.html'` with the name you want for your plot. If you change the file extension, `.html`, to `.png`, you will get an image instead of an interactive webpage, provided you have the necessary libraries installed.

Once you run the code, you should see your saved plot in your files -- go ahead and open it up.

:::: {.callout-warning}
You may need to right-click on your file and download it to be able to view it.
::::
:::

```{python}
#| template: student
hv.save(my_plot, 'my_plot.html')
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
hv.save(ann_climate_plot, 'annual_climate.html')
```
:::

::: {.content-visible when-format="ipynb"}
```{python}
%store ann_climate_df
```
:::