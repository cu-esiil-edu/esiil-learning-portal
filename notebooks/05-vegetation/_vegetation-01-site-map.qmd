# STEP 1: Site map

We'll need some Python libraries to complete this workflow.

::: {.callout-task title="Import necessary libraries"}
In the cell below, making sure to keep the packages in order, add packages for:

  - Working with DataFrames
  - Working with GeoDataFrames
  - Making interactive plots of tabular and vector data

:::

::: {.callout-respond}
What are we using the rest of these packages for? See if you can figure it out as you complete the notebook.
:::

```{python}
#| template: student
import json
import os
import pathlib

import hvplot.xarray
import rioxarray as rxr
import xarray as xr
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
import json
from glob import glob

import earthpy
import geopandas as gpd
import hvplot.pandas
import hvplot.xarray
import pandas as pd
import rioxarray as rxr
import xarray as xr
```
:::

We have one more setup task. We're not going to be able to load all our data directly from the web to Python this time. That means we need to set up a place for it.

::: {.callout-caution title="GOTCHA ALERT!" icon="false"}
A lot of times in Python we say "directory" to mean a "folder" on your computer. The two words mean the same thing in this context.
:::

::: {.callout-task}
In the cell below, replace 'my-data-folder' with a **descriptive** directory name.
:::

```{python}
#| template: student
project = earthpy.Project("Gila River Vegetation", dirname='my-data-folder')
project.get_data()
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
project = earthpy.Project("Gila River Vegetation")
project.get_data()
```
:::

## Study Area: {{< meta params.site_name >}}

### Earth Data Science data formats

In Earth Data Science, we get data in three main formats:

| Data type | Descriptions | Common file formats | Python type |
|---|---|---|---|
| Time Series | The same data points (e.g. streamflow) collected multiple times over time | Tabular formats (e.g. .csv, or .xlsx) | pandas DataFrame |
| Vector | Points, lines, and areas (with coordinates) | Shapefile (often an archive like a `.zip` file because a Shapefile is actually a collection of at least 3 files) | geopandas GeoDataFrame |
| Raster | Evenly spaced spatial grid (with coordinates) | GeoTIFF (`.tif`), NetCDF (`.nc`), HDF (`.hdf`) | rioxarray DataArray |

::: {.callout-read}
Check out the sections about about [vector data](https://www.earthdatascience.org/courses/use-data-open-source-python/intro-vector-data-python/spatial-data-vector-shapefiles/) and [raster data](https://www.earthdatascience.org/courses/intro-to-earth-data-science/file-formats/use-spatial-data/use-raster-data/) in the textbook.
:::

::: {.callout-respond}
For this coding challenge, we are interested in the boundary of the {{< meta params.site_name >}}, and the health of vegetation in the area measured on a scale from -1 to 1. In the cell below, answer the following question: **What data type do you think the boundary will be? What about the vegetation health?**
:::

::: {.content-visible when-format="ipynb"}
:::: {.cell .markdown}
YOUR ANSWER HERE
::::
:::


### Load the {{< meta params.site_name >}} boundary

::: {.callout-task}

  - Locate the Tribal Subdivision files in your download directory
  - Change `'subdivision-directory'` to the actual location
  - Load the data into Python and check that it worked

:::

```{python}
#| template: student
# Load in the boundary data
aitsn_gdf = gpd.read_file(project.project_dir / 'subdivision-directory')
# Check that it worked

```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Load in the boundary data
aitsn_gdf = gpd.read_file(project.project_dir / 'tl_2020_us_aitsn')
# Check that it worked
aitsn_gdf

```
:::

You might notice in this dataset that some of the names are not easily searchable. For example, the Gila River subdivisions are named "District 1-7"! So, how do we know what to search for? We recommend making an **interactive** plot of the data so that you can find the information you need, e.g.:


```{python}
aitsn_gdf.hvplot(
    geo=True, tiles='EsriImagery', 
    frame_width=500,
    legend=False, fill_color=None, edge_color='white',
    # This parameter makes all the column values in the dataset visible.
    hover_cols='all')
```

::: {.callout-respond}
What column could you use to uniquely identify the subdivisions of the reservation you want to study using this interactive map? What value do you need to use to filter the `GeoDataFrame`?
:::

::: {.content-visible when-format="ipynb"}
:::: {.cell .markdown}
YOUR ANSWER HERE
::::
:::


Now that you have the info you need, it's also a good idea to check the data type. For example, we suggest looking at the `AIANNHCE` column...but is that value some kind of **number** or an **object** like a text string? We can't tell just by looking, which is where our friend the `.info()` method comes in:

```{python}
aitsn_gdf.info()
```


::: {.callout-respond}
What is the data type of the `AIANNHCE` column? How will that affect your code?
:::

::: {.content-visible when-format="ipynb"}
:::: {.cell .markdown}
YOUR ANSWER HERE
::::
:::

Let's go ahead and select the Gila River subdivisions, and make a site map.

::: {.callout-task}

  1. Replace `identifier` with the value you found from exploring the interactive map. Make sure that you are using the correct **data type**!
  2. Change the plot to have a web tile basemap, and look the way you want it to.

:::

```{python}
#| template: student
# Select and merge the subdivisions you want
gdf = aitsn_gdf.loc[aitsn_gdf.AIANNHCE==identifier].dissolve()
# Plot the results with web tile images
gdf.hvplot()
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Select and merge the subdivisions you want
boundary_gdf = aitsn_gdf.loc[aitsn_gdf.AIANNHCE=='1310'].dissolve()
# Plot the results with web tile images
boundary_gdf.hvplot(
    geo=True, tiles='EsriImagery',
    fill_color=None, line_color='black',
    title=site_name,
    frame_width=500)
```
:::
