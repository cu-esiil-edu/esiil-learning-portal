---
title: Spring returns to the Great Plains
subtitle: Mapping Tasiyagnunpa migration
description: |
  Tasiyagnunpa (or Western Meadowlark, or *sturnella neglecta*) migrates each year to nest on the Great Plains in the United States. Using crowd-sourced observations of these birds, we can see that migration happening throughout the year. In the process, you''ll learn about an important type of geospatial data called **vector data**, which records where points, lines, and shapes on the Earth.
learning-goals:
  - Combine different types of vector data with spatial joins
  - Normalize species observation data to avoid collection biases
  - Create a chloropleth plot
  - Build an interactive display showing observation distributions over time
jupyter: python3
params:
  id: stars
  project_title: Tasiyagnunpa Migration 2023
  species_name: Tasiyagnunpa
  species_lookup: sturnella neglecta
  species_key: 9596413
  year: 2023
  gbif_filename: "gbif_tasiyagnunpa.csv"
  ecoregions_dir: "wwf_ecoregions"
  plot_filename: tasiyagnunpa_migration
  plot_height: 500
---


## Set up

To get started on this notebook, you'll need to restore any variables from previous notebooks to your workspace.

```{python}
%store -r

# Import libraries
```

## STEP 5: Plot the {{< meta params.species_name >}} observations by month

First thing first -- let's load your stored variables and import libraries.

```{python}
#| eval: true
%store -r ecoregions_gdf occurrence_df
```

::: {.callout-task title="Import packages"}

In the imports cell, we've included some packages that you will need. Add imports for packages that will help you:

1. Make interactive maps with vector data

:::

```{python}
#| template: student
# Get month names
import calendar

# Libraries for Dynamic mapping
import cartopy.crs as ccrs
import panel as pn
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Get month names
import calendar

# Libraries for Dynamic mapping
import cartopy.crs as ccrs
import hvplot.pandas
import panel as pn
```
:::

### Create a simplified `GeoDataFrame` for plotting

Plotting larger files can be time consuming. The code below will streamline plotting with `hvplot` by simplifying the geometry, projecting it to a Mercator projection that is compatible with `geoviews`, and cropping off areas in the Arctic.

::: {.callout-task title="Simplify ecoregion data"}

Download and save ecoregion boundaries from the EPA:

1. Simplify the ecoregions with `.simplify(.05)`, and save it back to the `geometry` column.
2.  Change the Coordinate Reference System (CRS) to Mercator with `.to_crs(ccrs.Mercator())`
3.  Use the plotting code that is already in the cell to check that the plotting runs quickly (less than a minute) and looks the way you want, making sure to change `gdf` to YOUR `GeoDataFrame` name.

:::

```{python}
#| template: student
# Simplify the geometry to speed up processing

# Change the CRS to Mercator for mapping

# Check that the plot runs in a reasonable amount of time
gdf.hvplot(geo=True, crs=ccrs.Mercator())
```

::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Simplify the geometry to speed up processing
ecoregions_gdf.geometry = ecoregions_gdf.simplify(
    .05, preserve_topology=False)

# Change the CRS to Mercator for mapping
ecoregions_gdf = ecoregions_gdf.to_crs(ccrs.Mercator())

# Check that the plot runs
ecoregions_gdf.hvplot(geo=True, crs=ccrs.Mercator())
```
:::

::: {.callout-task title="Map migration over time"}

1. If applicable, replace any variable names with the names you defined previously.
2. Replace `column_name_used_for_ecoregion_color` and `column_name_used_for_slider` with the column names you wish to use.
3. Customize your plot with your choice of title, tile source, color map, and size.

:::: {.callout-note}
Your plot will probably still change months very slowly in your Jupyter notebook, because it calculates each month's plot as needed. Open up the saved HTML file to see faster performance!
::::
:::

```{python}
#| template: student
# Join the occurrences with the plotting GeoDataFrame
occurrence_gdf = ecoregions_gdf.join(occurrence_df)

# Get the plot bounds so they don't change with the slider
xmin, ymin, xmax, ymax = occurrence_gdf.total_bounds

# Plot occurrence by ecoregion and month
migration_plot = (
    occurrence_gdf
    .hvplot(
        c=column_name_used_for_shape_color,
        groupby=column_name_used_for_slider,
        # Use background tiles
        geo=True, crs=ccrs.Mercator(), tiles='CartoLight',
        title="Your Title Here",
        xlim=(xmin, xmax), ylim=(ymin, ymax),
        frame_height=600,
        widget_location='bottom'
    )
)

# Save the plot
migration_plot.save('migration.html', embed=True)
```


::: {.content-visible when-format="html"}
```{python}
#| template: answer
# Join the occurrences with the plotting GeoDataFrame
occurrence_gdf = ecoregions_gdf.join(occurrence_df)

# Get the plot bounds so they don't change with the slider
xmin, ymin, xmax, ymax = occurrence_gdf.total_bounds

# Define the slider widget
slider = pn.widgets.DiscreteSlider(
    name='month',
    options={calendar.month_name[i]: i for i in range(1, 13)}
)

# Plot occurrence by ecoregion and month
migration_plot = (
    occurrence_gdf
    .hvplot(
        c='norm_occurrences',
        groupby='month',
        # Use background tiles
        geo=True, crs=ccrs.Mercator(), tiles='CartoLight',
        title=f"{species_name} migration",
        xlim=(xmin, xmax), ylim=(ymin, ymax),
        frame_width=500,
        colorbar=False,
        widgets={'month': slider},
        widget_location='bottom'
    )
)

# Save the plot (if possible)
try:
    migration_plot.save(f'{plot_filename}.html', embed=True)
except Exception as exc:
    print('Could not save the migration plot due to the following error:')
    print(exc)
```
:::

::: {.content-visible when-format="html"}
```{=html}
<embed type="text/html" src="{{< meta params.plot_filename >}}.html" width="600" height="{{< meta params.plot_height>}}">
```
:::

::: {.callout-extra title="Fix the month labels"}

Notice that the `month` slider displays numbers instead of the month name. Use `pn.widgets.DiscreteSlider()` with the `options=` parameter set to give the months names. You might want to try asking ChatGPT how to do this, or look at the documentation for `pn.widgets.DiscreteSlider()`. This is pretty tricky!
:::

## Wrap up

Don't forget to store your variables so you can use them in other notebooks! This code will store all your variables. You might want to specify specific variables, especially if you have large objects in memory that you won't need in the future.

```{python}
%store
```

Finally, be sure to `Restart` and `Run all` to make sure your notebook works all the way through!
