[
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html",
    "href": "notebooks/01b-get-started-api/get-started-api.html",
    "title": "Get started with open reproducible science! (API version)",
    "section": "",
    "text": "Open reproducible science makes scientific methods, data and outcomes available to everyone. That means that everyone who wants should be able to find, read, understand, and run your workflows for themselves.\n\n\nImage from https://www.earthdata.nasa.gov/esds/open-science/oss-for-eso-workshops\n\nFew if any science projects are 100% open and reproducible (yet!). However, members of the open science community have developed open source tools and practices that can help you move toward that goal. You will learn about many of those tools in the Intro to Earth Data Science textbook. Don‚Äôt worry about learning all the tools at once ‚Äì we‚Äôve picked a few for you to get started with.\nFurther reading\n\n\n\nRead our textbook chapter about open reproducible science.\nWhat does open reproducible science mean to you?\n\n\n\n Create a new Markdown cell below this one using the + Markdown button in the upper left.\n In the new cell, answer the following questions using a numbered list in Markdown:\n\nIn 1-2 sentences, define open reproducible science.\nIn 1-2 sentences, choose one of the open source tools that you have learned about (i.e.¬†Shell, Git/GitHub, Jupyter Notebook, Python) and explain how it supports open reproducible science.\n\n\n\n\n Human-readable and Machine-readable\n Create a new Markdown cell below this one using the ESC + b keyboard shortcut.\n In the new cell, answer the following question in a Markdown quote:\n\nIn 1-2 sentences, does this Jupyter Notebook file have a machine-readable name? Explain your answer.\nI can write clean code by: YOUR ANSWER HERE\nAdvantages of clean code include: YOUR ANSWER HERE\nMachine-readable file names\n\n\n\nRename this notebook if necessary with an expressive and machine-readable file name",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#human-readable-and-machine-readable",
    "href": "notebooks/01b-get-started-api/get-started-api.html#human-readable-and-machine-readable",
    "title": "Get started with open reproducible science! (API version)",
    "section": " Human-readable and Machine-readable",
    "text": "Human-readable and Machine-readable\n Create a new Markdown cell below this one using the ESC + b keyboard shortcut.\n In the new cell, answer the following question in a Markdown quote:\n\nIn 1-2 sentences, does this Jupyter Notebook file have a machine-readable name? Explain your answer.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#readable-well-documented-scientific-workflows-are-easier-to-reproduce",
    "href": "notebooks/01b-get-started-api/get-started-api.html#readable-well-documented-scientific-workflows-are-easier-to-reproduce",
    "title": "Get started with open reproducible science! (API version)",
    "section": "Readable, well-documented scientific workflows are easier to reproduce",
    "text": "Readable, well-documented scientific workflows are easier to reproduce\nAs the comic below suggests, code that is hard to read is also hard to get working. We refer to code that is easy to read as clean code.\n\n\n\nAnd because if you just leave it there, it‚Äôs going to start contaminating things downstream even if no one touches it directly. (from [XKCD](https://xkcd.com/2138/))\n\n\n\n\n\n\n\n\n In the prompt below, list 3 things you can do to write clean code, and then list 3 more advantages of doing so.\n\n\n\n\nEdit the text below. You may have to double click.\nYou can use examples from the textbook, or come up with your own.\nUse Markdown to format your list.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#what-the-fork-who-wrote-this",
    "href": "notebooks/01b-get-started-api/get-started-api.html#what-the-fork-who-wrote-this",
    "title": "Get started with open reproducible science! (API version)",
    "section": "What the fork?! Who wrote this?",
    "text": "What the fork?! Who wrote this?\nBelow is a scientific Python workflow. But something‚Äôs wrong ‚Äì The code won‚Äôt run! Your task is to follow the instructions below to clean and debug the Python code below so that it runs.\n\n\n\n\n\n\nTip\n\n\n\nDon‚Äôt worry if you can‚Äôt solve every bug right away. We‚Äôll get there! The most important thing is to identify problems with the code and write high-quality GitHub Issues\n\n\nAt the end, you‚Äôll repeat the workflow for a location and measurement of your choosing.\nAlright! Let‚Äôs clean up this code. First things first‚Ä¶",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#there-are-more-earth-observation-data-online-than-any-one-person-could-ever-look-at",
    "href": "notebooks/01b-get-started-api/get-started-api.html#there-are-more-earth-observation-data-online-than-any-one-person-could-ever-look-at",
    "title": "Get started with open reproducible science! (API version)",
    "section": "There are more Earth Observation data online than any one person could ever look at",
    "text": "There are more Earth Observation data online than any one person could ever look at\nNASA‚Äôs Earth Observing System Data and Information System (EOSDIS) alone manages over 9PB of data. 1 PB is roughly 100 times the entire Library of Congress (a good approximation of all the books available in the US). It‚Äôs all available to you once you learn how to download what you want.\nHere we‚Äôre using the NOAA National Centers for Environmental Information (NCEI) Access Data Service application progamming interface (API) to request data from their web servers. We will be using data collected as part of the Global Historical Climatology Network daily (GHCNd) from their Climate Data Online library program at NOAA.\nFor this example we‚Äôre requesting daily summary data in Boulder, CO (station ID USC00050848) located on the NOAA Campus (39.99282¬∞, -105.26683¬∞).\n\n\n\n\n\n\n\n Your task:\n\n\n\n\nResearch the Global Historical Climatology Network - Daily data source.\nIn the cell below, write a 2-3 sentence description of the data source. You should describe:\n\nwho takes the data\nwhere the data were taken\nwhat the maximum temperature units are\nhow the data are collected\n\nInclude a citation of the data (HINT: See the ‚ÄòData Citation‚Äô tab on the GHCNd overview page).\n\n\n\n\n\nYOUR DATA DESCRIPTION AND CITATION HERE üõéÔ∏è",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#you-can-access-ncei-ghcnd-data-from-the-internet-using-its-api",
    "href": "notebooks/01b-get-started-api/get-started-api.html#you-can-access-ncei-ghcnd-data-from-the-internet-using-its-api",
    "title": "Get started with open reproducible science! (API version)",
    "section": "You can access NCEI GHCNd Data from the internet using its API üñ•Ô∏è üì° üñ•Ô∏è",
    "text": "You can access NCEI GHCNd Data from the internet using its API üñ•Ô∏è üì° üñ•Ô∏è\nThe cell below contains the URL for the data you will use in this part of the notebook. We created this URL by generating what is called an API endpoint using the NCEI API documentation.\n\n\n\n\n\n\nNote\n\n\n\nAn application programming interface (API) is a way for two or more computer programs or components to communicate with each other. It is a type of software interface, offering a service to other pieces of software (Wikipedia).\n\n\nHowever, we still have a problem - we can‚Äôt get the URL back later on because it isn‚Äôt saved in a variable. In other words, we need to give the url a name so that we can request in from Python later (sadly, Python has no ‚Äòhey what was that thingy I typed yesterday?‚Äô function).\n\n\n\n\n\n\n Read more\n\n\n\nCheck out the textbook section on variables\n\n\n\n\n\n\n\n\n Your task\n\n\n\n\nPick an expressive variable name for the URL\n\nHINT: click on the Variables button up top to see all your variables. Your new url variable will not be there until you define it and run the code\n\nReformat the URL so that it adheres to the 79-character PEP-8 line limit\n\nHINT: You should see two vertical lines in each cell - don‚Äôt let your code go past the second line\n\nAt the end of the cell where you define your url variable, call your variable (type out its name) so it can be tested.\n\n\n\n\nstuff23 = ('https://www.ncei.noaa.gov/access/services/da'\n'ta/v1?dataset=daily-summaries&dataTypes=TOBS,PRCP&stations=USC00050848&startDate=1893-10-01&endDate=2024-02-18&includeStationName=true&includeStation'\n'Location=1&units=standard')\nstuff23\n\n'https://www.ncei.noaa.gov/access/services/data/v1?dataset=daily-summaries&dataTypes=TOBS,PRCP&stations=USC00050848&startDate=1893-10-01&endDate=2024-02-18&includeStationName=true&includeStationLocation=1&units=standard'\n\n\n\n\nSee our solution!\nboulder_url = (\n    'https://www.ncei.noaa.gov/access/services/data/v1'\n    '?dataset=daily-summaries'\n    '&dataTypes=TOBS,PRCP'\n    '&stations=USC00050848'\n    '&startDate=1893-10-01'\n    '&endDate=2024-02-18'\n    '&includeStationName=true'\n    '&includeStationLocation=1'\n    '&units=standard')\nboulder_url\n\n\n'https://www.ncei.noaa.gov/access/services/data/v1?dataset=daily-summaries&dataTypes=TOBS,PRCP&stations=USC00050848&startDate=1893-10-01&endDate=2024-02-18&includeStationName=true&includeStationLocation=1&units=standard'\n\n\n\n# DO NOT MODIFY THIS TEST CELL\nresp_url = _\npoints = 0\n\nif type(resp_url)==str:\n    points += 3\n    print('\\u2705 Great work! You correctly called your url variable.')\nelse:\n    print('\\u274C Oops - your url variable was not called correctly.')\n\nif len(resp_url)==218:\n    points += 3\n    print('\\u2705 Great work! Your url is the correct length.')\nelse:\n    print('\\u274C Oops - your url variable is not the correct length.')\n\nprint('You earned {} of 6 points for defining a url variable'.format(points))\n\n‚úÖ Great work! You correctly called your url variable.\n‚úÖ Great work! Your url is the correct length.\nYou earned 6 of 6 points for defining a url variable",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#download-and-get-started-working-with-ncei-data",
    "href": "notebooks/01b-get-started-api/get-started-api.html#download-and-get-started-working-with-ncei-data",
    "title": "Get started with open reproducible science! (API version)",
    "section": "Download and get started working with NCEI data",
    "text": "Download and get started working with NCEI data\nThe pandas library you imported can download data from the internet directly into a type of Python object called a DataFrame. In the code cell below, you can see an attempt to do just this. But there are some problems‚Ä¶\n\n\n\n\n\n\n You‚Äôre ready to fix some code!\n\n\n\nYour task is to:\n\nLeave a space between the # and text in the comment and try making the comment more informative\nMake any changes needed to get this code to run. HINT: The my_url variable doesn‚Äôt exist - you need to replace it with the variable name you chose.\nModify the .read_csv() statement to include the following parameters:\n\nindex_col='DATE' ‚Äì this sets the DATE column as the index. Needed for subsetting and resampling later on\nparse_dates=True ‚Äì this lets python know that you are working with time-series data, and values in the indexed column are date time objects\nna_values=['NaN'] ‚Äì this lets python know how to handle missing values\n\nClean up the code by using expressive variable names, expressive column names, PEP-8 compliant code, and descriptive comments\n\n\n\n\nMake sure to call your DataFrame by typing it‚Äôs name as the last line of your code cell Then, you will be able to run the test cell below and find out if your answer is correct.\n\n\nboulder_df = pd.read_csv(\n  boulder_url,\n  index_col='something')\nboulder_df\n\nValueError: Index something invalid\n\n\n\n\nSee our solution!\n# Download the Boulder climate data\nboulder_df = pd.read_csv(\n  boulder_url,\n  index_col='DATE',\n  parse_dates=True,\n  na_values=['NaN'])\nboulder_df\n\n\n\n\n\n\n\n\n\n\nSTATION\nNAME\nLATITUDE\nLONGITUDE\nELEVATION\nPRCP\nTOBS\n\n\nDATE\n\n\n\n\n\n\n\n\n\n\n\n1893-10-01\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.94\nNaN\n\n\n1893-10-02\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.00\nNaN\n\n\n1893-10-03\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.00\nNaN\n\n\n1893-10-04\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.04\nNaN\n\n\n1893-10-05\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.00\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2024-02-14\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.00\n41.0\n\n\n2024-02-15\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.00\n39.0\n\n\n2024-02-16\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.20\n23.0\n\n\n2024-02-17\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.22\n23.0\n\n\n2024-02-18\nUSC00050848\nBOULDER, CO US\n39.99282\n-105.26683\n1673.0\n0.00\n42.0\n\n\n\n\n46112 rows √ó 7 columns\n\n\n\n\n\n# DO NOT MODIFY THIS TEST CELL\ntmax_df_resp = _\npoints = 0\n\nif isinstance(tmax_df_resp, pd.DataFrame):\n    points += 1\n    print('\\u2705 Great work! You called a DataFrame.')\nelse:\n    print('\\u274C Oops - make sure to call your DataFrame for testing.')\n\nprint('You earned {} of 2 points for downloading data'.format(points))\n\n‚úÖ Great work! You called a DataFrame.\nYou earned 1 of 2 points for downloading data\n\n\n\nHINT: Check out the type() function below - you can use it to check that your data is now in DataFrame type object\n\n\n# Check that the data was imported into a pandas DataFrame\ntype(boulder_df)\n\npandas.core.frame.DataFrame\n\n\n\n\n\n\n\n\n Clean up your DataFrame\n\n\n\nUse double brackets to only select the columns you want in your DataFrame\n\n\n\nMake sure to call your DataFrame by typing it‚Äôs name as the last line of your code cell Then, you will be able to run the test cell below and find out if your answer is correct.\n\n\nboulder_df = boulder_df[['some_col', 'another_col']]\nboulder_df\n\nKeyError: \"None of [Index(['some_col', 'another_col'], dtype='object')] are in the [columns]\"\n\n\n\n\nSee our solution!\n# Clean up the DataFrame\nboulder_df = boulder_df[['PRCP', 'TOBS']]\nboulder_df\n\n\n\n\n\n\n\n\n\n\nPRCP\nTOBS\n\n\nDATE\n\n\n\n\n\n\n1893-10-01\n0.94\nNaN\n\n\n1893-10-02\n0.00\nNaN\n\n\n1893-10-03\n0.00\nNaN\n\n\n1893-10-04\n0.04\nNaN\n\n\n1893-10-05\n0.00\nNaN\n\n\n...\n...\n...\n\n\n2024-02-14\n0.00\n41.0\n\n\n2024-02-15\n0.00\n39.0\n\n\n2024-02-16\n0.20\n23.0\n\n\n2024-02-17\n0.22\n23.0\n\n\n2024-02-18\n0.00\n42.0\n\n\n\n\n46112 rows √ó 2 columns\n\n\n\n\n\n# DO NOT MODIFY THIS TEST CELL\ntmax_df_resp = _\npoints = 0\n\nsummary = [round(val, 2) for val in tmax_df_resp.mean().values]\nif summary == [0.05, 54.53]:\n    points += 4\n    print('\\u2705 Great work! You correctly downloaded data.')\nelse:\n    print('\\u274C Oops - your data are not correct.')\nprint('You earned {} of 5 points for downloading data'.format(points))\n\n‚úÖ Great work! You correctly downloaded data.\nYou earned 4 of 5 points for downloading data",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#plot-the-precpitation-column-prcp-vs-time-to-explore-the-data",
    "href": "notebooks/01b-get-started-api/get-started-api.html#plot-the-precpitation-column-prcp-vs-time-to-explore-the-data",
    "title": "Get started with open reproducible science! (API version)",
    "section": "Plot the precpitation column (PRCP) vs time to explore the data",
    "text": "Plot the precpitation column (PRCP) vs time to explore the data\nPlotting in Python is easy, but not quite this easy:\n\nboulder_df.plot()\n\n\n\n\n\n\n\n\nYou‚Äôll always need to add some instructions on labels and how you want your plot to look.\n\n\n\n\n\n\nImportant\n\n\n\n\nChange dataframe to your DataFrame name.\nChange y= to the name of your observed temperature column name.\nUse the title, ylabel, and xlabel parameters to add key text to your plot.\nAdjust the size of your figure using figsize=(x,y) where x is figure width and y is figure height\n\n\nHINT: labels have to be a type in Python called a string. You can make a string by putting quotes around your label, just like the column names in the sample code (eg y='TOBS').\n\n\n\n\n# Plot the temperature vs time\nyour_dataframe_name.plot(y='temperature_col_name', figsize=(10,6))\n\nNameError: name 'your_dataframe_name' is not defined\n\n\n\n\n\n\n\n\n Your task: Playing with code\n\n\n\n\nReplace dataframe with the name of your dataframe whenever it appears.\nReplace the title and axis labels with something more appropriate for this data.\nRun the code below.\n\n\n\n\n# Plot the data using .plot\nboulder_df.plot(\n    y='the_precipitation_column',\n    title='Title Goes Here',\n    xlabel='Horizontal Axis Label Goes Here',\n    ylabel='Vertical Axis Label Goes Here')\n\nKeyError: 'the_precipitation_column'\n\n\n\n\nSee our solution!\n# Plot the data using .plot\nboulder_df.plot(\n    y='PRCP',\n    title='Daily Precipitation in Boulder, CO',\n    xlabel='Date',\n    ylabel='Precipitation (mm)')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Want an EXTRA CHALLENGE?\n\n\n\nThere are many other things you can do to customize your plot. Take a look at the pandas plotting galleries and the documentation of plot to see if there‚Äôs other changes you want to make to your plot. Some possibilities include:\n\nRemove the legend since there‚Äôs only one data series\nIncrease the figure size\nIncrease the font size\nChange the colors\nUse a bar graph instead (usually we use lines for time series, but since this is annual it could go either way)\nAdd a trend line\n\nNot sure how to do any of these? Try searching the internet, or asking an AI!\n\n\n\n\n\n\n\n\n\n Convert units\n\n\n\nModify the code below to add a column that includes temperature in Celsius. The code below was written by your colleague. Can you fix this so that it correctly calculates temperature in Celsius and adds a new column?\n\n\n\n# Convert to celcius\nboulder_df['TCel'] = boulder_df['temperature_col_name'] - 32 * 5 / 9\nboulder_df\n\nKeyError: 'temperature_col_name'\n\n\n\n\nSee our solution!\n# Convert to celcius\nboulder_df['TCel'] = (boulder_df['TOBS'] - 32) * 5 / 9\nboulder_df\n\n\n/tmp/ipykernel_2787/860760448.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  boulder_df['TCel'] = (boulder_df['TOBS'] - 32) * 5 / 9\n\n\n\n\n\n\n\n\n\n\nPRCP\nTOBS\nTCel\n\n\nDATE\n\n\n\n\n\n\n\n1893-10-01\n0.94\nNaN\nNaN\n\n\n1893-10-02\n0.00\nNaN\nNaN\n\n\n1893-10-03\n0.00\nNaN\nNaN\n\n\n1893-10-04\n0.04\nNaN\nNaN\n\n\n1893-10-05\n0.00\nNaN\nNaN\n\n\n...\n...\n...\n...\n\n\n2024-02-14\n0.00\n41.0\n5.000000\n\n\n2024-02-15\n0.00\n39.0\n3.888889\n\n\n2024-02-16\n0.20\n23.0\n-5.000000\n\n\n2024-02-17\n0.22\n23.0\n-5.000000\n\n\n2024-02-18\n0.00\n42.0\n5.555556\n\n\n\n\n46112 rows √ó 3 columns\n\n\n\n\n\n# DO NOT MODIFY THIS TEST CELL\ntmax_df_resp = _\npoints = 0\n\nif isinstance(tmax_df_resp, pd.DataFrame):\n    points += 1\n    print('\\u2705 Great work! You called a DataFrame.')\nelse:\n    print('\\u274C Oops - make sure to call your DataFrame for testing.')\n\nsummary = [round(val, 4) for val in tmax_df_resp.mean().values]\nif summary == [0.0543, 54.5313, 12.5174]:\n    points += 4\n    print('\\u2705 Great work! You correctly converted to Celcius.')\nelse:\n    print('\\u274C Oops - your data are not correct.')\nprint('You earned {} of 5 points for converting to Celcius'.format(points))\n\n‚úÖ Great work! You called a DataFrame.\n‚úÖ Great work! You correctly converted to Celcius.\nYou earned 5 of 5 points for converting to Celcius\n\n\n\n\n\n\n\n\n Want an EXTRA CHALLENGE?\n\n\n\n\nAs you did above, rewrite the code to be more expressive\nUsing the code below as a framework, write and apply a function that converts to Celcius. &gt; Functions let you reuse code you have already written\nYou should also rewrite this function and parameter names to be more expressive.\n\n\n\n\ndef a_function(a_parameter):\n    \"\"\"Convert temperature to Celcius\"\"\"\n    return a_parameter # Put your equation in here\n\ndataframe['celcius_column'] = dataframe['fahrenheit_column'].apply(convert)\n\nNameError: name 'dataframe' is not defined\n\n\n\n\nSee our solution!\ndef convert_to_celcius(fahrenheit):\n    \"\"\"Convert temperature to Celcius\"\"\"\n    return (fahrenheit - 32) * 5 / 9\n\nboulder_df['TCel'] = boulder_df['TOBS'].apply(convert_to_celcius)\n\n\n/tmp/ipykernel_2787/3586141558.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  boulder_df['TCel'] = boulder_df['TOBS'].apply(convert_to_celcius)",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#subsetting-and-resampling",
    "href": "notebooks/01b-get-started-api/get-started-api.html#subsetting-and-resampling",
    "title": "Get started with open reproducible science! (API version)",
    "section": "Subsetting and Resampling",
    "text": "Subsetting and Resampling\nOften when working with time-series data you may want to focus on a shorter window of time, or look at weekly, monthly, or annual summaries to help make the analysis more manageable.\n\n\n\n\n\n\n Read more\n\n\n\nRead more about subsetting and resampling time-series data in our Learning Portal.\n\n\nFor this demonstration, we will look at the last 30-40 years worth of data and resample to explore a summary from each year that data were recorded.\n\n\n\n\n\n\n Your task\n\n\n\n\nReplace start-year and end-year with the years that begin and end the window of time that you would like to explore\nReplace dataframe with the name of your data\nReplace new_variable_name with something more expressive\nCall your new variable\nRun the cell\n\n\n\n\n# Subset the data to look at 1983-2023\nboulder_1983_2023 = boulder_df['1983':'2023']\nboulder_1983_2023\n\n\n\n\n\n\n\n\n\nPRCP\nTOBS\nTCel\n\n\nDATE\n\n\n\n\n\n\n\n1983-01-01\n0.0\nNaN\nNaN\n\n\n1983-01-02\n0.0\nNaN\nNaN\n\n\n1983-01-03\n0.0\nNaN\nNaN\n\n\n1983-01-04\n0.0\nNaN\nNaN\n\n\n1983-01-05\n0.0\nNaN\nNaN\n\n\n...\n...\n...\n...\n\n\n2023-12-27\n0.0\n41.0\n5.000000\n\n\n2023-12-28\n0.0\nNaN\nNaN\n\n\n2023-12-29\n0.0\n39.0\n3.888889\n\n\n2023-12-30\n0.0\n38.0\n3.333333\n\n\n2023-12-31\n0.0\n33.0\n0.555556\n\n\n\n\n14629 rows √ó 3 columns\n\n\n\n\n\n# DO NOT MODIFY THIS TEST CELL\ntmax_df_resp = _\npoints = 0\n\nif isinstance(tmax_df_resp, pd.DataFrame):\n    points += 1\n    print('\\u2705 Great work! You called a DataFrame.')\nelse:\n    print('\\u274C Oops - make sure to call your DataFrame for testing.')\n\nsummary = [round(val, 2) for val in tmax_df_resp.mean().values]\nif summary == [0.06, 55.67, 13.15]:\n    points += 4\n    print('\\u2705 Great work! You correctly converted to Celcius.')\nelse:\n    print('\\u274C Oops - your data are not correct.')\nprint('You earned {} of 5 points for converting to Celcius'.format(points))\n\n‚úÖ Great work! You called a DataFrame.\n‚úÖ Great work! You correctly converted to Celcius.\nYou earned 5 of 5 points for converting to Celcius",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#now-we-are-ready-to-calculate-annual-statistics",
    "href": "notebooks/01b-get-started-api/get-started-api.html#now-we-are-ready-to-calculate-annual-statistics",
    "title": "Get started with open reproducible science! (API version)",
    "section": "Now we are ready to calculate annual statistics",
    "text": "Now we are ready to calculate annual statistics\nHere you will resample the 2013-2023 data to look the annual mean values.\n\n\n\n\n\n\n Resample your data\n\n\n\n\nReplace new_variable_name with the variable you created in the cell above where you subset the data\nReplace 'TIME' with a 'W', 'M', or 'Y' depending on whether you‚Äôre doing a weekly, monthly, or yearly summary\nReplace STAT with a sum, min, max, or mean depending on what kind of statistic you‚Äôre interested in calculating.\nReplace resampled_data with a more expressive variable name\nCall your new variable\nRun the cell\n\n\n\n\n# Resample the data to look at yearly mean values\nboulder_yearly_mean = boulder_1983_2023.resample('Y').mean()\nboulder_yearly_mean\n\n/tmp/ipykernel_2787/2796985930.py:2: FutureWarning: 'Y' is deprecated and will be removed in a future version, please use 'YE' instead.\n  boulder_yearly_mean = boulder_1983_2023.resample('Y').mean()\n\n\n\n\n\n\n\n\n\n\nPRCP\nTOBS\nTCel\n\n\nDATE\n\n\n\n\n\n\n\n1983-12-31\n0.068588\n53.319749\n11.844305\n\n\n1984-12-31\n0.050656\n50.601093\n10.333940\n\n\n1985-12-31\n0.047781\n52.354571\n11.308095\n\n\n1986-12-31\n0.058493\n55.616438\n13.120244\n\n\n1987-12-31\n0.070740\n54.205479\n12.336377\n\n\n1988-12-31\n0.046311\n54.650273\n12.583485\n\n\n1989-12-31\n0.058585\n55.400943\n13.000524\n\n\n1990-12-31\n0.053782\n59.463504\n15.257502\n\n\n1991-12-31\n0.058000\n54.498623\n12.499235\n\n\n1992-12-31\n0.047486\n54.556164\n12.531202\n\n\n1993-12-31\n0.062365\n50.829341\n10.460745\n\n\n1994-12-31\n0.046000\n38.715789\n3.730994\n\n\n1995-12-31\n0.080630\n54.792818\n12.662676\n\n\n1996-12-31\n0.059235\n55.233516\n12.907509\n\n\n1997-12-31\n0.078055\n54.274725\n12.374847\n\n\n1998-12-31\n0.061068\n55.931507\n13.295282\n\n\n1999-12-31\n0.071099\n56.079452\n13.377473\n\n\n2000-12-31\n0.043434\n56.719780\n13.733211\n\n\n2001-12-31\n0.049863\n56.457534\n13.587519\n\n\n2002-12-31\n0.038027\n56.638356\n13.687976\n\n\n2003-12-31\n0.060329\n57.230137\n14.016743\n\n\n2004-12-31\n0.074235\n55.420765\n13.011536\n\n\n2005-12-31\n0.047726\n56.871233\n13.817352\n\n\n2006-12-31\n0.052904\n57.772603\n14.318113\n\n\n2007-12-31\n0.047205\n56.616438\n13.675799\n\n\n2008-12-31\n0.046503\n56.175342\n13.430746\n\n\n2009-12-31\n0.057216\n54.212575\n12.340319\n\n\n2010-12-31\n0.055644\n55.854795\n13.252664\n\n\n2011-12-31\n0.061068\n55.975275\n13.319597\n\n\n2012-12-31\n0.042760\n59.857534\n15.476408\n\n\n2013-12-31\n0.093562\n55.454795\n13.030441\n\n\n2014-12-31\n0.064575\n55.367123\n12.981735\n\n\n2015-12-31\n0.073753\n56.710744\n13.728191\n\n\n2016-12-31\n0.047131\n57.836066\n14.353370\n\n\n2017-12-31\n0.061617\n60.129129\n15.627294\n\n\n2018-12-31\n0.052740\n57.005479\n13.891933\n\n\n2019-12-31\n0.057644\n54.426997\n12.459443\n\n\n2020-12-31\n0.046721\n57.691460\n14.273033\n\n\n2021-12-31\n0.056658\n57.538462\n14.188034\n\n\n2022-12-31\n0.051479\n56.139726\n13.410959\n\n\n2023-12-31\n0.062740\n55.694215\n13.163453\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Plot your resampled data\n\n\n\n\n\n\n\n# Plot mean annual temperature values\n\n\n\n\n\n\n\n\n Describe your plot\n\n\n\nWe like to use an approach called ‚ÄúAssertion-Evidence‚Äù for presenting scientific results. There‚Äôs a lot of video tutorials and example talks available on the Assertion-Evidence web page. The main thing you need to do now is to practice writing a message or headline rather than descriptions or topic sentences for the plot you just made (what they refer to as ‚Äúvisual evidence‚Äù).\nFor example, it would be tempting to write something like ‚ÄúA plot of maximum annual temperature in Boulder, Colorado over time (1983-2023)‚Äù. However, this doesn‚Äôt give the reader anything to look at, or explain why we made this particular plot (we know, you made this one because we told you to)\nSome alternatives that are more of a starting point for a presentation or conversation are: * Boulder, CO experienced cooler than average temperatures in 1995 * Temperatures in Bouler, CO appear to be on the rise over the past 40 years * Maximum annual temperatures in Boulder, CO are becoming more variable over the previous 40 years\nWe could back up some of these claims with further analysis included later on, but we want to make sure that our audience has some guidance on what to look for in the plot.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#your-boulder-plot-headline-here",
    "href": "notebooks/01b-get-started-api/get-started-api.html#your-boulder-plot-headline-here",
    "title": "Get started with open reproducible science! (API version)",
    "section": "YOUR BOULDER PLOT HEADLINE HERE üì∞ üóûÔ∏è üìª",
    "text": "YOUR BOULDER PLOT HEADLINE HERE üì∞ üóûÔ∏è üìª\nDescribe your plot in this cell in 2-3 sentences\n\n\n\nWriting bear\n\n\n\nImage credit: https://www.craiyon.com/image/OAbZtyelSoS7FdGko6hvQg",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#your-turn-pick-a-new-location-andor-measurement-to-plot",
    "href": "notebooks/01b-get-started-api/get-started-api.html#your-turn-pick-a-new-location-andor-measurement-to-plot",
    "title": "Get started with open reproducible science! (API version)",
    "section": "Your turn: pick a new location and/or measurement to plot üåè üìà",
    "text": "Your turn: pick a new location and/or measurement to plot üåè üìà\nBelow (or in a new notebook!), recreate the workflow you just did in a place that interests you OR with a different measurement. See the instructions above to adapt the URL that we created for Boulder, CO using the NCEI API. You will need to make your own new Markdown and Code cells below this one, or create a new notebook.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#congratulations-youre-almost-done-with-this-coding-challenge-now-make-sure-that-your-code-is-reproducible",
    "href": "notebooks/01b-get-started-api/get-started-api.html#congratulations-youre-almost-done-with-this-coding-challenge-now-make-sure-that-your-code-is-reproducible",
    "title": "Get started with open reproducible science! (API version)",
    "section": "Congratulations, you‚Äôre almost done with this coding challenge ü§© ‚Äì now make sure that your code is reproducible",
    "text": "Congratulations, you‚Äôre almost done with this coding challenge ü§© ‚Äì now make sure that your code is reproducible\n\n\nImage source: https://dfwurbanwildlife.com/2018/03/25/chris-jacksons-dfw-urban-wildlife/snow-geese-galore/\n\n\n\n\n\n\n\n Your task\n\n\n\n\nIf you didn‚Äôt already, go back to the code you modified about and write more descriptive comments so the next person to use this code knows what it does.\nMake sure to Restart and Run all up at the top of your notebook. This will clear all your variables and make sure that your code runs in the correct order. It will also export your work in Markdown format, which you can put on your website.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "notebooks/01b-get-started-api/get-started-api.html#bonus-create-a-shareable-markdown-of-your-work",
    "href": "notebooks/01b-get-started-api/get-started-api.html#bonus-create-a-shareable-markdown-of-your-work",
    "title": "Get started with open reproducible science! (API version)",
    "section": "BONUS: Create a shareable Markdown of your work",
    "text": "BONUS: Create a shareable Markdown of your work\nBelow is some code that you can run that will save a Markdown file of your work that is easily shareable and can be uploaded to GitHub Pages. You can use it as a starting point for writing your portfolio post!\n\n%%capture\n%%bash\njupyter nbconvert 01-dsc-open-science.ipynb --to markdown\n\nCalledProcessError: Command 'b'jupyter nbconvert 01-dsc-open-science.ipynb --to markdown\\n'' returned non-zero exit status 127.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Climate Coding Challenge",
      "Get started with open reproducible science! (API version)"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/05-map.html",
    "href": "pages/03-git-github/03-github-portfolio/05-map.html",
    "title": "Add a map to your website",
    "section": "",
    "text": "Vector data are composed of discrete geometric locations (x and y values, or latitude and longitude) that define the ‚Äúshape‚Äù of the spatial object. The organization of the vertices determines the type of vector that you are working with. There are three fundamental types of vector data:\nPoints: Each individual point is defined by a single x, y coordinate. Examples of point data include: sampling locations, the location of individual trees or the location of plots.\nLines: Lines are composed of many (at least 2) vertices, or points, that are connected. For instance, a road or a stream may be represented by a line. This line is composed of a series of segments, each bend in the road or stream represents a vertex that has defined x, y location.\nPolygons: A polygon consists of 3 or more vertices that are connected and closed. Thus, the outlines of plot boundaries, lakes, oceans, and states or countries are often represented by polygons.\n\n\n\nThere are three types of vector data ‚Äì point, line, and polygon\n\n\n\n\n\n\n\n\nTip\n\n\n\nRead more about working with spatial data using Python in our Intro to Earth Data Science, here.\n\n\n\n\n\nTo complete this activity, you will need somewhere to run your code. Start by going to this repository on GitHub. We‚Äôve set it up so that anyone can run Python code from there!\nOnce you are on the website, follow these instructions to get your Codespace up and running:\n1. Click on Use this Template in the upper right, and select Open in Codespace. This might take a minute if you haven't done it in awhile.\n2. Once the Codespace loads, open `!00-first-map.ipynb` using the `Folders` tab on the left-hand side.\n3. Continue working through the sample notebook. All the code should start off the same as what is on this page, but there's more background information here if you want it.\n4. Once you are done, [stop your Codespace](https://docs.github.com/en/codespaces/developing-in-a-codespace/stopping-and-starting-a-codespace#stopping-a-codespace) so you don't use up your allocation!\n\n\n\nOpen Street Map (OSM) is an open-source, editable map of the world ‚Äì a little like a wiki for places. They also provide a service for looking up locations using text, which we‚Äôll be using in this activity.\n\n\n\nYou‚Äôll need to start by importing some libraries to have access to all the code you need.\n\n# Work with vector data\nimport geopandas as gpd\n\n# Save maps and plots to files\nimport holoviews as hv\n# Create interactive maps and plots\nimport hvplot.pandas\n\n# Search for locations by name - this might take a moment\nfrom osmnx import features as osm\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nYou can use the pyrosm package to download and search for spatial vector data in your area, or anywhere around the world.\nIn this case, we‚Äôre looking for the location of the United Tribes Technical College campus in North Dakota. The address in here, 'United Tribes Technical College, Bismarck, ND, United States', does not have to be complete or exact, but it should be specific enough to narrow it down. We are also specifying that we want it to be tagges as a 'amentity' type, specifically a 'college' You might have to try a couple different searches with different addresses and/or tags to get the address you want, just like if you are using a map website or app.\n\n# Search for United Tribes Technical College\nuttc_gdf = osm.features_from_address(\n    'United Tribes Technical College, Bismarck, ND, United States',\n    {'amenity': ['college']})\nuttc_gdf\n\n\n\n\n\n\n\n\n\n\nnodes\naddr:city\naddr:housenumber\naddr:postcode\naddr:state\naddr:street\namenity\nname\nwebsite\nwikidata\ngeometry\n\n\nelement_type\nosmid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nway\n1157021269\n[10759584855, 10759584856, 10759584857, 450404...\nBismarck\n3315\n58504\nND\nUniversity Drive\ncollege\nUnited Tribes Technical College\nhttps://uttc.edu/\nQ7893617\nPOLYGON ((-100.76305 46.76853, -100.76302 46.7...\n\n\n\n\n\n\n\n\n\nuttc_gdf.plot()\n\n\n\n\n\n\n\n\nWe have a map of the UTTC Campus!\n\n\n\n\n\n\nWarning\n\n\n\nThe Open Street Maps (OSM) database is not always complete. For example, try searching for UTTC with the {'building': True}, and compare it to the map of the UTTC campus on their website. What do you notice?\n\n\n\n\n\nThere are lots of different ways to create maps and plots in Python. Here, we‚Äôre going to use a tool called 'hvplot' and 'geoviews' to create an interactive map, including the online 'EsriImagery' tile source basemap.\n\n# Plot UTTC boundary\nuttc_map = uttc_gdf.reset_index().hvplot(\n    # Givethe map a descriptive title\n    title=\"United Tribes Technical College, Bismarck, ND\",\n    # Add a basemap\n    geo=True, tiles='EsriImagery',\n    # Change the colors\n    fill_color='white', fill_alpha=0.2,\n    line_color='skyblue', line_width=5,\n    # Change the image size\n    frame_width=400, frame_height=400)\n\n# Save the map as a file to put on the web\nhv.save(uttc_map, 'uttc.html')\n\n# Display the map\nuttc_map\n\nWARNING:bokeh.core.validation.check:W-1005 (FIXED_SIZING_MODE): 'fixed' sizing mode requires width and height to be set: figure(id='p1043', ...)\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nIf you are doing this activity on GitHub Codespaces, you will need to download the map you created:\n\nOpen the Folders tab on the left hand side\nRight-click on uttc.html (or whatever you named your file)\nSelect Download...\n\nThis should download your map.\n\n\n\nYou are now ready to upload your map to your portfolio repository and place it in your webpage. Because it is HTML and not an image, you will need to use the following HTML to get it on your page:\n&lt;embed \n  type=\"text/html\" src=\"uttc.html\"\n  width=600, height=600&gt;\n&lt;/embed&gt;\n\n\n\n\n\n\n\n\nImportant\n\n\n\nMake sure to make the width and height of your embed element larger than the frame_width and frame_height of your plot, or it will get cut off!",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Add a map to your website"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/05-map.html#get-started-with-map-making-using-open-sources-tools",
    "href": "pages/03-git-github/03-github-portfolio/05-map.html#get-started-with-map-making-using-open-sources-tools",
    "title": "Add a map to your website",
    "section": "",
    "text": "Vector data are composed of discrete geometric locations (x and y values, or latitude and longitude) that define the ‚Äúshape‚Äù of the spatial object. The organization of the vertices determines the type of vector that you are working with. There are three fundamental types of vector data:\nPoints: Each individual point is defined by a single x, y coordinate. Examples of point data include: sampling locations, the location of individual trees or the location of plots.\nLines: Lines are composed of many (at least 2) vertices, or points, that are connected. For instance, a road or a stream may be represented by a line. This line is composed of a series of segments, each bend in the road or stream represents a vertex that has defined x, y location.\nPolygons: A polygon consists of 3 or more vertices that are connected and closed. Thus, the outlines of plot boundaries, lakes, oceans, and states or countries are often represented by polygons.\n\n\n\nThere are three types of vector data ‚Äì point, line, and polygon\n\n\n\n\n\n\n\n\nTip\n\n\n\nRead more about working with spatial data using Python in our Intro to Earth Data Science, here.\n\n\n\n\n\nTo complete this activity, you will need somewhere to run your code. Start by going to this repository on GitHub. We‚Äôve set it up so that anyone can run Python code from there!\nOnce you are on the website, follow these instructions to get your Codespace up and running:\n1. Click on Use this Template in the upper right, and select Open in Codespace. This might take a minute if you haven't done it in awhile.\n2. Once the Codespace loads, open `!00-first-map.ipynb` using the `Folders` tab on the left-hand side.\n3. Continue working through the sample notebook. All the code should start off the same as what is on this page, but there's more background information here if you want it.\n4. Once you are done, [stop your Codespace](https://docs.github.com/en/codespaces/developing-in-a-codespace/stopping-and-starting-a-codespace#stopping-a-codespace) so you don't use up your allocation!\n\n\n\nOpen Street Map (OSM) is an open-source, editable map of the world ‚Äì a little like a wiki for places. They also provide a service for looking up locations using text, which we‚Äôll be using in this activity.\n\n\n\nYou‚Äôll need to start by importing some libraries to have access to all the code you need.\n\n# Work with vector data\nimport geopandas as gpd\n\n# Save maps and plots to files\nimport holoviews as hv\n# Create interactive maps and plots\nimport hvplot.pandas\n\n# Search for locations by name - this might take a moment\nfrom osmnx import features as osm\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nYou can use the pyrosm package to download and search for spatial vector data in your area, or anywhere around the world.\nIn this case, we‚Äôre looking for the location of the United Tribes Technical College campus in North Dakota. The address in here, 'United Tribes Technical College, Bismarck, ND, United States', does not have to be complete or exact, but it should be specific enough to narrow it down. We are also specifying that we want it to be tagges as a 'amentity' type, specifically a 'college' You might have to try a couple different searches with different addresses and/or tags to get the address you want, just like if you are using a map website or app.\n\n# Search for United Tribes Technical College\nuttc_gdf = osm.features_from_address(\n    'United Tribes Technical College, Bismarck, ND, United States',\n    {'amenity': ['college']})\nuttc_gdf\n\n\n\n\n\n\n\n\n\n\nnodes\naddr:city\naddr:housenumber\naddr:postcode\naddr:state\naddr:street\namenity\nname\nwebsite\nwikidata\ngeometry\n\n\nelement_type\nosmid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nway\n1157021269\n[10759584855, 10759584856, 10759584857, 450404...\nBismarck\n3315\n58504\nND\nUniversity Drive\ncollege\nUnited Tribes Technical College\nhttps://uttc.edu/\nQ7893617\nPOLYGON ((-100.76305 46.76853, -100.76302 46.7...\n\n\n\n\n\n\n\n\n\nuttc_gdf.plot()\n\n\n\n\n\n\n\n\nWe have a map of the UTTC Campus!\n\n\n\n\n\n\nWarning\n\n\n\nThe Open Street Maps (OSM) database is not always complete. For example, try searching for UTTC with the {'building': True}, and compare it to the map of the UTTC campus on their website. What do you notice?\n\n\n\n\n\nThere are lots of different ways to create maps and plots in Python. Here, we‚Äôre going to use a tool called 'hvplot' and 'geoviews' to create an interactive map, including the online 'EsriImagery' tile source basemap.\n\n# Plot UTTC boundary\nuttc_map = uttc_gdf.reset_index().hvplot(\n    # Givethe map a descriptive title\n    title=\"United Tribes Technical College, Bismarck, ND\",\n    # Add a basemap\n    geo=True, tiles='EsriImagery',\n    # Change the colors\n    fill_color='white', fill_alpha=0.2,\n    line_color='skyblue', line_width=5,\n    # Change the image size\n    frame_width=400, frame_height=400)\n\n# Save the map as a file to put on the web\nhv.save(uttc_map, 'uttc.html')\n\n# Display the map\nuttc_map\n\nWARNING:bokeh.core.validation.check:W-1005 (FIXED_SIZING_MODE): 'fixed' sizing mode requires width and height to be set: figure(id='p1043', ...)\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\nIf you are doing this activity on GitHub Codespaces, you will need to download the map you created:\n\nOpen the Folders tab on the left hand side\nRight-click on uttc.html (or whatever you named your file)\nSelect Download...\n\nThis should download your map.\n\n\n\nYou are now ready to upload your map to your portfolio repository and place it in your webpage. Because it is HTML and not an image, you will need to use the following HTML to get it on your page:\n&lt;embed \n  type=\"text/html\" src=\"uttc.html\"\n  width=600, height=600&gt;\n&lt;/embed&gt;\n\n\n\n\n\n\n\n\nImportant\n\n\n\nMake sure to make the width and height of your embed element larger than the frame_width and frame_height of your plot, or it will get cut off!",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Add a map to your website"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/03-html.html",
    "href": "pages/03-git-github/03-github-portfolio/03-html.html",
    "title": "Customize your website content",
    "section": "",
    "text": "Most web pages are built using three key technologies:\n\nHyper-Text Markup Language (HTML) includes and structures the content\nCascading Style Sheets (CSS) controls how the page looks\nJavascript (JS) controls what the page does\n\nWhen using GitHub Pages, you can rely on GitHub to translate Markdown to HTML before putting it on the web using a system called Jekyll. You can see the result by:\n\nNavigate to your portfolio page on the internet\nRight-click anywhere on the page\nSelect an option like Inspect or Web Developer Tools, depending on your browser.\n\nYou should now see the source code for your webpage in a new panel. What do you notice about your content? How is it different from what you wrote?\n\n\n\nWeb developer tools\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also control CSS and JS to a limited extent on GitHub Pages. However, we recommend sticking with the CSS and JS supplied by a Jekyll theme created by a designer. It‚Äôs hard to make a website that looks good from scratch. We‚Äôll get into how to add a theme using Jekyll later on.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Customize your website content"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/03-html.html#the-building-blocks-of-the-web",
    "href": "pages/03-git-github/03-github-portfolio/03-html.html#the-building-blocks-of-the-web",
    "title": "Customize your website content",
    "section": "",
    "text": "Most web pages are built using three key technologies:\n\nHyper-Text Markup Language (HTML) includes and structures the content\nCascading Style Sheets (CSS) controls how the page looks\nJavascript (JS) controls what the page does\n\nWhen using GitHub Pages, you can rely on GitHub to translate Markdown to HTML before putting it on the web using a system called Jekyll. You can see the result by:\n\nNavigate to your portfolio page on the internet\nRight-click anywhere on the page\nSelect an option like Inspect or Web Developer Tools, depending on your browser.\n\nYou should now see the source code for your webpage in a new panel. What do you notice about your content? How is it different from what you wrote?\n\n\n\nWeb developer tools\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also control CSS and JS to a limited extent on GitHub Pages. However, we recommend sticking with the CSS and JS supplied by a Jekyll theme created by a designer. It‚Äôs hard to make a website that looks good from scratch. We‚Äôll get into how to add a theme using Jekyll later on.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Customize your website content"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/03-html.html#use-html-to-add-features-that-arent-available-in-markdown",
    "href": "pages/03-git-github/03-github-portfolio/03-html.html#use-html-to-add-features-that-arent-available-in-markdown",
    "title": "Customize your website content",
    "section": "Use HTML to add features that aren‚Äôt available in Markdown",
    "text": "Use HTML to add features that aren‚Äôt available in Markdown\nWhen creating your webpage, you might want to do a couple of things with your content that most types of Markdown can‚Äôt do, such as:\n\nSpecify the size of an image\nControl whether links open up in a new tab\nEmbed videos and other web content\nChange colors, fonts, or font sizes in one section of your page\n\nHTML (Hyper-Text Markup Language), does have the ability to do all those things and more.\n\nMake sure to format your HTML code so that it is readable\nOne great thing about Markdown is that it is both human-readable and machine-readable. It‚Äôs a little harder to tell what is going on with HTML, especially if it is formatted poorly. For example, take a look at some Markdown and its equivalent in HTML. Unlike Markdown, the computer doesn‚Äôt care how we use whitespace when formatting HTML. We can make HTML easier to read by adding whitespace and new lines:\n\nMarkdownMessy HTML (Don‚Äôt do this!)Cleaner HTML\n\n\n1# A fabulous Earth Data Science Portfolio\n\n2![Super-cool satellite imagery](/img/cool_satellite_image.jpeg)\n\nSome text and [a link](https://www.my_link.org) and:\n\n  * A\n  * Bulleted\n  * List\n\n1\n\nThe will be a level 1 header because it begins with one #\n\n2\n\nThis will be an image since it starts with a !\n\n\n\n\n&lt;h1&gt;A fabulous Earth Data Science Portfolio&lt;/h1&gt;&lt;img \nsrc=\"/img/cool_satellite_image.jpeg\" alt-text=\"Super-cool satellite imagery\"&gt;\n&lt;p&gt;Some text and &lt;a \nhref=\"https://www.my_link.org\"&gt;a link&lt;/a&gt; \nand:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A&lt;/li&gt;&lt;li&gt;Bulleted\n&lt;/li&gt;&lt;li&gt;List&lt;/li&gt;&lt;/ul&gt;\n\n\n1&lt;h1&gt;A fabulous Earth Data Science Portfolio&lt;/h1&gt;\n\n2&lt;!-- Comments help the reader understand your code --&gt;\n&lt;img \n  src=\"/img/cool_satellite_image.jpeg\" \n3  alt=\"Super-cool satellite imagery\" /&gt;\n\n&lt;p&gt;\n  Some text and &lt;a href=\"https://www.my_link.org\"&gt;a link&lt;/a&gt; \n  and:\n&lt;/p&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;A&lt;/li&gt;\n    &lt;li&gt;Bulleted&lt;/li&gt;\n    &lt;li&gt;List&lt;/li&gt;\n&lt;/ul&gt;\n\n1\n\nThis is a level 1 header, since it is surrounded by h1 tags.\n\n2\n\nComments won‚Äôt appear on your web page\n\n3\n\nThe img tag will be an image.\n\n\n\n\n\n\n\nHTML syntax for Markdown users\nEvery coding language has some special characters and structures, known as the syntax. When you render or run code, the syntax gets interpreted into some kind of behavior. For example, in Markdown, the syntax # gets interpreted as the start of a level 1 header.\nHTML is less human-readable than Markdown. To use it effectively, you will need to understand some key vocabulary about the syntactic elements of HTML.\n\nTags\n\n\n\n\n\n\n\nSpeak Code\n\n\n\nRemember that the &lt; and &gt; symbols are usually used to surround text you should replace with something applicable to you and your project. There‚Äôs a BIG exception when it comes to building websites ‚Äì &lt; and &gt; are key special characters if you are using HTML, the markup language used on most websites. So, if the code sample is HTML, you should leave the angle brackets &lt; and &gt; in.\n\nNotice that most elements are surrounded by tags enclosed in angle brackets (&lt; and &gt;). For example, when we include a header 1, we do that with the following code:\n1&lt;h1&gt;\n2  A fabulous Earth Data Science Portfolio\n3&lt;/h1&gt;\n\n1\n\nStart with the opening tag for h1 (header level 1), then\n\n2\n\nPlace the text of the header in between the tags.\n\n3\n\nEnd with the closing tag, which match the opening tag plus a slash (/)\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf there is no text that needs to go between two HTML tags, you don‚Äôt need a closing tag. Instead, you can end the opening tag with /&gt; to indicate that there‚Äôs no content. For example, take another look at the image HTML code:\n&lt;img \n  src=\"/img/cool_satellite_image.jpeg\" \n  alt=\"Super-cool satellite imagery\" /&gt;\n\n\n\n\nParameters\nIn addition to marking the beginning and end of HTML elements, tags can contain addition information about how to display their contents. This extra information is known as parameters. For example, let‚Äôs revisit the code above for an HTML link, which contains the href parameter:\n1&lt;a href=\"https://www.my_link.org\"&gt;\n  a link\n&lt;/a&gt;\n\n1\n\nParameters are included inside the opening tag. The parameter name (href) must be followed by and equals sign =, and the parameter value (https://www.my_link.org) must be surrounded by quotation marks.\n\n\n\n\n\nInclude HTML directly in Markdown\nYou can add HTML elements into your Markdown documents. There is no need when using GitHub Pages to write entire documents in HTML; you can directly substitute HTML elements for Markdown elements where needed. For example,\n\n\nAdjust the size of images\nSay you have written the following Markdown to display an image:\n![Super-cute pika!](/img/pika.jpg)\n\n\nImage source: Wikipedia\n\nUnfortunately, the image is taking up the entire width of the section. You can‚Äôt adjust the size with GitHub Markdown alone, but you can replace the image with HTML and control the width:\n&lt;img \n  src=\"/img/pika.jpg\" \n  alt=\"Super-cute pika!\" \n  width=\"25%\"&gt;\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you set both the width and the height of an image, your image will become distorted:\n&lt;img \n  src=\"/img/pika.jpg\" \n  alt=\"Super-cute pika!\" \n  height=\"100px\" \n  width=\"400px\"&gt;\n\n\n\nWhen setting image height and width, there are different units you can use:\n\n\n\n\n\n\n\nUnit\nMeaning\n\n\n\n\npx\nA pixel is the smallest item that can be displayed on your screen\n\n\nem or rem\nThese units are relative to your font size (e.g.¬†the width of an m)\n\n\n%\nA percentage of the element that contains the image\n\n\n\nWhen using px, keep in mind that others may be viewing your webpage on different devices (e.g.¬†phone vs.¬†computer). px units are pegged to the resolution of the screen, so this can result in vastly different sizes on different devices. Furthermore, rem measurements will change if the viewer zooms in or out of the page in their browser, making them more accessible.\n\n\n\n\n\n\nTip\n\n\n\nYou can simulate what your webpage will look like on another device using the Web Developer Tools. Usually there‚Äôs a button that looks like a screen in the upper right.\n\n\n\nWeb developer tools with the device simulator highlighted\n\n\n\n\n\n\nOpen external links in a new tab\nWhen you are linking to someone else‚Äôs webpage, often you want that page to open in a new tab or window so your reader doesn‚Äôt leave your webpage.\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that some web designers and readers don‚Äôt like this behavior and would prefer that the reader decide for themselves whether they open a new tab or not. But it‚Äôs a pretty widespread practice, so it‚Äôs up to you how you want your webpage to work.\n\nThere‚Äôs no way to do this in most flavors of Markdown, but if you write your link in HTML you can at a target=\"_blank\" parameter:\n&lt;a \n  href=\"https://www.my_link.org\"\n  target=\"_blank\"&gt;\n  a link\n&lt;/a&gt; \n\n\nEmbedding content from other webpages\nMarkdown is great for text and images, but what if you want to content that is hosted elsewhere, like a video? HTML lets you load content from other webpages (also known as embedding content) using an element called an iframe:\n&lt;iframe \n  width=\"467\" height=\"831\" \n  src=\"https://www.youtube.com/embed/Oly8f4h5C78\" \n  title=\"Natural Habitat Shorts- Chipmunks have cheek pouches used to store food. üêøü•ú\" \n  frameborder=\"0\" \n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" \n  allowfullscreen&gt;\n&lt;/iframe&gt;\n\n\nUsually the website that hosts your video will already have embed code prepared for you. For example, on YouTube you can find the embed code below the video:\n\n\nStyling text\nStyle on a webpage refers to how the page looks. For example, you might want to change colors, fonts, or spacing on your page. Usually this would be done with CSS or with pre-styled theme elements. However, if you doing something small, you can use the style parameter in an HTML tag, as in the following examples:\n\n\n\n\n\n\nChange the \n&lt;span style=\"color: red; font-size: 2rem\"&gt; \n  color and font size\n&lt;/span&gt;.\nChange the  color and font size.\n\n\n\n\n\n\nTip\n\n\n\nWe are using the span tag here instead of the p (paragraph) tag, so that HTML will not put the text on a new line.\n\n\n\n\n\n\n\n\n\n\n\nAdd a border to an image:\n\n&lt;img \n  src=\"/img/cool_satellite_image.jpeg\" \n  alt=\"Super-cool satellite imagery\" \n  height=\"100rem\"\n  style=\"border: dashed 5px blue;\"&gt;",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Customize your website content"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/04-jekyll.html",
    "href": "pages/03-git-github/03-github-portfolio/04-jekyll.html",
    "title": "Spruce up your website",
    "section": "",
    "text": "Website themes are a system for applying a particular design to your web content. They consist of acollection of website configuration files, content templates, and style files that control how a website looks, but can be filled in with any content. Themes are great because: * Your website will immediately look and function like the theme * Most themes allow you to change style elements (like colors and fonts), and store data (like your name and email address) in a central location. * Themed websites will most likely work on lots of different devices, like phones, tablets, and computers. You can double-check if your theme mentions being adaptive or responsive, bu most themes these days are. * Some themes support interactive components like photo carousels or lightboxes without needing to write a lot of code\n\n\nJekyll is a system for building websites from Markdown, HTML, and CSS. In fact, Jekyll is the system that GitHub Pages uses to deploy websites. This means that we can take advantage of free Jekyll themes to make any website look great.\n\n\n\n\n\n\nCheck out our themes demo video!\n\n \n\nDEMO: Add a theme to your portfolio (Shortcourse) by ESIIL",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Spruce up your website"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/04-jekyll.html#make-attractive-websites-with-themes",
    "href": "pages/03-git-github/03-github-portfolio/04-jekyll.html#make-attractive-websites-with-themes",
    "title": "Spruce up your website",
    "section": "",
    "text": "Website themes are a system for applying a particular design to your web content. They consist of acollection of website configuration files, content templates, and style files that control how a website looks, but can be filled in with any content. Themes are great because: * Your website will immediately look and function like the theme * Most themes allow you to change style elements (like colors and fonts), and store data (like your name and email address) in a central location. * Themed websites will most likely work on lots of different devices, like phones, tablets, and computers. You can double-check if your theme mentions being adaptive or responsive, bu most themes these days are. * Some themes support interactive components like photo carousels or lightboxes without needing to write a lot of code\n\n\nJekyll is a system for building websites from Markdown, HTML, and CSS. In fact, Jekyll is the system that GitHub Pages uses to deploy websites. This means that we can take advantage of free Jekyll themes to make any website look great.\n\n\n\n\n\n\nCheck out our themes demo video!\n\n \n\nDEMO: Add a theme to your portfolio (Shortcourse) by ESIIL",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Spruce up your website"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/04-jekyll.html#jekyll-plays-well-with-github-pages",
    "href": "pages/03-git-github/03-github-portfolio/04-jekyll.html#jekyll-plays-well-with-github-pages",
    "title": "Spruce up your website",
    "section": "Jekyll plays well with GitHub Pages",
    "text": "Jekyll plays well with GitHub Pages\n\nSupported themes\nWe recommend starting out by using one of the GitHub Pages supported themes. Follow these instructions from GitHub.\nEven if you don‚Äôt ultimately end up using one of these themes, you can make sure that everything is working with one of these themes.\n\n\nRemote themes\nGitHub Pages allows you to add any Jekyll theme available on GitHub to your site with a configuration file.\nTo do this you can: 1. Choose the Jekyll theme you want to use (here are some examples). Note that some themes work more seamlessly than others, so you may have to try more than one. 2. Preview the theme by clicking Live Demo on jekyllthemes.io, or searching the GitHub README for a preview link. 3. Follow the instructions from GitHub on how to apply the theme using a _config.yml file. 4. Go to the GitHub repository for the theme by clicking on the Get THEME on GitHub button on jekyllthemes.io. Follow any instructions about customizing things like your name or the title of your webpage.\n\n\n\nSo what is YAML?\nThe _config.yml file is written in YAML, a human-readable format for structured information (lists and key/value pairs). Learn more about YAML on their website\nThe _config.yml file that you created to add a theme can also sometimes be used to change the title of your website from the default (the name of your repository). Check out the README for your theme to see what parameters are available For example, and example _config.yml file for the minimal theme looks like:\ntitle: J. Doe's Awesome Portfolio Website\ndescription: Check out my projects!\nlogo: img/headshot.png\nremote_theme: pages-themes/minimal@v0.2.0\n\n\n\n\n\n\nWarning\n\n\n\nYou may need or want to add a _data/data.yml file or your own templates in _layouts in addition to the _config.yml file, depending on your theme. You will need to read the README for the theme you are using to see what you can customize. We recommend copying any example configuration files from the theme repository, and then modifying them to meet your needs.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Spruce up your website"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html",
    "title": "Use GitHub to Collaborate on Open Science Projects",
    "section": "",
    "text": "GitHub.com is a website that supports version control using git. In this chapter, you will learn how to use GitHub for both version control and as a collaboration tool. Specifically, you will learn about a well-known and used collaboration model that is used in the open software community.\nAfter completing this chapter, you will be able to:\n\nExplain the difference between git and GitHub.\nDescribe the open source software collaboration model as it is implemented on GitHub.\nExplain what a pull request (PR) is and how PRs are used on GitHub.\nCreate a pull request in GitHub.\nExplain what a GitHub issue is and explain how issues are used on GitHub.\nCreate an issue in GitHub.\n\nYou will need a web browser and a GitHub.com login (username and password).",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-collaboration",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-collaboration",
    "title": "Use GitHub to Collaborate on Open Science Projects",
    "section": "",
    "text": "GitHub.com is a website that supports version control using git. In this chapter, you will learn how to use GitHub for both version control and as a collaboration tool. Specifically, you will learn about a well-known and used collaboration model that is used in the open software community.\nAfter completing this chapter, you will be able to:\n\nExplain the difference between git and GitHub.\nDescribe the open source software collaboration model as it is implemented on GitHub.\nExplain what a pull request (PR) is and how PRs are used on GitHub.\nCreate a pull request in GitHub.\nExplain what a GitHub issue is and explain how issues are used on GitHub.\nCreate an issue in GitHub.\n\nYou will need a web browser and a GitHub.com login (username and password).",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#why-use-github-for-science-collaboration",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#why-use-github-for-science-collaboration",
    "title": "Use GitHub to Collaborate on Open Science Projects",
    "section": "Why Use GitHub For Science Collaboration?",
    "text": "Why Use GitHub For Science Collaboration?\nIn the previous chapter, you learned about git and GitHub. Recall that git is a tool that is used to manage version control for various files. GitHub.com is a website that runs git behind the scenes.\nThe GitHub.com website also has additional functionality that extends the functionality of git. This functionality allows you to manage projects and coordinate with others on updates to code, text files, and other files in your repo. GitHub also facilitates sharing your code with the world (OR with specific people if you need to work with a smaller group of people privately).\nIn the next few lessons, you will learn more about the various GitHub tools that you can use to collaborate on projects.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-project-management-and-collaboration",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#github-for-project-management-and-collaboration",
    "title": "Use GitHub to Collaborate on Open Science Projects",
    "section": "GitHub For Project Management and Collaboration",
    "text": "GitHub For Project Management and Collaboration\nThere are several tools that GitHub offers that you can use to support collaborating on projects.\n\n1. GitHub Pull Requests\nA pull request is a way that you or a colleague can suggest code changes to a repository.\nA pull request allows: * Your collaborators to see exactly what items were changed line by line in the code. * A group of people working on the code to view, review and comment on the code line by line. * You to document changes to your project which can also be clearly linked to issues that describe the need for those changes (see below).\nThe pull request is a great way to ensure that everyone is on the same page with your edits before the changes are merged or combined into the designated repository.\nPull Requests are specific to the GitHub website.\n\n \n\nThis screenshot shows a diff (i.e.¬†difference between two files) associated with a pull request. On the LEFT, you can see the text (highlighted with red) that was modified by the proposed pull request. The words that are dark red were the ones that were deleted. On the RIGHT, you can see the text (in green) that represents the proposed changes. The words that are darker green were added. In this example, the word earthpy was replaced with matplotcheck in the contributing.rst file of the repo.\n\n\n\n\n2. GitHub Issues\nIssues in GitHub are ways to document and discuss changes needed in a repository. Issues are also ideal for managing changes in a project.\nIssues are normally text (and code) that describe something that needs to be addressed in the repository. An issue could be related to something that needs to be fixed in your code or text.\nIssues can be assigned to one or more people to work on which makes them useful for project management. You can keep track of who is working on what items in the repository.\nOnce an issue is defined (with requested changes to the code in your repo), you can then assign it to someone. At that point, you have documentation of who is working on what task. Finally, when the person assigned an issue submits a pull request to address that issue, they can link the pull request back to the original issues.\nIf you are familiar with IT (Information Technology) groups or computer help desks, this is similar to submitting a ticket, except for this ticket can be created collaboratively.\nLinking issues to pull requests is good practice and will be discussed in more detail later in this chapter.\n\n \n\nIn a GitHub workflow, there is often a central repository. This is where the code or content maintainers keep the most up to date and ‚Äòlive‚Äô versions of the code. Changes are suggested by users using a pull request workflow where someone makes changes in a fork and then suggests that the maintainers add those changes to the central repository using a pull request. Source: Colin Williams, NEON\n\n\n\n\n3. GitHub Project Milestones\nThere are other project management tools within GitHub that you can use to manage your project as it becomes more complex, including milestones and even Trello like project boards.\nIf you are working on a large project, you can create milestones which can be used to group sets of related issues together. Milestones can have deadlines associated with them.\n\n \n\nGitHub milestones allow you to track smaller sets of tasks within a larger GitHub project.\n\n\n\n\n4. GitHub Project Management Tools\nYou can also use GitHub to manage an entire project or set of projects. You can setup boards similar to a tool like Trello to manage pull requests and milestones, who is working on what and associated deadlines.\nThese more advanced GitHub project management tools are not discussed in this chapter, but you are encouraged to check them out if you are interested in using GitHub to manage your open science projects.\n\n \n\nGitHub allows you to track projects across a single repository OR across all of the repos in your organization or account.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#putting-it-all-together-the-open-source-collaboration-and-project-management-model",
    "href": "pages/03-git-github/02-github-collaboration/01-intro-collaboration.html#putting-it-all-together-the-open-source-collaboration-and-project-management-model",
    "title": "Use GitHub to Collaborate on Open Science Projects",
    "section": "Putting It All Together: the Open Source Collaboration and Project Management Model",
    "text": "Putting It All Together: the Open Source Collaboration and Project Management Model\n\nGitHub Issues and Pull Requests\nOver the course of this chapter, you will learn how to put together all of the pieces of the pull request workflow. To break it down, it looks something like this:\n\nIndividuals within your team identify issues that need to be addressed.\nSomeone (likely the owners of the repository) assigns team members to work on specific issues.\nTeam members work on their individual tasks.\nWhen they are ready to suggest changes, team members submit a pull request (PR) to the main repository. That pull request is reviewed by team leaders (or whomever is assigned to review).\nThe reviewers may suggest changes to the code. If so, the PR submitters go back and work on the code some more. This process may continue until everyone is happy with the PR.\nWhen the PR is approved by the reviewers, it will be merged into the code base of the repository.\n\nAll of the above steps may be repeated over and over through time, as issues are identified and contributors submit changes.\nThis is the open source collaborative software workflow and a workflow that many use to manage GitHub projects in general.\n\n \n\nGitHub supports collaboration across multiple users working on related tasks within one repository. One way that GitHub supports this collaboration is through the use of forks (i.e.¬†copies of a central repository that each user can use to work independently on tasks). After work is completed in a fork, a user can request to have their changes applied to the central repository using a pull request. Source: Earth Lab, Alana Faller\n\n\nIn this chapter, you will first learn about and practice submitting pull requests to update repositories. In the second half of the chapter, you will be exposed to the full open source collaboration workflow, including the use of issues.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Use GitHub to Collaborate on Open Science Projects"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "",
    "text": "Tabular data are data that are stored in a row / column format. Columns (and sometimes rows) are often identified by headers, which if named correctly, explain what is in that row or column. You may already be familiar with spreadsheet tools such as Excel and Google Sheets that can be used to open tabular data.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#what-is-tabular-data",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#what-is-tabular-data",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "",
    "text": "Tabular data are data that are stored in a row / column format. Columns (and sometimes rows) are often identified by headers, which if named correctly, explain what is in that row or column. You may already be familiar with spreadsheet tools such as Excel and Google Sheets that can be used to open tabular data.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#tabular-data-structure",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#tabular-data-structure",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "Tabular Data Structure",
    "text": "Tabular Data Structure\nIn the example below, you see a table of values that represent precipitation for 3 days. The headers in the data include\n\nday and\nprecipitation-mm\n\n\n\n\nday\nprecipitation-mm\n\n\n\n\nmonday\n0\n\n\ntuesday\n1\n\n\nwednesday\n5\n\n\n\nThe tabular data above contains 4 rows - the first of which (row 1) is a header row and subsequent rows contain data. The table also has 2 columns.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#common-tabular-data-file-types-.csv-and-.txt",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#common-tabular-data-file-types-.csv-and-.txt",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "Common Tabular Data File Types: .csv and .txt",
    "text": "Common Tabular Data File Types: .csv and .txt\nTabular data can be downloaded in many different file formats. Spreadsheet formats include .xls and xlsx which can be directly opened in Microsoft Excel. When you are downloading Earth and Environmental data, you will often see tablular data stored in file formats including:\n\n.csv: Comma Separated Values - This file has each column separated (delimited) by a comma.\n.txt: A basic text file. In a txt file, often the delimiter (the thing that separates out each column) can vary. Delimiters are discussed below in more detail.\n\nThese formats are text based and often can be opened in a text editor like Atom or Notepad. They can be then imported into Python using Pandas for further exploration and processing.\n\n\n\n\n\n\nData Tip\n\n\n\nThe challenge with graphical user interface (GUI) based tools like Excel is that they often have limitations when it comes to working with larger files. Further, it becomes difficult to recreate workflows implemented in Excel because you are often pressing buttons rather than scripting workflows. You can use Open Source Python to implement any workflow you might implement in Excel and that workflow can become fully sharable and reproducible!",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#text-files-delimiters",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#text-files-delimiters",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "Text Files & Delimiters",
    "text": "Text Files & Delimiters\nA delimiter refers to the character that defines the boundary for different sets of information. In a text file, the delimiter defines the boundary between columns. A line break (a return) defines each row.\nBelow you will find an example of a comma delimited text file. In the example below, each column of data is separated by a comma ,. The data also include a header row which is also separated by commas.\nsite_code, year, month, day, hour, minute, second, time_decimal, value, value_std_dev  \nBRW,1973,1,1,0,0,0,1973.0,-999.99,-99.99\nBRW,1973,2,1,0,0,0,1973.0849315068492,-999.99,-99.99 \nBRW,1973,3,1,0,0,0,1973.1616438356164,-999.99,-99.99 \nHere is an example of a space delimited text file. In the example below, each column of data are separated by a single space.\nsite_code year month day hour minute second time_decimal value value_std_dev  \nBRW 1973 1 1 0 0 0 1973.0 -999.99 -99.99\nBRW 1973 2 1 0 0 0 1973.0849315068492 -999.99 -99.99 \nBRW 1973 3 1 0 0 0 1973.1616438356164 -999.99 -99.99 \nThere are many different types of delimiters including:\n\ntabs\ncommas\n1 (or more) spaces\n\nSometimes you will find other characters used as delimiters but the above-listed options are the most common.\n\n\n\n\n\n\nData Tip:\n\n\n\nThe .csv file format is most often delimited by a comma, hence the name.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#earth-and-environmental-data-that-are-stored-in-text-file-format",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#earth-and-environmental-data-that-are-stored-in-text-file-format",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "Earth and Environmental Data That Are Stored In Text File Format",
    "text": "Earth and Environmental Data That Are Stored In Text File Format\nThere are many different types of data that are stored in text and tabular file formats. Below you will see a few different examples of data that are provided in this format. You will also explore some of the cleanup steps that you need to import and begin to work with the data.\n\n\n\n\n\n\nData Tip\n\n\n\nNot all text files store tabular text (character) based data. The .asc file format is a text based format that stores spatial raster data.\n\n\n\n# Import packages\nimport os\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nIf you have a url that links directly to a file online, you can open it using pandas .read_csv(). Have a look at the data below - and notice that is has:\n\n3 columns: months, precip and seasons\n12 rows: notice that the first row is numered as 0. This is because indexing in Python always starts at 0 rather than 1.\n\n\n\n\n\n\n\nData Tip\n\n\n\nYou can learn more about zero-based indexing in the chapter on lists in this textbook \n\n\n\n# Download and open the .csv file using Pandas\navg_monthly_precip = pd.read_csv(\n    \"https://ndownloader.figshare.com/files/12710618\")\n\n# View the data that you just downloaded and opened\navg_monthly_precip\n\n\n\n\n\n\n\n\n\nmonths\nprecip\nseasons\n\n\n\n\n0\nJan\n0.70\nWinter\n\n\n1\nFeb\n0.75\nWinter\n\n\n2\nMar\n1.85\nSpring\n\n\n3\nApr\n2.93\nSpring\n\n\n4\nMay\n3.05\nSpring\n\n\n5\nJune\n2.02\nSummer\n\n\n6\nJuly\n1.93\nSummer\n\n\n7\nAug\n1.62\nSummer\n\n\n8\nSept\n1.84\nFall\n\n\n9\nOct\n1.31\nFall\n\n\n10\nNov\n1.39\nFall\n\n\n11\nDec\n0.84\nWinter\n\n\n\n\n\n\n\n\nIn Pandas, this table format is referred to as a dataframe. You can view some stats about the dataframe including the number of columns and rows in the data using .info().\n\navg_monthly_precip.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 12 entries, 0 to 11\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   months   12 non-null     object \n 1   precip   12 non-null     float64\n 2   seasons  12 non-null     object \ndtypes: float64(1), object(2)\nmemory usage: 416.0+ bytes\n\n\nFinally, you can plot the data using .plot().\n\n# Plot the data\navg_monthly_precip.plot(\n    x=\"months\",\n    y=\"precip\",\n    title=\"Precipitation (mm) for One Year\",\n    xlabel='Month',\n    ylabel='Precipitation (mm)')\n# Pretty display\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen you are using an interactive notebook, any plot you create in the last line of a cell will be displayed no matter what. However ‚Äì you may notice that it also displays some extra text unless you add the line plt.show() to the end. This line of code cleans up the display for you a bit.\n\n\n\n\n\n\n\n\nChallenge 1\n\n\n\n\nUse Python to determine the type of data stored in each column of avg_monthly_precip\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nShow the solution\n# Check the type of the variable avg_monthly_precip in this cell\navg_monthly_precip.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 12 entries, 0 to 11\nData columns (total 3 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   months   12 non-null     object \n 1   precip   12 non-null     float64\n 2   seasons  12 non-null     object \ndtypes: float64(1), object(2)\nmemory usage: 416.0+ bytes\n\n\n\n\n\n\n\n\n\n\nChallenge 2\n\n\n\nIn most programming languages, you can customize the options for how a function or method runs by using parameters. Examples of parameters in the plot method above include:\n\nx=\"months\" - tell python which data to place on the x-axis\ny=\"precip\" - tell python which data to place on the y-axis\n\nAbove you created a line plot. You can use the kind=\"\" parameter to modify the type of plot that pandas created. You can use the color=\"\" parameter to specify a color that you wish to use for each bar in the plot.\nDo the following:\n\nAdd kind=\"bar\" to the .plot() method.\nSpecify the color of the bars using the color=\"\" parameter.\n\nRun your code and see what the final plot looks like. You can select any color that you wish to complete your plot.\n\n\n\n\n\n\nTip\n\n\n\nUse this link to find a list of colors (open it in a new browser tab!) https://het.as.utexas.edu/HET/Software/Matplotlib/api/colors_api.html\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWhen using the interactive cells to plot, you may need to click on the plot to get it to show up.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe plot below is an example of what your final plot should look like.\n\n\n\n\nShow our solution!\navg_monthly_precip.plot(\n    # Make it a bar plot\n    kind=\"bar\",\n    # Change the color of the bars using color=\n    color=\"green\",\n    x=\"months\",\n    y=\"precip\",\n    title=\"Challenge 2 Plot: Precipitation (mm) for One Year\",\n    xlabel='Month',\n    ylabel='Precipitation (mm)')\nplt.show()",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#cleaning-tabular-text-files-so-you-can-open-them-in-python",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#cleaning-tabular-text-files-so-you-can-open-them-in-python",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "Cleaning Tabular Text Files So You Can Open Them in Python",
    "text": "Cleaning Tabular Text Files So You Can Open Them in Python\n\nMissing Data Values & Headers in Text Files\nNot all text files are as simple as the example above. Many text files have several lines of header text above the data that provide you with useful information about the data itself. This data is referred to as metadata.\nAlso, often times, there are data missing from the data that were collected. These missing values will be identified using a specific value that is hopefully documented in the metadata for that file.\nNext you will explore some temperature data that need to be cleaned up.\n\n\n\n\n\n\nData Tip\n\n\n\nYou can visit the NOAA NCDC website to learn more about the data you are using below.\n\nMiami, Florida CSV: https://www.ncdc.noaa.gov/cag/city/time-series/USW00012839-tmax-12-12-1895-2020.csv\nSeattle, Washington CSV: https://www.ncdc.noaa.gov/cag/city/time-series/USW00013895-tmax-1-5-1895-2020.csv\n\n\n\n\n# Open temperature data for Miami, Florida\nmiami_temp_url = (\n    \"https://www.ncdc.noaa.gov/cag/city/time-series\"\n    \"/USW00012839-tmax-12-12-1895-2020.csv\")\n\nmiami_temp = pd.read_csv(miami_temp_url)\nmiami_temp\n\n\n\n\n\n\n\n\n\nMiami\nFlorida January-December Maximum Temperature\n\n\n\n\n0\nUnits: Degrees Fahrenheit\nNaN\n\n\n1\nMissing: -99\nNaN\n\n\n2\nDate\nValue\n\n\n3\n194812\n85.3\n\n\n4\n194912\n84.8\n\n\n...\n...\n...\n\n\n71\n201612\n84.6\n\n\n72\n201712\n85.9\n\n\n73\n201812\n84.5\n\n\n74\n201912\n85.9\n\n\n75\n202012\n85.9\n\n\n\n\n76 rows √ó 2 columns\n\n\n\n\nNotice that the data above contain a few extra rows of information. This information however is important for you to understand.\n\nMissing: -99 ‚Äì this is the value that represents the ‚Äúno data‚Äù value. Misisng data might occur if a sensor stops working or a measurement isn‚Äôt recorded. You will want to remove any missing data values.\nUnits: Degrees Fahrenheit ‚Äì it‚Äôs always important to first understand the units of the data before you try to interpret what the data are showing!\n\nBelow you will use all of the information stored in the header to import your data. You will also remove the first few rows of data because they don‚Äôt actually contain any data values. These rows contain metadata.\n\n\nFunction Parameters in Python\nA parameter refers to an option that you can specify when running a function in Python. You can adjust the parameters associated with importing your data in the same way that you adjusted the plot type and colors above.\nBelow you use:\n\nskiprows=: to tell Python to skip the first 3 rows of your data\nna_values=: to tell Python to reassign any missing data values to ‚ÄúNA‚Äù\n\nNA refers to missing data. When you specify a value as NA (NaN or Not a Number in Python), it will not be included in plots or any mathematical operations.\n\n\n\n\n\n\nData Tip\n\n\n\nYou can learn more about no data values in Pandas in the intermediate earth data science textbook\n\n\n\n# Open the Miami data skipping the first 3 rows and setting no data values\nmiami_temp = pd.read_csv(\n    miami_temp_url,\n    skiprows=3,\n    na_values=-99)\n\n# View the first 5 rows of the data\nmiami_temp.head()\n\n\n\n\n\n\n\n\n\nDate\nValue\n\n\n\n\n0\n194812\n85.3\n\n\n1\n194912\n84.8\n\n\n2\n195012\n84.0\n\n\n3\n195112\n84.4\n\n\n4\n195212\n85.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge 3\n\n\n\nNow that you have imported temperature data for Miami, plot the data using the code example above!! In your plot code, set Date as your x-axis value and Value column as your y-axis value.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSee our solution\nmiami_temp.plot(\n   x=\"Date\",\n   y=\"Value\",\n   kind=\"line\",\n   title=\"Challenge 3 Plot: Temperature (Fahrenheit) - Miami, FL\",\n   xlabel='Date',\n   ylabel='Temperature (Fahrenheit)')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n::: {.callout} # Challenge 4\nUse the link below to open and plot temperature data for Seattle, Washington. Don‚Äôt forget to take a look at your data before you plot it!\nhttps://www.ncdc.noaa.gov/cag/city/time-series/USW00013895-tmax-1-5-1895-2020.csv\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSee our solution here!\n# Open the Seattle data\nseattle_temp_url = (\n    \"https://www.ncdc.noaa.gov/cag/city/time-series\"\n    \"/USW00013895-tmax-1-5-1895-2020.csv\")\nseattle_temp = pd.read_csv(\n    seattle_temp_url,\n    skiprows=3,\n    na_values=-99)\n\nseattle_temp.plot(\n    x=\"Date\",\n    kind=\"line\",\n    y=\"Value\",\n    title=\"Challenge 4 Plot: Temperature (Fahrenheit) - Seattle, WA\",\n    color=\"red\",\n    xlabel='Date',\n    ylabel='Temperature (Fahrenheit)')\nplt.show()",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#additional-resources",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/03-tabular-data.html#additional-resources",
    "title": "Use Tabular Data for Earth Data Science",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nChapter on Pandas in the Intro to Earth Data Science textbook \nChapter on Time Series with Pandas \n\n Textbook Section on Dealing with No Data Values in Pandas",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Use Tabular Data for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html",
    "title": "Text File Formats for Earth Data Science",
    "section": "",
    "text": "Common text file formats for earth data science workflows include Markdown, text (.txt, .csv) files, and YAML (Yet Another Markup Language).",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Text File Formats for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html#text-file-formats-for-earth-data-science",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/01-intro-text-file-formats.html#text-file-formats-for-earth-data-science",
    "title": "Text File Formats for Earth Data Science",
    "section": "",
    "text": "Common text file formats for earth data science workflows include Markdown, text (.txt, .csv) files, and YAML (Yet Another Markup Language).",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Text File Formats for Earth Data Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html",
    "title": "Tools For Open Reproducible Science",
    "section": "",
    "text": "{% include toc title=‚ÄúOn This Page‚Äù icon=‚Äúfile-text‚Äù %}",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#learning-objectives",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#learning-objectives",
    "title": "Tools For Open Reproducible Science",
    "section": " Learning Objectives",
    "text": "Learning Objectives\n\nDescribe how bash, git, GitHub and Jupyter can help you implement open reproducible science workflows.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#useful-tools-in-the-open-reproducible-science-toolbox",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#useful-tools-in-the-open-reproducible-science-toolbox",
    "title": "Tools For Open Reproducible Science",
    "section": "Useful Tools in the Open Reproducible Science Toolbox",
    "text": "Useful Tools in the Open Reproducible Science Toolbox\nTo implement open science workflows, you need tools that help you document, automate, and share your work. For example you may need to document how you collected your data (protocols), how the data were processed and what analysis approaches you used to summarize the data.\nThroughout this textbook, you will learn how to use open science tools that will help you: * Document your work, so others and your future self can understand your workflow. * Generate reports that connect your data, code (i.e.¬†methods used to process the data), and outputs and publish them in different formats (HTML, PDF, etc). * Automate your workflows, so they can be reproduced by others and your future self. * Share your workflows. * Collaborate with others.\nWhile there are many tools that support open reproducible science, this textbook uses: bash, git,GitHub.com, and Python in Jupyter Notebooks.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-scientific-programming-to-automate-workflows",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-scientific-programming-to-automate-workflows",
    "title": "Tools For Open Reproducible Science",
    "section": "Use Scientific Programming to Automate Workflows",
    "text": "Use Scientific Programming to Automate Workflows\nMany people begin to use data in tools such as Microsoft Excel (for spreadsheets / tabular data) or ArcGIS (for spatial data) that have graphical user interfaces (GUIs). GUIs can be easier to learn early on as they have a visual interface that can be less overwhelming as a beginner. However, as the data that you are working with get larger, you will often run into challenges where the GUI based tools can not handle larger volumes of data. Further GUI based tools require individual steps that are often manually implemented (unless you build macros or small automation scripts). This makes your workflow difficult to reproduce. Some tools such as Excel require paid licenses which will limit who can access your data and further, will limit including your workflow in a cloud or other remote environment.\nScientific programming using an open source, free programming language like R or Python, is an effective and efficient way to begin building a workflow that is both reproducible and that can be easily shared.\nIn this textbook, you will learn the Python programming language. Python is a free and open source programming language that anyone can download and use. Further it is becomming one of the more popular and in-demand skills in today‚Äôs job market. While you will learn Python in this textbook, many of the principles that you will learn can be applied across many programming languages.\n\n \n\nYou can write and run Python code in interactive development environments such as Jupyter Notebook. This image shows how Python code can be organized and run using cells in Jupyter Notebook and how the output is displayed under the executed cells.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-shell-also-called-bash-for-file-manipulation-and-management",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#use-shell-also-called-bash-for-file-manipulation-and-management",
    "title": "Tools For Open Reproducible Science",
    "section": "Use Shell (Also Called Bash) For File Manipulation and Management",
    "text": "Use Shell (Also Called Bash) For File Manipulation and Management\nShell is the primary program that computers use to receive code (i.e.¬†commands) and return information produced by executing these commands (i.e.¬†output). These commands can be entered via a Terminal (also known as a Command Line Interface - CLI), which you will work with in this course.\nUsing a Shell helps you: * Navigate your computer to access and manage files and folders (i.e.¬†directories). * Efficiently work with many files and directories at once. * Run programs that provide more functionality at the command line such as git for version control. * Launch programs from specific directories on your computer such as Jupyter Notebook for interactive programming. * Use repeatable commands for these tasks across many different operating systems (Windows, Mac, Linux).\nShell is also important if you need to work on remote machines such as a high performance computing cluster (HPC) or the cloud. Later in this textbook, you will learn how to use a Bash (a specific implementation of Shell) to access and manage files on your computer and to run other programs that can be started or run from the Terminal, such as Jupyter Notebook and git.\n\n \n\nThe terminal and shell (bash) can be used to view file directory structures. The image above shows bash commands to change directories (cd) from the home directory to a subdirectory called earth-analytics, and to list out the contents (ls) of the earth-analytics directory, which includes a subdirectory called data.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#version-control-and-collaboration-using-git-and-github",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#version-control-and-collaboration-using-git-and-github",
    "title": "Tools For Open Reproducible Science",
    "section": "Version Control and Collaboration Using Git and GitHub",
    "text": "Version Control and Collaboration Using Git and GitHub\nGit helps you monitor and track changes in files, a process referred to as version control. Git provides a way to create and track a ‚Äúrepository‚Äù for a project, i.e., a folder where all relevant files are kept. GitHub is a cloud-based platform to host git repositories, which allows you to store and manage your files and track changes. GitHub also includes project management and communication features that are useful when working on collaborative projects such as issues, forks, and milestone tracking.\nThese tools work together to support sharing files and collaboration within workflows. With git, you can work on your files locally and then upload changes to GitHub.com. If you make your repository public, then others can find it on GitHub and contribute to your code (if you want them to) which makes it ideal for collaboration and sharing. GitHub is also useful for code review as others can comment on changes to a workflow and you can chose to accept or reject proposed changes.\nLater in this textbook, you will learn how to use the git/GitHub workflow to implement version control for your files, share work and collaborate with others.\n\n \n\nYou can make local copies on your computer of repositories on Github.com, using git commands that you run in the Terminal. It‚Äôs valuable to have copies of your code in multiple places (for example, on your computer and GitHub) just in case something happens to your computer.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#the-jupyter-project",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/02-open-science-tools.html#the-jupyter-project",
    "title": "Tools For Open Reproducible Science",
    "section": "The Jupyter Project",
    "text": "The Jupyter Project\nThe Jupyter project is an open source effort that evolved from the IPython project to support interactive data science and computing. While the project evolved from Python, it supports many different programming languages including R, Python and Julia and was designed to be language-agnostic. The Jupyter platform has been widely adopted by the public and private sector science community. If you are familiar with the R programming language, Jupyter Notebook can be compared to R Markdown.\nThere are three core tools that you should be familiar with associated with Project Jupyter. The text below which describes these tools was copied directly from the  Jupyter Website:\nJupyter Notebook: The Jupyter Notebook is an open-source browser-based application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.\n\n \n\nA Jupyter Notebook file can contain both text documentation as well as programming code, which can be executed interactively within Jupyter Notebook.\n\n\nJupyterLab: JupyterLab is a browser-based interactive development environment for Jupyter notebooks, code, and data. JupyterLab is flexible: you can configure and arrange the user interface to support a wide range of workflows in data science, scientific computing, and machine learning. JupyterLab is extensible and modular: you can write plugins that add new components and integrate with existing ones.\n\n \n\nJupyter Notebook (left) is a browser-based interface that allows you to write code in many programming languages, including Python, and add formatted text that describes what the code does using Markdown. Jupyter Lab (right) provides access to Jupyter Notebook but also allows you to work with multiple documents, including notebook files and other files, at a time.\n\n\nJupyterHub: A multi-person version of Jupyter Notebook and Lab that can be run on a server. This is the tool that supports the cloud based classroom used in all of the Earth Analytics courses and workshops.\nYou will learn more about Jupyter tools in later chapters of this book.\n\nOrganize and Document Workflows Using Jupyter Notebook Files\nConnecting your entire workflow including accessing the data, processing methods and outputs is an important part of open reproducible science.\nJupyter Notebook files can help you connect your workflow by allowing you to write and run code interactively as well as organize your code with documentation and results within individual Jupyter Notebook files. You can also export Jupyter Notebook files to HTML and PDF formats for easy sharing.\nIn this textbook and in our Earth Analytics courses, we use Jupyter Notebook with Python. As described previously, Python is a widely used programming language in the sciences and provides strong functionality for working with a variety of data types and formats.\nWriting and organizing your Python code within Jupyter Notebook files supports open reproducible science through documentation of data inputs, code for analysis and visualization, and results ‚Äì all within one file that can be easily shared with others.\nIn later chapters, you will learn how to use Jupyter Notebook to write and run Python code for analysis and visualization of earth and environmental science data.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "Tools For Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/04-cyberinfrastructure/00-home.html",
    "href": "pages/00-course-overviews/shortcourse/04-cyberinfrastructure/00-home.html",
    "title": "Cyberinfrastructure for Earth Data Science Leaders",
    "section": "",
    "text": "This course will be available in 2027."
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/02-data/00-home.html",
    "href": "pages/00-course-overviews/shortcourse/02-data/00-home.html",
    "title": "Ethical Earth Data Use",
    "section": "",
    "text": "This course will be available in 2025."
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/01-collaboration/04-applications.html",
    "href": "pages/00-course-overviews/shortcourse/01-collaboration/04-applications.html",
    "title": "Applications",
    "section": "",
    "text": "This course will be available in 2024.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 4",
      "Applications"
    ]
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/01-collaboration/02-open-science.html",
    "href": "pages/00-course-overviews/shortcourse/01-collaboration/02-open-science.html",
    "title": "Open, Reproducible, Ethical Science",
    "section": "",
    "text": "This course will be available in 2024.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open, Reproducible, Ethical Science"
    ]
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/00-home.html",
    "href": "pages/00-course-overviews/shortcourse/00-home.html",
    "title": "ESIIL Data Short Course",
    "section": "",
    "text": "Through this 4-week, project-based data short course, Earth Science educators and leaders will learn how to inclusively engage learners in:\n\nUnderstanding and unlocking the potential of EDS empower their communities\nContributing to sustainable, collaborative EDS projects\nTelling their community‚Äôs data stories\n\nParticipants will engage in a series of trainings that prepare them to include open science (Python) and collaboration tools (GitHub, including GitHub Classroom, GitHub Codespaces, and GitHub Pages) into their curriculum or existing research model. We will emphasize working with key types of environmental data (time series, vector, and raster), and using cloud computing to enhance access to Earth Data Science education. At the end of the data short course, participants will be expected to create a lesson that applies lessons learned to a class or project that they are currently working on."
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/00-home.html#what-is-the-esiil-data-short-course",
    "href": "pages/00-course-overviews/shortcourse/00-home.html#what-is-the-esiil-data-short-course",
    "title": "ESIIL Data Short Course",
    "section": "",
    "text": "Through this 4-week, project-based data short course, Earth Science educators and leaders will learn how to inclusively engage learners in:\n\nUnderstanding and unlocking the potential of EDS empower their communities\nContributing to sustainable, collaborative EDS projects\nTelling their community‚Äôs data stories\n\nParticipants will engage in a series of trainings that prepare them to include open science (Python) and collaboration tools (GitHub, including GitHub Classroom, GitHub Codespaces, and GitHub Pages) into their curriculum or existing research model. We will emphasize working with key types of environmental data (time series, vector, and raster), and using cloud computing to enhance access to Earth Data Science education. At the end of the data short course, participants will be expected to create a lesson that applies lessons learned to a class or project that they are currently working on."
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/00-home.html#who-is-this-for",
    "href": "pages/00-course-overviews/shortcourse/00-home.html#who-is-this-for",
    "title": "ESIIL Data Short Course",
    "section": "Who is this for?",
    "text": "Who is this for?\nLessons will be geared toward educators and early careerists interested in incorporating EDS teaching into their existing programs and curricula (biology, ecology, geography, etc.)."
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/00-home.html#when-and-how-can-you-participate",
    "href": "pages/00-course-overviews/shortcourse/00-home.html#when-and-how-can-you-participate",
    "title": "ESIIL Data Short Course",
    "section": "When and how can you participate?",
    "text": "When and how can you participate?\nAll trainings will be available as both: 1) live online workshops and 2) materials for self-paced learning\nBuilding on participation in the short course, we will establish an ongoing open community forum, help desk, and office hours to support continued learning and capacity-building."
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/00-home.html#whats-next",
    "href": "pages/00-course-overviews/shortcourse/00-home.html#whats-next",
    "title": "ESIIL Data Short Course",
    "section": "What‚Äôs next?",
    "text": "What‚Äôs next?\nOur commitment to building a community of educators.This data short course is first in a series of 4 courses that will introduce participants to:\n\nCourse 1: EDS community standard collaboration, education, and online publishing tools\nCourse 2: Finding and working with EDS data following FAIR and CARE data principles\nCourse 3: Writing modular, readable, and reproducible scientific workflows\nCourse 4: Cyberinfrastructure skills for teaching Earth Data Science\n\nEach course will provide participants with the opportunity to develop their own lessons that apply skills learned during the training."
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/01-collaboration/03-geospatial.html",
    "href": "pages/00-course-overviews/shortcourse/01-collaboration/03-geospatial.html",
    "title": "Geospatial Data Fundamentals",
    "section": "",
    "text": "This course will be available in 2024.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 3",
      "Geospatial Data Fundamentals"
    ]
  },
  {
    "objectID": "pages/00-course-overviews/shortcourse/03-reproducible/00-home.html",
    "href": "pages/00-course-overviews/shortcourse/03-reproducible/00-home.html",
    "title": "Readable, Modular, Reproducible Code",
    "section": "",
    "text": "This course will be available in 2026."
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html",
    "title": "How To Organize Your Project: Best Practices for Open Reproducible Science",
    "section": "",
    "text": "When you are working on a data project, there are often many files that you need to store on your computer. These files may include:\n\nRaw Data Files\nProcessed data files: you may need to take the raw data and process it in some way\nCode and scripts\nOutputs like figures and tables\nWriting associated with your project\n\nIt will save you time and make your project more useable and reproducible if you carefully consider how these files are stored on your computer. Below are some best practices to consider when pulling together a project.\n\n\n\nAs you create new directories and files on your computer, consider using a carefully crafted naming convention that makes it easier for anyone to find things and also to understand what each files does or contains.\nIt is good practice to use file and directory that are:\n\nHuman readable: use expressive names that clearly describe what the directory or file contains (e.g.¬†code, data, outputs, figures).\nMachine readable: avoid strange characters or spaces. Instead of spaces, you can use - or _ to separate words within the name to make them easy to read and parse.\nSortable: it is nice to be able to sort files to quickly see what is there and find what you need. For example, you can create a naming convention for a list of related directories or files (e.g.¬†01-max.jpg, 02-terry.jpg, etc), which will result in sortable files.\n\nThese guidelines not only help you to organize your directories and files, but they can also help you to implement machine readable names that can be easily queried or parsed using scientific programming or other forms of scripting.\nUsing a good naming convention when structuring a project directory also supports reproducibility by helping others who are not familiar with your project quickly understand your directory and file structure.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#project-organization-and-management-for-open-reproducible-science-projects",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#project-organization-and-management-for-open-reproducible-science-projects",
    "title": "How To Organize Your Project: Best Practices for Open Reproducible Science",
    "section": "",
    "text": "When you are working on a data project, there are often many files that you need to store on your computer. These files may include:\n\nRaw Data Files\nProcessed data files: you may need to take the raw data and process it in some way\nCode and scripts\nOutputs like figures and tables\nWriting associated with your project\n\nIt will save you time and make your project more useable and reproducible if you carefully consider how these files are stored on your computer. Below are some best practices to consider when pulling together a project.\n\n\n\nAs you create new directories and files on your computer, consider using a carefully crafted naming convention that makes it easier for anyone to find things and also to understand what each files does or contains.\nIt is good practice to use file and directory that are:\n\nHuman readable: use expressive names that clearly describe what the directory or file contains (e.g.¬†code, data, outputs, figures).\nMachine readable: avoid strange characters or spaces. Instead of spaces, you can use - or _ to separate words within the name to make them easy to read and parse.\nSortable: it is nice to be able to sort files to quickly see what is there and find what you need. For example, you can create a naming convention for a list of related directories or files (e.g.¬†01-max.jpg, 02-terry.jpg, etc), which will result in sortable files.\n\nThese guidelines not only help you to organize your directories and files, but they can also help you to implement machine readable names that can be easily queried or parsed using scientific programming or other forms of scripting.\nUsing a good naming convention when structuring a project directory also supports reproducibility by helping others who are not familiar with your project quickly understand your directory and file structure.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects",
    "title": "How To Organize Your Project: Best Practices for Open Reproducible Science",
    "section": "Best Practices for Open Reproducible Science Projects",
    "text": "Best Practices for Open Reproducible Science Projects\n\n1. Use Consistent Computer Readable Naming Conventions\nMachine readable file names allow your directory structure to be quickly manipulated and handled by code.\nFor example, you may want to write a script that processes a set of images and you may want to sort those images by date. If the date of each image is included in the file name at the very beginning of the name, it will become easier to parse with your code. The files below could be difficult to parse because the naming convention is not standard.\n```{bash}\n* file.jpg\n* file-two.jpg\n* filethree.jpg\n```\nHowever this list of files is easier to parse as the date is included with the file name.\n```{bash}\n* 2020-image.jpg\n* 2019-image.jpg\n* 2018-image.jpg\n```\nSometimes simply numbering the files is enough to allow for sorting:\n```{bash}\n* 01-image.jpg\n* 02-image.jpg\n* 03-image.jpg\n```\nIf your files and directories follow identifiable patterns or rules, it will allow you to more easily manipulate them. This in turn will make it easier for you to automate file processing tasks.\nA few other best practices to consider when naming files within a project:\n\nAvoid spaces in file and dir names: spaces in a file name can be difficult when automating workflows.\nUse dashes-to-separate-words (slugs): dashes or underscores can make is easier for you to create expressive file names. Dashes or underscores are also easier to parse when coding.\nConsider whether you may need to sort your files. If you do, you may want to number things.\n\n\n\n2. Be Consistent When Naming Files - Use Lower Case\nIt might be tempting when naming files and directories to use lower and Upper case. However, case will cause coding issues for you down the road particularly if you are switching between operating systems (Mac vs Linux vs Windows).\nCase in point, have a look at the file names below.\n```{bash}\nmy-file.txt\nMy-File.txt\n```\nIf you want to open / read my-file.txt it would be easy to call:\npandas.read.csv(\"my-file.txt\")\nin Python. This call will work on all operating systems. However, this call:\npandas.read.csv(\"My-file.txt\")\nmay work on some machines (possibly Windows) but it‚Äôs likely to fail on Linux or MAC. To keep things simple and to avoid case sensitvity issues, use lower case naming conventions for all file and directory names.\n\n\n3. Organize Your Project Directories to Make It Easy to Find Data, Code and Outputs\nRather than saving a bunch of files into a single directory, consider a directory organization approach that fits your project.\nCreate numbered directories that cover the steps of your workflow - for example:\n```{bash}\n/vegetation-health-project\n    /01-code-scripts\n    /02-raw-data\n    /03-processed-data\n    /04-graphics-outputs\n    /05-paper-blog\n```\nThe numbers before each folder allow you to sort the directories in a way that makes it easier to parse. Notice also that each directory has an expressive (uses words that describe what is in the directory) name. Expressive naming will be discussed in the next section.\nUsing individual directories to store data, scripts, output graphics and then the final paper and blog posts being written for the project makes it easier to find components of your project.\nThis is especially useful for your future self who may need to come back to the project in six months to update things. It also makes is easier for a colleague that you are collaborating with to quickly find things.\nThere is no one perfect example as each project may require different directories. The best advice is to pick something that works well for you and your team and stick to it. It‚Äôs best to be consistent.\n\n\n\n\n\n\n\n\nOrganized Project\nNon Organized Project\n\n\n\n\n/01-scripts ¬†¬†¬† 01-clean-data.py  ¬†¬†¬† 02-run-model.py ¬†¬†¬† 03-create-plots.py  /02-data  ¬†¬†¬†¬†/raw-data  ¬†¬†¬†¬†¬†¬†¬†¬†/landsat-imagery ¬†¬†¬†¬†¬†¬†¬†¬†/fire-boundary/03-output-graphics¬†¬†¬† study-area-map.png  /04-final-paper ¬†¬†¬† fire-paper.pdf\nfile1-new.pyfile1.py plotting-test.py  data-file.txt  /old-stuff  testoutput1.txt testoutput2.csv\n\n\n\n\nLook at the example directory structures above. Which structure is easier to understand? In which could you more easily find what you need?\n\n\n\n\n4. Use Meaningful (Expressive) File And Directory Names\nExpressive file names are those that are meaningful and thus describe what each directory or file is or contains. Using expressive file names makes it easier to scan a project directory and quickly understand where things are stored and what files do or contain.\nExpressive names also support machine readibility, as discernible patterns in expressive names can be used by a computer to identify and parse files.\n\n\n\n\n\n\n\n\nExpressive Project\nNon Expressive Project\n\n\n\n\n/01-scripts ¬†¬†¬† 01-process-landsat-data.py  ¬†¬†¬† 02-calculate-ndvi.py ¬†¬†¬† 03-create-ndvi-maps.py  /02-data  ¬†¬†¬†¬†/raw-data  ¬†¬†¬†¬†¬†¬†¬†¬†/landsat-imagery  ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†/june-2016  ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†/july-2016 ¬†¬†¬†¬†¬†¬†¬†¬†/cold-springs-fire-boundary/03-output-graphics¬†¬†¬† ndvi-map-june-2016.png  ¬†¬†¬† ndvi-map-july-2016.png /04-final-paper ¬†¬†¬† veg-impacts-cold-springs-fire.pdf\nwork.pyplotting.py plotting-test.py landsat/ data-file.txt old-stuff/  testoutput1.txt testoutput2.csv\n\n\n\n\nLook at the example directory structures above. Which directory structure (the one on the LEFT or the one on the RIGHT) would you prefer to work with?\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWindows Users: Note that the default names of your existing directories often begin with upper case letters (e.g.¬†Documents, Downloads). When creating new directories, use lower case to follow the textbook more easily and for best results from future programming tasks.\n\n\n\n\n5. Document Your Project With a README File\nThere are many ways to document a project; however, a readme file at the top level of your project is a standard convention. When you begin to use GitHub, you will notice that almost all well designed github repositories contain readme files. The readme is a text file that describes data / software packages and tools used to process data in your project. The readme should also describe files and associated naming conventions. Finally, the readme can be used to document any abbreviations used, units, etc as needed.\nThere are other files that you may consider as well such as software installation instructions if those are required, citation information and if the project is one that you want others to contribute to, then a CONTRIBUTING file may be in order.\n\n\n6. Don‚Äôt Use Proprietary File Formats\nProprietary formats are formats that require a specific tool (and a specific license often) to open. Examples include Excel (.xls) or Word (.doc). These formats may change over time as new versions come out (example: .xls upgraded to .xlsx.\nIn some cases, certain formats are operating system specific (example: most Linux users do not run Microsoft tools).\nWhen choosing file formats for your projects, think about whether you will have a license to access that file format in the future and whether others have access to the license.\nWhen you can, stick to formats that are operating system and tool agnostic such as .csv and .txt. Text files are not proprietary and thus can be opened on any operating system and on any computer with the right open tools. This allows more people to have access to your files including your future self who might not have a license to open these files.\n\n\n\n\n\n\nTip\n\n\n\nUsing standard data formats increases opportunities for re-use and expansion of your research.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects---a-case-study",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/03-best-practices.html#best-practices-for-open-reproducible-science-projects---a-case-study",
    "title": "How To Organize Your Project: Best Practices for Open Reproducible Science",
    "section": "Best Practices For Open Reproducible Science Projects - A Case Study",
    "text": "Best Practices For Open Reproducible Science Projects - A Case Study\nJennifer recently graduated with a degree in environmental science and got a job working with an environmental non-profit. While a student, she worked on some great projects to build flood models using MATLAB, a proprietary software used to design and run models. In collaboration with a professor and other class mates, Jennifer wrote a paper that was accepted for publication in well known hydrology journal, though some minor changes were requested.\nExcited to get the paper revised for publication, Jennifer tracks down her project files and tries to remember which files produced the final outputs that she included in the submitted paper. However, she realizes that even when she is able to identify which files she needs, she no longer has access to the MATLAB, which she needs to access the files. Unfortunately, her license expired when she graduated, and her non-profit does not have licenses for MATLAB.\nJennifer‚Äôs story can be a common experience for anyone who has moved to a new job where the resources and licenses differ, or who has spent a long time away from a particular project and need to recreate a workflow.\nHow could using organized and expressively named directories have helped Jennifer with this project? How could avoiding proprietary file formats contribute to the longevity of this project?",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "How To Organize Your Project: Best Practices for Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html",
    "title": "What Is Open Reproducible Science",
    "section": "",
    "text": "In this chapter, you will learn about open reproducible science and become familiar with a suite of open source tools that are often used in open reproducible science (and earth data science) workflows including Shell, git and GitHub, Python, and Jupyter.\n\n\n\nAfter completing this chapter, you will be able to:\n\nDefine open reproducible science and explain its importance.\nDescribe how reproducibility can benefit yourself and others.\nList tools that can help you implement open reproducible science workflows.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#chapter-one---open-reproducible-science",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#chapter-one---open-reproducible-science",
    "title": "What Is Open Reproducible Science",
    "section": "",
    "text": "In this chapter, you will learn about open reproducible science and become familiar with a suite of open source tools that are often used in open reproducible science (and earth data science) workflows including Shell, git and GitHub, Python, and Jupyter.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#learning-objectives",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#learning-objectives",
    "title": "What Is Open Reproducible Science",
    "section": "",
    "text": "After completing this chapter, you will be able to:\n\nDefine open reproducible science and explain its importance.\nDescribe how reproducibility can benefit yourself and others.\nList tools that can help you implement open reproducible science workflows.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#what-is-open-reproducible-science",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#what-is-open-reproducible-science",
    "title": "What Is Open Reproducible Science",
    "section": "What is Open Reproducible Science",
    "text": "What is Open Reproducible Science\nOpen science involves making scientific methods, data, and outcomes available to everyone. It can be broken down into several parts (Gezelter 2009) including:\n\nTransparency in data collection, processing and analysis methods, and derivation of outcomes.\nPublicly available data and associated processing methods.\nTransparent communication of results.\n\nOpen science is also often supported by collaboration.\nReproducible science is when anyone (including others and your future self) can understand and replicate the steps of an analysis, applied to the same or even new data.\nTogether, open reproducible science results from open science workflows that allow you to easily share work and collaborate with others as well as openly publish your data and workflows to contribute to greater science knowledge.\n\n \n\nAn open science workflow highlighting the roles of data, code, and workflows. Source: Max Joseph, Earth Lab at University of Colorado, Boulder.\n\n\nClick through the slideshow below to learn more about open science.\n  View Slideshow: Share, Publish & Archive Code & Data\n\n\n\nWatch this 15 minute video to learn more about the importance of reproducibility in science and the current reproducibility ‚Äúcrisis.‚Äù",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#benefits-of-open-reproducible-science",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#benefits-of-open-reproducible-science",
    "title": "What Is Open Reproducible Science",
    "section": "Benefits of Open Reproducible Science",
    "text": "Benefits of Open Reproducible Science\nBenefits of openness and reproducibility in science include: * Transparency in the scientific process, as anyone including the general public can access the data, methods, and results. * Ease of replication and extension of your work by others, which further supports peer review and collaborative learning in the scientific community. * It supports you! You can easily understand and re-run your own analyses as often as needed and after time has passed.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#how-do-you-make-your-work-more-open-and-reproducible",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#how-do-you-make-your-work-more-open-and-reproducible",
    "title": "What Is Open Reproducible Science",
    "section": "How Do You Make Your Work More Open and Reproducible?",
    "text": "How Do You Make Your Work More Open and Reproducible?\nThe list below are things that you can begin to do to make your work more open and reproducible. It can be overwhelming to think about doing everything at once. However, each item is something that you could work towards.\n\nUse Scientific Programming to Process Data\nScientific programming allows you to automate tasks, which facilitates your workflows to be quickly run and replicated. In contrast, graphical user interface (GUI) based workflows require interactive manual steps for processing, which become more difficult and time consuming to reproduce. If you use an open source programming language like Python or R, then anyone has access to your methods. However, if you use a tool that requires a license, then people without the resources to purchase that tool are excluded from fully reproducing your workflow.\n\n\nUse Expressive Names for Files and Directories to Organize Your Work\nExpressive file and directory names allow you to quickly find what you need and also support reproducibility by facilitating others‚Äô understanding of your files and workflows (e.g.¬†names can tell others what the file or directory contains and its purpose). Be sure to organize related files into directories (i.e.¬†folders) that can help you easily categorize and find what you need (e.g.¬†raw-data, scripts, results).\n\n\nUse FAIR Data to Enhance the Reproducibility of Projects\nMake sure that the data used in your project adhere to the FAIR principles (Wilkinson et al.¬†2016), so that they are findable, accessible, interoperable, and re-usable, and there is documentation on how to access them and what they contain. FAIR principles also extend beyond the raw data to apply to the tools and workflows that are used to process and create new data. FAIR principles enhance the reproducibility of projects by supporting the reuse and expansion of your data and workflows, which contributes to greater discovery within the scientific community.\n\n\nProtect Your Raw Data\nDon‚Äôt modify (or overwrite) the raw data. Keep data outputs separate from inputs, so that you can easily re-run your workflow as needed. This is easily done if you organize your data into directories that separate the raw data from your results, etc.\n\n\nUse Version Control and Share Your Code (If You Can)\nVersion control allows you to manage and track changes to your files (and even undo them!). If you can openly share your code, implement version control and then publish your code and workflows on the cloud. There are many free tools to do this including Git and GitHub.\n\n\nDocument Your Workflows\nDocumentation can mean many different things. It can be as basic as including (carefully crafted and to the point) comments throughout your code to explain the specific steps of your workflow. Documentation can also mean using tools such as Jupyter Notebooks or RMarkdown files to include a text narrative in Markdown format that is interspersed with code to provide high level explanation of a workflow.\nDocumentation can also include docstrings, which provide standardized documentation of Python functions, or even README files that describe the bigger picture of your workflow, directory structure, data, processing, and outputs.\n\n\nDesign Workflows That Can Be Easily Recreated\nYou can design workflows that can be easily recreated and reproduced by others by: * listing all packages and dependencies required to run a workflow at the top of the code file (e.g.¬†Jupyter Notebook or R Markdown files). * organizing your code into sections, or code blocks, of related code and include comments to explain the code. * creating reusuable environments for Python workflows using tools like docker containers, conda environments, and interactive notebooks with binder.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#open-reproducible-science---a-case-study",
    "href": "pages/01-reproducible-science-tools/open-reproducible-science/01-intro.html#open-reproducible-science---a-case-study",
    "title": "What Is Open Reproducible Science",
    "section": "Open Reproducible Science - A Case Study",
    "text": "Open Reproducible Science - A Case Study\nChaya is a scientist at Generic University, studying the role of invasive grasses on fires in grassland areas. She is building models of fire spread as they relate to vegetation cover. This model uses data collected from satellites that detect wildfires and also plant cover maps. After documenting that an invasive plant drastically alters fire spread rates, she is eager to share her findings with the world. Chaya uses scientific programming rather than a graphical user interface tool such as Excel to process her data and run the model to ensure that the process is automated. Chaya writes a manuscript on her findings. When she is ready to submit her article to a journal, she first posts a preprint of the article on a preprint server, stores relevant data in a data repository and releases her code on GitHub. This way, the research community can provide feedback on her work, the reviewers and others can reproduce her analysis, and she has established precedent for her findings.\nIn the first review of her paper, which is returned 3 months later, many changes are suggested which impact her final figures. Updating figures could be a tedious process. However, in this case, Chaya has developed these figures using the Python programming language. Thus, updating figures is easily done by modifying the processing methods used to create them. Further because she stored her data and code in a public repository on GitHub, it is easy and quick for Chaya three months later to find the original data and code that she used and to update the workflow as needed to produce the revised versions of her figures. Throughout the review process, the code (and perhaps data) are updated, and new versions of the code are tracked. Upon acceptance of the manuscript, the preprint can be updated, along with the code and data to ensure that the most recent version of the paper and analysis are openly available for anyone to use.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 2",
      "Open Science Tools",
      "What Is Open Reproducible Science"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html",
    "title": "Format Text With Markdown",
    "section": "",
    "text": "Markdown is a human readable syntax (also referred to as a markup language) for formatting text documents. Markdown can be used to produce nicely formatted documents including PDFs and web pages.\nWhen you format text using Markdown in a document, it is similar to using the format tools (e.g.¬†bold, heading 1, heading 2) in a word processing tool like Microsoft Word or Google Docs. However, instead of using buttons to apply formatting, you use syntax such as **this syntax bolds text in markdown** or # Here is a heading.\nMarkdown syntax allows you to format text in many ways, such as making headings, bolding and italicizing words, creating bulleted lists, adding links, formatting mathematical symbols and making tables. These options allow you to format text in visually appealing and organized ways to present your ideas.\nYou can use Markdown to format text in many different tools including GitHub.com, R using RMarkdown, and Jupyter Notebook, which you will learn more about this page.\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about how you can use Markdown to format text and document workflows in a variety of tools.\n\n\n\n\nA great benefit of Jupyter Notebook and other interactive computing notebooks is that it allows you to combine both code (e.g.¬†Python) and Markdown in one document, so that you can easily document your workflows.\nA Jupyter Notebook file uses cells to organize content, and it can contain both cells that render text written using the Markdown syntax as well as cells that contain and run Python code.\nThus, you can use a combination of Markdown and Python code cells to organize and document your Jupyter Notebook for others to easily read and follow your workflow.\n\n \n\nAn example Markdown cell in Jupyter Notebook.\n\n\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about Markdown for Jupyter Notebook.\n\n\nIf you render your Jupyter Notebook file to HTML or PDF, this Markdown will appear as formatted text in the output document.\n\n\n\n\n\n\nData Tip\n\n\n\nIn fact, this web page that you are reading right now is generated from a Markdown document! On this page, you will learn the basic syntax of Markdown.\n\n\n\n\n\nBeing able to include both Markdown and code (e.g.¬†Python) cells in a Jupyter Notebook file supports reproducible science by allowing you to:\n\nDocument your workflow: You can add text to the document that describes the steps of your processing workflow (e.g.¬†how data is being processed and what results are produced).\nDescribe your data: You can describe the data that you are using (e.g.¬†source, pre-processing, metadata).\nInterpret code outputs: You can add some text that interprets or discusses the outputs.\n\nall in one document!\nWhen used effectively, Markdown documentation can help anyone who opens your Jupyter Notebook to follow, understand and even reproduce your workflow.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#what-is-markdown",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#what-is-markdown",
    "title": "Format Text With Markdown",
    "section": "",
    "text": "Markdown is a human readable syntax (also referred to as a markup language) for formatting text documents. Markdown can be used to produce nicely formatted documents including PDFs and web pages.\nWhen you format text using Markdown in a document, it is similar to using the format tools (e.g.¬†bold, heading 1, heading 2) in a word processing tool like Microsoft Word or Google Docs. However, instead of using buttons to apply formatting, you use syntax such as **this syntax bolds text in markdown** or # Here is a heading.\nMarkdown syntax allows you to format text in many ways, such as making headings, bolding and italicizing words, creating bulleted lists, adding links, formatting mathematical symbols and making tables. These options allow you to format text in visually appealing and organized ways to present your ideas.\nYou can use Markdown to format text in many different tools including GitHub.com, R using RMarkdown, and Jupyter Notebook, which you will learn more about this page.\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about how you can use Markdown to format text and document workflows in a variety of tools.\n\n\n\n\nA great benefit of Jupyter Notebook and other interactive computing notebooks is that it allows you to combine both code (e.g.¬†Python) and Markdown in one document, so that you can easily document your workflows.\nA Jupyter Notebook file uses cells to organize content, and it can contain both cells that render text written using the Markdown syntax as well as cells that contain and run Python code.\nThus, you can use a combination of Markdown and Python code cells to organize and document your Jupyter Notebook for others to easily read and follow your workflow.\n\n \n\nAn example Markdown cell in Jupyter Notebook.\n\n\n\n\n\n\n\n\nData Tip\n\n\n\nLearn more about Markdown for Jupyter Notebook.\n\n\nIf you render your Jupyter Notebook file to HTML or PDF, this Markdown will appear as formatted text in the output document.\n\n\n\n\n\n\nData Tip\n\n\n\nIn fact, this web page that you are reading right now is generated from a Markdown document! On this page, you will learn the basic syntax of Markdown.\n\n\n\n\n\nBeing able to include both Markdown and code (e.g.¬†Python) cells in a Jupyter Notebook file supports reproducible science by allowing you to:\n\nDocument your workflow: You can add text to the document that describes the steps of your processing workflow (e.g.¬†how data is being processed and what results are produced).\nDescribe your data: You can describe the data that you are using (e.g.¬†source, pre-processing, metadata).\nInterpret code outputs: You can add some text that interprets or discusses the outputs.\n\nall in one document!\nWhen used effectively, Markdown documentation can help anyone who opens your Jupyter Notebook to follow, understand and even reproduce your workflow.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#format-text-in-jupyter-notebook-with-markdown",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#format-text-in-jupyter-notebook-with-markdown",
    "title": "Format Text With Markdown",
    "section": "Format Text in Jupyter Notebook with Markdown",
    "text": "Format Text in Jupyter Notebook with Markdown\n\nMarkdown Cells in Jupyter Notebook\nIn the previous chapter on Jupyter Notebook, you learned how to add new Markdown cells to your Jupyter Notebook files using Menu tools and Keyboard Shortcuts to create new cells.\n\n\n\n\n\n\n\n\nFunction\nKeyboard Shortcut\nMenu Tools\n\n\n\n\nCreate new cell\nEsc + a (above), Esc + b (below)\nInsert‚Üí Insert Cell Above OR Insert ‚Üí Insert Cell Below\n\n\nCopy Cell\nc\nCopy Key\n\n\nPaste Cell\nv\nPaste Key\n\n\n\nYou also learned how to change the default type of the cell by clicking in the cell and selecting a new cell type (e.g.¬†Markdown) in the cell type menu in the toolbar. Furthermore, you learned that in a Jupyter Notebook file, you can double-click in any Markdown cell to see the syntax, and then run the cell again to see the Markdown formatting.\nNote: if you type text in a Markdown cell with no additional syntax, the text will appear as regular paragraph text. You can add additional syntax to that text to format it in different ways.\nOn this page, you will learn basic Markdown syntax that you can use to format text in Jupyter Notebook files.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#section-headers",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#section-headers",
    "title": "Format Text With Markdown",
    "section": "Section Headers",
    "text": "Section Headers\nYou can create a heading using the pound (#) sign. For the headers to render properly, there must be a space between the # and the header text.\nHeading one is denoted using one # sign, heading two is denoted using two ## signs, etc, as follows:\n## Heading Two\n\n### Heading Three\n\n#### Heading Four\nHere is a sample of the rendered Markdown:\n\nHeading Three\n\nHeading Four\nNote: the titles on this page are actually formatted using Markdown (e.g.¬†the words Section Headers above are formatted as a heading two).",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#lists",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#lists",
    "title": "Format Text With Markdown",
    "section": "Lists",
    "text": "Lists\nYou can also use Markdown to create lists using the following syntax:\n* This is a bullet list\n* This is a bullet list\n* This is a bullet list\n\n\n1. And you can also create ordered lists\n2. by using numbers\n3. and listing new items in the lists \n4. on their own lines\nIt will render as follows:\n\nThis is a bullet list\nThis is a bullet list\nThis is a bullet list\n\n\nAnd you can also create ordered lists\nby using numbers\nand listing new items in the lists\non their own lines\n\nNotice that you have space between the * or 1. and the text. The space triggers the action to create the list using Markdown.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#bold-and-italicize",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#bold-and-italicize",
    "title": "Format Text With Markdown",
    "section": "Bold and Italicize",
    "text": "Bold and Italicize\nYou can also use ** to bold or * to italicize words. To bold and italicize words, the symbols have to be touching the word and have to be repeated before and after the word using the following syntax:\n*These are italicized words, not a bullet list*\n**These are bold words, not a bullet list**\n\n* **This is a bullet item with bold words**\n* *This is a bullet item with italicized words*\nIt will render as follows:\nThese are italicized words, not a bullet list These are bold words, not a bullet list\n\nThis is a bullet item with bold words\nThis is a bullet item with italicized words",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#highlight-code",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#highlight-code",
    "title": "Format Text With Markdown",
    "section": "Highlight Code",
    "text": "Highlight Code\nIf you want to highlight a function or some code within a plain text paragraph, you can use one backtick on each side of the text like this:\n`Here is some code!`\nwhich renders like this:\nHere is some code!\nThe symbol used is the backtick, or grave; not an apostrophe (on most US keyboards, it is on the same key as the tilde (~)).",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#horizontal-lines-rules",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#horizontal-lines-rules",
    "title": "Format Text With Markdown",
    "section": "Horizontal Lines (Rules)",
    "text": "Horizontal Lines (Rules)\nYou can also create a horizontal line or rule to highlight a block of Markdown syntax (similar to the highlighting a block of code using the backticks):\n***\n\nHere is some important text!\n\n***\nwhich renders like this:\n\nHere is some important text!",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#hyperlinks",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#hyperlinks",
    "title": "Format Text With Markdown",
    "section": "Hyperlinks",
    "text": "Hyperlinks\nYou can also use HTML in Markdown cells to create hyperlinks to websites using the following syntax:\n&lt;a href=\"url\" target=\"_blank\"&gt;hyperlinked words&lt;/a&gt;\nYou can identify the words that will be hyperlinked (i.e.¬†prompt a web page to open when clicked) by replacing hyperlinked words in the example above.\nFor example, the following syntax:\nOur program website can be found at &lt;a href=\"http://earthdatascience.org\" target=\"_blank\"&gt;this link&lt;/a&gt;.\nwill render as follows with this link as the hyperlinked words:\nOur program website can be found at this link.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#render-images",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#render-images",
    "title": "Format Text With Markdown",
    "section": "Render Images",
    "text": "Render Images\nYou can also use Markdown to link to images on the web using the following syntax:\n![alt text here](url-to-image-here)\nThe alt text is the alternative text that appears if an image fails to load on webpage; it is also used by screen-reading tools to identify the image to users of the screen-reading tools.\nFor example, the following syntax:\n![Markdown Logo is here.](https://www.fullstackpython.com/img/logos/markdown.png)\nwill render as follows with an alt text of Markdown Logo is here.:\n\n\n\nMarkdown Logo is here.\n\n\n\nLocal Images Using Relative Computer Paths\nYou can also add images to a Markdown cell using relative paths to files in your directory structure using:\n![alt text here](path-to-image-here)\nFor relative paths (images stored on your computer) to work in Jupyter Notebook, you need to place the image in a location on your computer that is RELATIVE to your .ipynb file. This is where good file management becomes extremely important.\nFor a simple example of using relative paths, imagine that you have a subdirectory named images in your earth-analytics directory (i.e.¬†earth-analytics/images/).\nIf your Jupyter Notebook file (.ipynb) is located in root of this directory (i.e.¬†earth-analytics/notebook.ipynb), and all images that you want to include in your report are located in the images subdirectory (i.e.¬†earth-analytics/images/), then the path that you would use for each image is:\nimages/image-name.png\nIf all of your images are in the images subdirectory, then you will be able to easily find them. This also follows good file management practices because all of the images that you use in your report are contained within your project directory.\n\n\n\n\n\n\nData tip\n\n\n\nThere are many free Markdown editors out there! The atom.io editor is a powerful text editor package by GitHub, that also has a Markdown renderer that allows you to preview the rendered Markdown as you write.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#additional-resources",
    "href": "pages/02-file-formats-eds/04-text-file-formats-eds/02-markdown.html#additional-resources",
    "title": "Format Text With Markdown",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nGitHub Guide on Markdown\n Jupyter Notebook Markdown Resources",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Text File Types",
      "Format Text With Markdown"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html",
    "title": "What Is Version Control",
    "section": "",
    "text": "In this chapter, you will learn about the benefits of version control for tracking and managing changes to your files. You will also learn how to implement version control using git and then upload changes to the cloud version of your files on Github.com.\nAfter completing this chapter, you will be able to:",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#git-and-github.com",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#git-and-github.com",
    "title": "What Is Version Control",
    "section": "",
    "text": "In this chapter, you will learn about the benefits of version control for tracking and managing changes to your files. You will also learn how to implement version control using git and then upload changes to the cloud version of your files on Github.com.\nAfter completing this chapter, you will be able to:",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#what-you-need",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#what-you-need",
    "title": "What Is Version Control",
    "section": " What You Need",
    "text": "What You Need\nBe sure that you have completed the instructions on Setting up Git, Bash, and Conda on your computer to install the tools for your operating system (Windows, Mac, Linux).\nYou will also need a web browser and your GitHub.com login (username and password).",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#what-is-version-control",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#what-is-version-control",
    "title": "What Is Version Control",
    "section": "What is Version Control?",
    "text": "What is Version Control?\nA version control system maintains a record of changes to code and other content. It also allows us to revert changes to a previous point in time.\n\n \n\nMany of us have used the ‚Äúappend a date‚Äù to a file name version of version control at some point in our lives. Source: ‚ÄúPiled Higher and Deeper‚Äù by Jorge Cham on www.phdcomics.com.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#types-of-version-control",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#types-of-version-control",
    "title": "What Is Version Control",
    "section": "Types of Version control",
    "text": "Types of Version control\nThere are many forms of version control. Some not as good:\n\nSave a document with a new date or name (we‚Äôve all done it, but it isn‚Äôt efficient and easy to lose track of the latest file).\nGoogle Docs ‚Äúhistory‚Äù function (not bad for some documents, but limited in scope).\n\nSome better:\n\nVersion control tools like Git, Mercurial, or Subversion.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#why-version-control-is-important",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#why-version-control-is-important",
    "title": "What Is Version Control",
    "section": "Why Version Control is Important",
    "text": "Why Version Control is Important\nVersion control facilitates two important aspects of many scientific workflows:\n\nThe ability to save and review or revert to previous versions.\nThe ability to collaborate on a single project.\n\nThis means that you don‚Äôt have to worry about a collaborator (or your future self) overwriting something important. It also allows two people working on the same document to efficiently combine ideas and changes.\n\nThought Questions: Think of a specific time when you weren‚Äôt using version control that it would have been useful.\n\nWhy would version control have been helpful to your project and workflow?\nWhat were the consequences of not having a version control system in place?",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-version-control-systems-works",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-version-control-systems-works",
    "title": "What Is Version Control",
    "section": "How Version Control Systems Works",
    "text": "How Version Control Systems Works\n\nSimple Version Control Model\nA version control system tracks what has changed in one or more files over time. Version control systems begin with a base version of a document. Then, they save the committed changes that you make.\nYou can think of version control as a tape: if you rewind the tape and start at the base document, then you can play back each change and end up with your latest version.\n\n \n\nA version control system saves changes to a document, sequentially as you add and commit them to the system. Source: Software Carpentry.\n\n\nOnce you think of changes as separate from the document itself, you can then think about ‚Äúplaying back‚Äù different sets of changes onto the base document. You can then retrieve, or revert to, different versions of the document.\nCollaboration with version control allows users to make independent changes to the same document.\n\n \n\nDifferent versions of the same document can be saved within a version control system. Source: Software Carpentry.\n\n\nIf there aren‚Äôt conflicts between the users‚Äô changes (a conflict is an area where both users modified the same part of the same document in different ways), you can review two sets of changes on the same base document. If there are conflicts, they can be resolved by choosing which change you want to keep.\n\n \n\nTwo sets of changes to the same base document can be merged together within a version control system if there are no conflicts (areas where both users modified the same part of the same document in different ways). If there are conflicts, they can resolved by choosing which change you want to keep. After conflicts are resolved, all other changes submitted by both users can then be merged together. Source: Software Carpentry.\n\n\nA version control system is a tool that keeps track of all of these changes for us. Each version of a file can be viewed and reverted to at any time. That way if you add something that you end up not liking or delete something that you need, you can simply go back to a previous version.\n\n\nGit and GitHub - A Distributed Version Control Model\nGit uses a distributed version control model. This means that there can be many copies (or forks/branches in GitHub world) of the repository. When working locally, git is the program that you will use to keep track of changes to your repository.\nGitHub.com is a location on the internet (a cloud web server) that acts as a remote location for your repository. GitHub provides a backup of your work that can be retrieved if your local copy is lost (e.g.¬†if your computer falls off a pier). GitHub also allows you to share your work and collaborate with others on projects.\n\n \n\nOne advantage of a distributed version control system is that there are many copies of the repository. Thus, if any one server or computer dies, any of the client repositories can be copied and used to restore the data! Source: Pro Git by Scott Chacon and Ben Straub.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-git-and-github-support-version-control",
    "href": "pages/03-git-github/01-intro-version-control/01-intro-version-control.html#how-git-and-github-support-version-control",
    "title": "What Is Version Control",
    "section": "How Git and GitHub Support Version Control",
    "text": "How Git and GitHub Support Version Control\nDue to the functionality that each tool provides, you can use git and GitHub together in the same workflow to: * keep track of changes to your code locally using git. * synchronizing code between different versions (i.e.¬†either your own versions or others‚Äô versions). * test changes to code without losing the original. * revert back to older version of code, if needed. * back-up your files on the cloud (GitHub.com). * share your files on GitHub.com and collaborate with others.\nThroughout this textbook, you will learn more about the functionality of git and GitHub for version control and collaboration to support open reproducible science.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "What Is Version Control"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html",
    "title": "Propose changes to GitHub repositories",
    "section": "",
    "text": "When collaborating, it‚Äôs important to be able to see potential changes and discuss them with others. A pull request (referred to as a PR) is a way for you to suggest changes to code in a GitHub repository. It allows you and your collaborators to:\n\nSee suggested changes side-by-side the original,\nLeave comments on individual lines,\nDiscuss the changes\nRun tests on the new code to make sure it works with everything else, and\nMake sure that any suggestions adhere to group policies and norms,\n\nall before making any official changes. Once everyone agrees on the changes, you can merge them in with the original.\n\n\n\n\n\n\nTip\n\n\n\nYou can keep different versions of your code, called branches in your repository. The main branch is usually where production code is kept. When collaborating, it is important to make sure that new code works the way it is supposed to before merging it into main.\n\n\nPull requests can be implemented in two ways, usually depending on what your relationship is with the project:\n\nWhen you are part of a project team, you will usually develop changes on a branch within the team‚Äôs repository.\nWhen contributing to a project from the outside, you usually make your changes in a fork (i.e.¬†copy owned by you) of that repository.\n\nIn either case, once you think your code is ready, it‚Äôs polite to make a pull request rather than unilaterally making changes. That way your team can review what you‚Äôve done! The ability to make changes in the main branch is usually restricted to just a few people.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#requesting-changes-to-a-repository",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#requesting-changes-to-a-repository",
    "title": "Propose changes to GitHub repositories",
    "section": "",
    "text": "When collaborating, it‚Äôs important to be able to see potential changes and discuss them with others. A pull request (referred to as a PR) is a way for you to suggest changes to code in a GitHub repository. It allows you and your collaborators to:\n\nSee suggested changes side-by-side the original,\nLeave comments on individual lines,\nDiscuss the changes\nRun tests on the new code to make sure it works with everything else, and\nMake sure that any suggestions adhere to group policies and norms,\n\nall before making any official changes. Once everyone agrees on the changes, you can merge them in with the original.\n\n\n\n\n\n\nTip\n\n\n\nYou can keep different versions of your code, called branches in your repository. The main branch is usually where production code is kept. When collaborating, it is important to make sure that new code works the way it is supposed to before merging it into main.\n\n\nPull requests can be implemented in two ways, usually depending on what your relationship is with the project:\n\nWhen you are part of a project team, you will usually develop changes on a branch within the team‚Äôs repository.\nWhen contributing to a project from the outside, you usually make your changes in a fork (i.e.¬†copy owned by you) of that repository.\n\nIn either case, once you think your code is ready, it‚Äôs polite to make a pull request rather than unilaterally making changes. That way your team can review what you‚Äôve done! The ability to make changes in the main branch is usually restricted to just a few people.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#introduction-to-the-pull-request-workflow",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#introduction-to-the-pull-request-workflow",
    "title": "Propose changes to GitHub repositories",
    "section": "Introduction to the Pull Request Workflow",
    "text": "Introduction to the Pull Request Workflow\nFor the purposes of this page, pretend that you are working with your colleague on a project. You have been asked to make some changes to a README.md file in your collaborator‚Äôs repository.\nTo begin this task, you:\n\nOn GitHubCloned\n\n\nFirst, make your changes in a new branch:\n\nOpen up the main page of the repository on GitHub, making sure to select the Code tab.\nClick on the README.md file.\nClick on the edit button (pencil symbol) in the upper right.\nMake your changes and click Commit changes\nSelect the option to commit changes to a new branch. You probably won‚Äôt have permission to commit to main in someone else‚Äôs repository‚Ä¶but just in case make sure to check that you aren‚Äôt unilaterally making changes!\nLeave a message describing what you did.\nConfirm by clicking Commit.\n\nNow, your changes are in a branch. If you want your collaborator to incorporate them into the main branch, you should submit a pull request:\n\nClick on the Pull Requests tab\nYou should see a banner stating that there are changes in the new branch you created, and asking if you want to create a pull request. The easiest way to create a pull request is to click on the link in that banner.\nLeave a message describing the changes you made.\nClick Create Pull Request.\n\n\n\nFirst, you will need to create a fork of your collaborator‚Äôs repository to make changes in: 1. Create a fork of your colleague‚Äôs repository. 2. Clone that fork to your local computer and begin to work on the README.md file in a text editor. 3. When you are done editing the text file locally on your computer, you save the file and git add and git commit your changes using git. 4. Finally, you git push those changes back up to your fork of your colleague‚Äôs repository.\nNow, the changes are in your fork but you want to suggest those changes as updates to your colleague‚Äôs repository. To do this, you submit a pull request with the changes to your colleague‚Äôs repository.\n\n \n\nLEFT: To sync changes made and committed locally on your computer to your GitHub account, you push the changes from your computer to your fork on GitHub. RIGHT: To suggest changes to another repository, you submit a Pull Request to update the central repository. Source: Colin Williams, NEON.\n\n\n\n\n\nWhen you open up a pull request, you will see the line by line changes or differences between the file you submitted, compared to the file that exists in a repository. These changes are called diffs (short for differences).\nPull requests show diffs of the content between the branch and repository where you made changes, and the branch and repository that you are submitting changes to. The changes are shown in green and red. The color green represents additions to the file whereas red represents deletions.\n\n \n\nThis screenshot shows a diff associated with a pull request. On the LEFT, you can see the text (highlighted with red) that was modified by the proposed pull request. The words that are dark red were the ones that were deleted. On the RIGHT, you can see the text (in green) that represents the proposed changes. The words that are darker green were added. In this example, the word earthpy was replaced with matplotcheck in the contributing.rst file of the repo.\n\n\n\nGItHub and Mentions: Communicating With Your Collaborators\nAfter you have submitted your PR, your colleague can review the changes. It is good practice to ‚Äúmention‚Äù your colleague specifically when you submit your PR to ensure that they see it. You can do that by using @&lt;their-github-username&gt; in a comment in the PR (e.g.¬†@eastudent which will notify the GitHub user called eastudent).\nYour colleague will review the changes. If they would like a few additional changes, they will request changes.\nOnce your colleague is happy with the changes, then they will merge your PR.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#the-anatomy-of-a-diff-difference-between-two-files",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#the-anatomy-of-a-diff-difference-between-two-files",
    "title": "Propose changes to GitHub repositories",
    "section": "The Anatomy of a Diff (Difference Between Two Files)",
    "text": "The Anatomy of a Diff (Difference Between Two Files)\nAs mentioned above, a diff represents differences between two files in git.\nGit keeps track of changes through additions and deletions on a character by character and line by line basis.\nSo, pretend that the word ‚Äúgreat‚Äù is spelled incorrectly in a file, and you wish to fix the spelling. The edit that you will make is: graet is changed to great\nThe change above represents 2 character deletions and 2 additions.\nThe word great has 5 characters, so the number of characters is not changing in this example.\nHowever, you are deleting: ae and replacing those two characters with ea.\nAs you edit files in a version control system like git, it is tracking each character addition and deletion. These tracked changes are what you see in a diff when you submit a pull request.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#github-pull-requests-support-open-science-and-open-collaboration",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#github-pull-requests-support-open-science-and-open-collaboration",
    "title": "Propose changes to GitHub repositories",
    "section": "GitHub Pull Requests Support Open Science and Open Collaboration",
    "text": "GitHub Pull Requests Support Open Science and Open Collaboration\nA pull request (herein referred to as PR) is ideal to use as a collaboration tool. A PR is similar to a ‚Äúpush‚Äù that you would make to a repository that you own. However, a PR also allows for a few things:\n\nIt allows you to contribute to another repo without needing administrative privileges to make changes to the repository.\nIt documents changes as they are made to a repository and as they address issues. It also makes those changes easily visible to anyone who may want to see them.\nIt allows others to review your changes and suggest corrections, additions, and edits on a line by line basis to those changes as necessary.\nIt supports and documents conversation between collaborators on the project.\nIt allows repository administrators or code maintainers to control what gets added to the project repository.\n\nNote if you do not own the repository that you wish to modify, a PR is the only way that you can contribute changes to that repository.\nThis ability to suggest changes to ANY repository, without needing administrative privileges is a powerful feature of GitHub.\nThis workflow supports open science because the entire process of updating content is open and supported by peer review. You can make as many changes as you want in your fork, and then suggest that the owner of the original repository incorporate those changes using a pull request.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#pull-request-terminology---head-vs.-base",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#pull-request-terminology---head-vs.-base",
    "title": "Propose changes to GitHub repositories",
    "section": "Pull Request Terminology - Head vs.¬†Base",
    "text": "Pull Request Terminology - Head vs.¬†Base\nConsider the example above where you were submitting changes to the contributing.rst file in your colleague‚Äôs repo. After pushing the changes to your fork, you are ready to make a pull request to your colleague‚Äôs repo.\nWhen submitting a pull request, you need to specify both where you‚Äôd like to suggest the changes (e.g.¬†your colleague‚Äôs repo) and where the changes are coming from (e.g.¬†your fork or branch).\nThere are two key terms that you should know to set this up in Github:\n\nBase: Base is the repository and branch that will be updated. Changes will be added to this repository via the pull request. Following the example above, the base repo is your colleague‚Äôs repo.\nHead: Head is the repository and branch containing the changes that will be added to the base. Following the example above, this is your repository (your fork of your colleague‚Äôs repo).\n\nOne way to remember the difference between head and base is that the ‚Äúhead‚Äù is ahead of the ‚Äúbase‚Äù. Ahead means that there are changes in the head repo that the base repo does NOT have.\nSo, you need to add the changes from the head (your forked repo) to the base (your colleague‚Äôs repo).\nWhen you begin a pull request, the head and base will auto-populate. It may look something like this:\n\nbase fork: your-colleagues-username/project-name\nhead fork: your-username/project-name\n\nNext, you will learn how to create a pull request in GitHub.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#how-to-submit-pull-requests-to-suggest-changes-to-repositories",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#how-to-submit-pull-requests-to-suggest-changes-to-repositories",
    "title": "Propose changes to GitHub repositories",
    "section": "How To Submit Pull Requests To Suggest Changes To Repositories",
    "text": "How To Submit Pull Requests To Suggest Changes To Repositories\n\n \n\nWhen you setup your pull request, remember to ensure that the base is the repository that you wish to ADD change to. Your fork (or a branch) is where the changes currently exist (i.e.¬†the head). When creating a new pull request, you should always check that the changes in your PR are the ones that you wish to submit. It‚Äôs also good practice to ping or @mention a collaborator who you want to review and merge the PR if you know who that will be.\n\n\n\nStep 1 - Start to Open Your Pull Request on GitHub\nTo start a PR, click the New pull request button on the main page of your forked repository.\n\n \n\nLocation of the new pull request button on the main page of an example forked repository.\n\n\n\n\n\n\n\n\nData Tip\n\n\n\nThere are many different ways to submit a pull request. You can also click the ‚ÄúPull Requests‚Äù tab at the top of the main page of a repository to submit a pull request (PR). When the pull request page opens, click the ‚ÄúNew pull request‚Äù button to initiate a PR. You can also click on the PR button in the repository that you are submitting changes to!\n\n\n\n\nStep 2 - Select Repository That You Want to Update on GitHub\nIn this example, you are updating another repository with changes from your fork.\nNext, select both the repo that you wish to update (the base repo) and the repo that contains the content that you wish to use to update the base (the head repo).\nIn this example, you want to update:\n\nbase: your-colleagues-username/project-name with\nhead: commits in your fork your-username/project-name.\n\nThe above pull request configuration tells GitHub to update the base repository with contents from your forked repository, or the head repository.\n\n\nStep 3 - Verify The Changes In Your Pull Request\nWhen you compare two repos in a pull request page, GitHub provides an overview of the differences (diffs) between the files.\nCarefully review these changes to ensure that the changes that you are submitting are in fact the ones that you want to submit.\n\nFirst, look at the number of files. How many files did you modify? Do you see that many files listed in the PR?\nLook over the changes made to each file. Do the changes all look correct (like changes that you committed to the repository)?\n\n\n \n\nWhen you first create a PR, be sure to check the PR contents. Notice in this image that the number of files and number of commits are displayed. Make sure these numbers make sense based upon the changes that you made.\n\n\n Data Tip: You can also click on the commit titles to see the specific changes in each commit. This is another way to check that the contents of a PR are what you expect them to be. {: .notice‚Äìsuccess}\nThis review of your own PR before submitting it is important. Remember that someone else is going to take time to review your PR.\nMake sure that you take care of cleaning up what you can FIRST, before submitting the PR.\n\n\nStep 4 - Click on the Create New Pull Request Button\nThe next step of the create PR process is to click the ‚ÄúCreate Pull Request‚Äù button. Note that this button will NOT be available if you have not made changes in your repo (e.g.¬†fork).\nClick the green ‚ÄúCreate Pull Request‚Äù button to start your pull request. Once you do that, a title box and description box will be visible.\nAdd a title and write a brief description of your changes. When you have added your title and description, click on ‚ÄúCreate Pull Request‚Äù.\n Data Tip: You can modify the title and description of your pull request at any time - even after you‚Äôve submitted the pull request! {: .notice‚Äìsuccess}\n\n \n\nPull request titles should be concise and descriptive of the content in the pull request. More detailed notes can be left in the comments box.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#pull-requests-and-your-location-on-github",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#pull-requests-and-your-location-on-github",
    "title": "Propose changes to GitHub repositories",
    "section": "Pull Requests and Your Location On GitHub",
    "text": "Pull Requests and Your Location On GitHub\nWhen you create a new pull request, you will be automatically transferred to the GitHub.com URL or landing page for the base repository (your colleague‚Äôs repository).\nAt this point, you have submitted your pull request!\nAt the bottom of your pull request, you may see an large green button that says Merge Pull Request. This button will be used by owner of the repository (your colleague or perhaps others working on this collaborative project) to merge in your changes, when a review has been completed.\nThe repo owner will review your PR and may ask for changes. When they are happy with all of the changes, your PR could get merged!\n Data Tip: All future commits that you make to your fork (on the branch where you are working) will continue to be added to the open pull request UNTIL it is merged. {: .notice‚Äìsuccess}",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#how-to-merge-github-pull-requests-on-github",
    "href": "pages/03-git-github/02-github-collaboration/02-pull-requests.html#how-to-merge-github-pull-requests-on-github",
    "title": "Propose changes to GitHub repositories",
    "section": "How To Merge GitHub Pull Requests on GitHub",
    "text": "How To Merge GitHub Pull Requests on GitHub\nAfter you have submitted your PR, someone who owns or manages the repo where you are submitting the PR will review it. At this point, they will either:\n\nsuggest that you make some changes to the PR or\nmerge the PR if they are happy with all of the changes that you made.\n\nA screencast showing how this process works is below.\n\n \n\nIt‚Äôs common for a reviewer to comment on your pull request and request changes. Once the reviewer is happy with the PR, they will merge it using the merge button on the bottom of the PR. It is important to note that you can only merge a PR in a repo in which you have permissions to merge.\n\n\n\nHow To Close Pull Requests on GitHub\nYou can also close a pull request on GitHub if you decide you are not ready to submit your files from your forked repository to the original repository.\nFor example, the pull request you just created in this lesson can be closed anytime before it is merged.\nWhen you are ready to submit changes, you can simply create a new pull request on GitHub following these same steps.\nTo close a pull request, click on Close pull request button towards the bottom of the pull request page.\n\n \n\nLocation of the Close pull request button on an example pull request page from jenp0277 to earthlab-education.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Version Control",
      "Propose changes to GitHub repositories"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/02-images.html",
    "href": "pages/03-git-github/03-github-portfolio/02-images.html",
    "title": "Add images to your portfolio",
    "section": "",
    "text": "Follow along with our video demo here:\n\n \n\nDEMO: Add images to your portfolio (Short course) by ESIIL",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Add images to your portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/02-images.html#images-make-your-website-easier-to-understand",
    "href": "pages/03-git-github/03-github-portfolio/02-images.html#images-make-your-website-easier-to-understand",
    "title": "Add images to your portfolio",
    "section": "Images make your website easier to understand",
    "text": "Images make your website easier to understand\nThe following code will display an image from the internet using Markdown:\n![Mississippi Delta](https://deltax.jpl.nasa.gov/img/delta-google-earth.jpg)\n\n\n\nMississippi Delta\n\n\n\nImage source: image of the Mississippi Delta from the Jet Propulsion Laboratory DeltaX project\n\n\n\n\n\n\n\nImportant\n\n\n\nAlways make sure you have permission to use images, and give credit to your image sources. Most images are fair to use for education (teaching, research, and study), as long as you give credit to your source. If you later on decide to use your portfolio to make money (for example, if you use it as marketing materials), then you should reconsider what images you are using.\nLearn more about fair use from the CU Library Fair Use page.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Add images to your portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/02-images.html#adding-your-own-images",
    "href": "pages/03-git-github/03-github-portfolio/02-images.html#adding-your-own-images",
    "title": "Add images to your portfolio",
    "section": "Adding your own images",
    "text": "Adding your own images\nIncluding images from the web is the easiest way to add images to your site, but you will probably want to include your own images! There are three common ways that you can add images you have taken or created to your website:\n\nUploading an image to your portfolio repository on GitHub\nUploading an image elsewhere and then linking to it\nGenerate an image with code and render it into your website\n\nWe‚Äôll try out the first two options in this lesson. But first, you need to understand the difference between absolute and relative URLs on the web.\n\nAbsolute and relative links\nOn your website, you can link to files on the web, or you can link to local files.\nAbsolute URLs are on the web, and so they begin with something like http:// or https://. When you are using an absolute link, you don‚Äôt need to worry about your file structure ‚Äì for example, what folder your Markdown file is in. If you move things around in your project the link will still work.\n\n\n\n\n\n\nWarning\n\n\n\nLinks on the internet aren‚Äôt forever. If you are using an absolute link, you should check on it occasionally to make sure it‚Äôs still there. You can also select image sources that are more reliable long term, or even an image with a permanent link or Digital Object Identifier (DOI).\n\n\nRelative links are to files that are local, or in the same location as your website. Keep in mind that what is local can change if you keep multiple copies of your repository, such as one on GitHub and one on your computer. Relative links, because they will change depending on the file and directory structure of your website. If you are working on your own computer, you can link to a file that isn‚Äôt in your repository, and then it won‚Äôt show up when you deploy your site.\n\n\n\n\n\n\n\nWhat is a directory?\n\n\n\nDirectory is another word for a folder on your computer ‚Äì you can organize files by putting them in directories.\n\nThere‚Äôs a couple of special characters when using relative links. Suppose you have a Markdown file in a pages directory, and an image you want to display in an img folder:\n&lt;username&gt;.github.io/\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ pages/\n‚îÇ   ‚îî‚îÄ‚îÄ index.md\n‚îî‚îÄ‚îÄ img/\n    ‚îî‚îÄ‚îÄ cool_satellite_image.jpeg\n\n\n\n\n\n\n\nSpeak Code: File Trees\n\n\n\nIn the text diagram to the left, indentation and lines are being used to show which files are inside which folders ‚Äì for example the index.md file is indented under the pages directory and connected by a line, indicating that index.md is inside pages.\n\nWhen you are working in index.md, you are in the pages directory. If you want to go up a directory to &lt;username&gt;.github.io from pages, you can use ... For example, ../img/cool_satellite_image.jpeg.\nYou can also make website paths starting from the root directory of the site, in this case &lt;username&gt;.github.io, by starting the path with a slash character, /:\n\n\n\nKeyboard highlighting the slash key\n\n\nThe equivalent link to ../img/cool_satellite_image.jpeg would be /img/cool_satellite_image.jpeg.\n\n\nUpload an image to GitHub\n\nSTEP 1: Create an empty image directory on GitHub\nIt‚Äôs important to keep your files organized in a project like a website. Before uploading any images, you should make a place to put them. By convention, images in most websites are kept in the img directory, but you can name it whatever you want.\ngit, the system used by GitHub to keep track of changes to files, doesn‚Äôt keep a record of directories without any files in them, and as of now you can‚Äôt upload an image to a directory that doesn‚Äôt exist yet. This puts us in a bit of a pickle! Fortunately, there‚Äôs a common solution ‚Äì we‚Äôll create an empty text file named .keep in the new directory.\n\n\n\n\n\n\n\nSpeak Code ‚Äì why .keep?\n\n\n\nYou could name your empty placeholder file anything you want. However, there are two good reasons to use .keep as your filename. First, files that start with a dot (.) are hidden in unix-based operating systems like linux and MacOS, which helps avoid clutter when you are looking at your files. Second, adhering to the convention means that anyone else looking at your repository will know what the .keep file is doing there.\n\nTo create a img/.keep file, go to the main page of your website repository on GitHub and click the Code tab. Then, find the + menu button on the upper right and select Add a file from the dropdown:\n\n\n\nClick add a file\n\n\nType `img/.keep into the name field and then commit your changes:\n\n\n\nName the file img/keep and commit\n\n\n\n\nSTEP 2: Upload your image to the img directory\nFirst, make sure that the name of your image file on your computer is descriptive and machine-readable (doesn‚Äôt contain any spaces or special characters other than _, -, or .). You won‚Äôt be able to rename your file once you upload it to GitHub.\nFrom the Code tab in your website repository, click on the img directory in the files:\n\n\n\nClick on the img directory\n\n\nThen, click the Add file menu in the upper right, but this time select Upload files:\n\n\n\nClick on Upload Files\n\n\nDrag your image file, or browse and select it. Then, click Commit changes:\n\n\n\nCommit file upload\n\n\n\n\n\nOther places to host images\nGitHub has a couple of limitations when it comes to hosting images:\n\nThe site will not allow you to upload files larger than 100MB\nIf you make changes to an image file, GitHub will keep all the previous versions, which can make your repository unwieldy to download. If you are generating image files yourself and changing them frequently, consider hosting them somewhere else.\n\nSo, where can you host images that you have taken or generated? There are a few options:\n\nYou can use the Free Image Hosting service to upload images without an account or giving up any information about yourself. Note that while you retain ownership of these images you are granting a license to Free Image Hosting to use them however they want.\nFor a final version, you can use a research hosting service like figshare to upload images and get code to embed them in your website.\nIf you want to use photos you have already uploaded to social media, you can usually get a direct link by right-clicking on the image and selecting Copy Image Link.\nYou will likely find that most file storage services such as Google Drive and Dropbox don‚Äôt provide you with a direct link to images that you can use in a website. You can look for instructions on generating direct links for these files, but they are often unsupported and could change without warning.\nThere‚Äôs another way of hosting on GitHub that doesn‚Äôt have the same drawbacks when it comes to large files. You can include files in a release, which creates a direct link to files, but does not attempt to track changes. To get started, follow the instructions from GitHub documentation. Note that once you have a release you can add additional files to it.\n\n\n\n\n\n\n\nWarning\n\n\n\nBy uploading images to social media or other hosting services, you are sometimes giving up your rights to the image, or granting. Photo apps like Flickr are usually better bets, since they are built for photographers with copyright protection in mind. But be sure to read the fine print when uploading material that is sensitive to you personal or to your community ‚Äì you can look for the term ownership rights in the Terms and Conditions of whatever sites you use.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Add images to your portfolio"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html",
    "title": "Create your own portfolio webpage",
    "section": "",
    "text": "GitHub is a powerful software development tool owned and operated by Microsoft. It is used almost universally for software development and scientific projects. It lets you: * Keep track of all the changes you have ever made, when, and why * Collaborate with others * Get your code online so you can access it anywhere * Use a cloud platform to run your code * Publish a website in minutes We‚Äôll be focusing on that last feature in this activity, in which you will create and publish your own online portfolio website. Read more about git and GitHub in our open Earth Data Science textbook pages.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-0-create-a-github-account",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-0-create-a-github-account",
    "title": "Create your own portfolio webpage",
    "section": "Step 0: Create a GitHub account",
    "text": "Step 0: Create a GitHub account\nUse this link to create a free GitHub account.\n\n\n\n\n\n\nWarning\n\n\n\nIf you already have a GitHub account, there is no need to create a new account!",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-1-create-a-repository",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-1-create-a-repository",
    "title": "Create your own portfolio webpage",
    "section": "Step 1: Create a repository",
    "text": "Step 1: Create a repository\nOnce you have a GitHub account, get started by creating a new repository for your webpage. There are several ways to accomplish this task.\n\n\n\n\n\n\nWarning\n\n\n\nSometimes buttons on GitHub are blue instead of green.\n\n\n\n\n\n\n\n\n\nWhat is a repository?\n\n\n\nA GitHub repository is a collection of code, documentation, and configuration files. All changes you make in a repository will be tracked using the version control system git. You can discuss and manage your project‚Äôs work within the repository.\n\nTo do this you can:\n\nNavigate to your profile page\nClick on the dropdown arrow next to your profile photo in the upper right corner\nSelect Your profile\n\n\n\nSelect Your profile\n\n\nSelect the Repositories tab from the menu near the top of the page.\n\n\n\nSelect the Repositories tab from the menu near the top of the page.\n\n\nFrom here, you can select the green New button on the right to get started.\n\n\n\nSelect the green New button on the right to get started\n\n\nCustomize the settings:\n\nGive your repository a short and descriptive name. We recommend &lt;yourusername&gt;.github.io because it results in the simplest url for your website.\nGive your repository a description\nMake your repository Public\nYou can skip adding the gitignore file for now\nAdd a README so your repository home page (on GitHub, NOT your published website) will include your title and description\nChoose a License for your repository. Check out choosealicense.com for more information about popular options.\n\nOnce you‚Äôre done, select the green Create Repository button at the bottom of the page\n\n\n\n\n\n\n\n\nSpeak Code\n\n\n\nWhen reading code snippets, the &lt; and &gt; symbols are usually used to surround text you should replace. Do not leave the &lt; and &gt; symbols in place!. For example, in this case your repository name would be jdoe.github.io, if jdoe was your GitHub username. There‚Äôs a BIG exception to this rule when it comes to building websites ‚Äì &lt; and &gt; are key characters if you are using HTML. Read more about HTML.\n\n\n\n\n\n\n\nLicenses\n\n\n\nA license, copyright, and data rights or data sovereignty are all slightly different. A license is about whether and how someone else can use the code in your repository. Copyright is about the text published on your website, and data rights are about whether and how others can use your data",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-2-create-a-new-index.md-file",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-2-create-a-new-index.md-file",
    "title": "Create your own portfolio webpage",
    "section": "Step 2: Create a new index.md file",
    "text": "Step 2: Create a new index.md file\nYou will create a new file called index.md that will serve as the content for your webpage. To do this you can :\n\nSelect the Add file button from the menu on the right\nSelect Create new file.\n\n\n\nSelect Create new file.\n\n\nName your new Markdown file index.md. This will make it the home page of your website. Then, add a Markdown header text to your index file, e.g.\n\n# A fabulous Earth Data Science Portfolio\n\n\n\n\n\n\nNote\n\n\n\nYou can change this text to your name or something else. This is your website, and you‚Äôll always be able to come back and make edits!",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-3-commit-changes",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-3-commit-changes",
    "title": "Create your own portfolio webpage",
    "section": "Step 3: Commit changes",
    "text": "Step 3: Commit changes\nNow that you‚Äôve created your index.md file and added some text, you‚Äôll want to commit changes to your repository. Add an optional extended description of your changes and then select the green Commit changes button at the bottom of the page.\n\n\n\nCommit changes",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-4-build-your-webpage",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-4-build-your-webpage",
    "title": "Create your own portfolio webpage",
    "section": "Step 4: Build your webpage",
    "text": "Step 4: Build your webpage\nOnce you‚Äôve created your index.md file you‚Äôre ready to build your webpage:\n\nFrom your repository, select the Settings tab from the right end of the menu.\n\n\n\nNavigate to your repository settings\n\n\nFrom here, scroll down the menu on the left and select Pages.\n\n\n\nSelect the Pages settings tab\n\n\nNow you‚Äôll want to select the main option under the Branch heading and then select Save.\n\n\n\nSelect the main branch in your repository",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-5-check-on-your-webpage",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-5-check-on-your-webpage",
    "title": "Create your own portfolio webpage",
    "section": "Step 5: Check on your webpage",
    "text": "Step 5: Check on your webpage\nCheck in on your webpage to see how it is doing by opening the link https://username.github.io/ in a new tab in your web browser. Here, you‚Äôll need to replace username with your GitHub username. Once you see your name (or whatever text you added to your index.md file in Step 2) appear as a Markdown header, then you know your webpage is working!\n\n\n\n\n\n\nNote\n\n\n\nSometimes your webpage can take a minute or so to build so be patient and refresh every 30 seconds or so until the page is done building. You can track the progress in the Actions tab.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-6-start-adding-information-to-your-webpage",
    "href": "pages/03-git-github/03-github-portfolio/01-create-portfolio-website.html#step-6-start-adding-information-to-your-webpage",
    "title": "Create your own portfolio webpage",
    "section": "Step 6: Start adding information to your webpage",
    "text": "Step 6: Start adding information to your webpage\n\n\n\n\n\n\n\nNote\n\n\n\nReview the **Markdown Basic Syntax guide to help you format your webpage using Markdown and HTML. We also have a lesson in our Earth Data Science textbook that may be helpful.\n\nNow you‚Äôre ready to start adding some more information to your webpage. Navigate back to your repository and open the index.md file that you just created. You will edit this page by clicking on the pencil icon on the right of the menu near the top of your repository page on GitHub. You will use Markdown and Hypertext Markup Language (HTML) to add text, links, images, and other content to your webpage. Markdown and HTML are both common markup langauges, and have wide application including formatting text, report writing, and website development.\n\n\n\nEdit a file on GitHub\n\n\n\nHere you should think about adding the following information to your webpage:\n\nYour name (as a header) if you haven‚Äôt already\nA bulleted list of links to your public contact information (email, GitHub account, LinkedIn account, social media accounts, etc.)\nYour educational and professional background\nA biographical paragraph about yourself\nWhat you‚Äôre excited about learning about Earth Data Science\nQuestions that you‚Äôd like to answer using Earth Data Science\n\nYou should also plan to add a photo of yourself and/or where you live. We‚Äôll go over how to add and customize images on your page in the next two lessons.\n\n\n\n\n\n\nWarning\n\n\n\nAlways remember to commit changes so that your updated content gets added to your webpage.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Create your own portfolio webpage"
    ]
  },
  {
    "objectID": "pages/03-git-github/03-github-portfolio/00-introduction.html",
    "href": "pages/03-git-github/03-github-portfolio/00-introduction.html",
    "title": "Join the Open Earth Data Science community online",
    "section": "",
    "text": "The internet has revolutionized science publishing. For example, most published scientific papers are now made freely available online within one year (Randall Munroe 2013):\n\n\n\nThe Rise of Open Science: The accelerating pace of scientific publishing and the rise of open access, as depicted by xkcd.com cartoonist Randall Munroe. Open access reached a tipping point in 2011, when more than half of new research became available freely online.\n\n\nIt‚Äôs not just peer-reviewed publications that have changed ‚Äì scientists all over the world now use websites, blogs, and social media to discuss, communicate, and publicize their work. The internet is also a great way to transparently involve your community in your research.\n\n\n\n\n\n\nImportant\n\n\n\nNot all science has to be open! It‚Äôs important to think about the impacts of publishing your work on people and communities wherever you are studying, and also honor principles data sovereignty. We will talk about some ways to publish your work while omitting or obscuring sensitive details, but for now make sure that you and your mentors are comfortable before putting your work on the internet.\n\n\nThere are lots of tools available for creating free websites. We, as Earth and Environmental Data Scientists, like to use a platform called GitHub Pages for a couple of reasons:\n\nIt‚Äôs completely free to use, event for larger websites (like this one!).\nIt is a feature of the code collaboration website GitHub, which is already where most programmers and scientists keep their code. Keeping our websites on GitHub also means that we can collaborate on and discuss them online, the same way we would any other code.\nIt can automatically build an attractive website using text-based, human-readable tools.\nIt can automatically incorporate the plots and maps generated by code.\nThough GitHub itself is not open source software (it‚Äôs owned by Microsoft), Pages is built on open-source tools. This means that if for some reason the availability or pricing structure ever changes we could download the code and put the website up somewhere else.\n\n\n\n\n\n\n\nCheck out our explainer video to learn more about what a personal portfolio webpage can do for you, and see some examples from previous students!\n\n \n\nDEMO: Build your portfolio by ESIIL\n\n\n\nIn the following lessons, you will learn how to create a personal portfolio webpage and publish it for free using GitHub Pages.\n\n\n\n\n\n\n\n\n\n\nCreate your own portfolio webpage\n\n\nDocument and share your work\n\n\nShow potential employers and collaborators what you can do, and share your work! In this activity, you will create a personal portfolio webpage. You‚Äôll use this webpage to share some biographical information and a photo of yourself. You can then update your webpage with links to work that you complete. \n\n\n\n\n\nNate Quarderer, Elsa Culler\n\n\n7 min\n\n\n\n\n\n\n\n\n\n\n\n\nAdd images to your portfolio\n\n\nAs they say, a picture‚Äôs worth 1000 words\n\n\nEffective scientific communication is often built on visual evidence, so it‚Äôs important to be able to include photographs, figures, and maps into your webpages. \n\n\n\n\n\nNate Quarderer, Elsa Culler\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nCustomize your website content\n\n\nGet started with HTML\n\n\nMarkdown is nice because it is easy to read, and lets us get started building websites quickly. But, it can‚Äôt do everything! Adding Hyper-Text Markup Language (HTML) will let you include multi-media materials and customize how your page looks and behaves. \n\n\n\n\n\nNate Quarderer, Elsa Culler\n\n\n9 min\n\n\n\n\n\n\n\n\n\n\n\n\nSpruce up your website\n\n\nGet started with Jekyll themes\n\n\nIt can be challenging to build an attractive website from scratch. Fortunately, many web designers have created themes to make any website look great. \n\n\n\n\n\nElsa Culler, Nate Quarderer\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a map to your website\n\n\nGet started with maps\n\n\nAs Earth and Environmental Data Scientists, we know places are important. In this activity, you will make your first map in Python, and use it to tell the story of where you come from and what places are important to you. \n\n\n\n\n\nNate Quarderer, Elsa Culler\n\n\n5 min\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\nReferences\n\nRandall Munroe. 2013. ‚ÄúThe Rise of Open Access.‚Äù Science 342 (6154): 58‚Äì59. https://www.science.org/doi/10.1126/science.342.6154.58.",
    "crumbs": [
      "ESIIL Data Short Course Home",
      "Unit 1",
      "Portfolio",
      "Join the Open Earth Data Science community online"
    ]
  }
]